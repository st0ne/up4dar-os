
up4dar-2nd-bootloader.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000019e4  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80003a00  80003a00  00003e00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000970  80003c00  80003c00  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000520  00000004  80004570  00004c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .balign       00000004  00000524  80004a90  00005124  2**0
                  ALLOC
  7 .bss          00000918  00000528  80004a90  00005128  2**2
                  ALLOC
  8 .comment      00000030  00000000  00000000  00005124  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000668  00000000  00000000  00005154  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 00001122  00000000  00000000  000057bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00008d7b  00000000  00000000  000068de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000018bc  00000000  00000000  0000f659  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006896  00000000  00000000  00010f15  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000010c8  00000000  00000000  000177ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000262f  00000000  00000000  00018874  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00002c1e  00000000  00000000  0001aea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 006de47c  00000000  00000000  0001dac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stack        00001000  0000f000  0000f000  00000400  2**0
                  ALLOC
 19 .debug_ranges 00000b30  00000000  00000000  006fbf3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf f4 6c 	sub	pc,pc,-2964

80002004 <software_version>:
80002004:	02 01       	add	r1,r1
80002006:	00 08       	add	r8,r0

Disassembly of section .text:

80002008 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002008:	fe 68 14 00 	mov	r8,-125952
8000200c:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
8000200e:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80002012:	91 09       	st.w	r8[0x0],r9
}
80002014:	5e fc       	retal	r12

80002016 <flashc_default_wait_until_ready>:
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80002016:	fe 6a 14 00 	mov	r10,-125952
}


void flashc_default_wait_until_ready(void)
{
	while (!flashc_is_ready());
8000201a:	30 09       	mov	r9,0
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
8000201c:	74 28       	ld.w	r8,r10[0x8]
}


void flashc_default_wait_until_ready(void)
{
	while (!flashc_is_ready());
8000201e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002022:	f2 08 18 00 	cp.b	r8,r9
80002026:	cf b0       	breq	8000201c <flashc_default_wait_until_ready+0x6>
}
80002028:	5e fc       	retal	r12
8000202a:	d7 03       	nop

8000202c <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
8000202c:	eb cd 40 e0 	pushm	r5-r7,lr
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80002030:	48 f6       	lddpc	r6,8000206c <flashc_issue_command+0x40>
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
80002032:	18 97       	mov	r7,r12
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80002034:	6c 08       	ld.w	r8,r6[0x0]
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
80002036:	16 95       	mov	r5,r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80002038:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
8000203a:	fe 68 14 00 	mov	r8,-125952
8000203e:	70 18       	ld.w	r8,r8[0x4]
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80002040:	f1 d7 d0 06 	bfins	r8,r7,0x0,0x6
	if (page_number >= 0) {
80002044:	58 05       	cp.w	r5,0
80002046:	c0 35       	brlt	8000204c <flashc_issue_command+0x20>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
80002048:	f1 d5 d1 10 	bfins	r8,r5,0x8,0x10
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
8000204c:	3a 5a       	mov	r10,-91
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
8000204e:	fe 69 14 00 	mov	r9,-125952
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
	u_avr32_flashc_fcmd.FCMD.cmd = command;
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80002052:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
80002056:	48 7a       	lddpc	r10,80002070 <flashc_issue_command+0x44>
	u_avr32_flashc_fcmd.FCMD.cmd = command;
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80002058:	93 18       	st.w	r9[0x4],r8
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
8000205a:	72 29       	ld.w	r9,r9[0x8]
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
8000205c:	e2 19 00 0c 	andl	r9,0xc,COH
	flashc_wait_until_ready();
80002060:	6c 08       	ld.w	r8,r6[0x0]
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
80002062:	95 09       	st.w	r10[0x0],r9
	flashc_wait_until_ready();
80002064:	5d 18       	icall	r8
}
80002066:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000206a:	d7 03       	nop
8000206c:	00 00       	add	r0,r0
8000206e:	00 04       	add	r4,r0
80002070:	00 00       	add	r0,r0
80002072:	05 28       	ld.uh	r8,r2++

80002074 <flashc_clear_page_buffer>:
 */
//! @{


void flashc_clear_page_buffer(void)
{
80002074:	d4 01       	pushm	lr
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_CPB, -1);
80002076:	3f fb       	mov	r11,-1
80002078:	30 3c       	mov	r12,3
8000207a:	cd 9f       	rcall	8000202c <flashc_issue_command>
8000207c:	d8 02       	popm	pc
}
8000207e:	d7 03       	nop

80002080 <flashc_quick_page_read>:
80002080:	d4 01       	pushm	lr
80002082:	18 9b       	mov	r11,r12
}


bool flashc_quick_page_read(int page_number)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
80002084:	30 cc       	mov	r12,12
80002086:	cd 3f       	rcall	8000202c <flashc_issue_command>
80002088:	fe 68 14 00 	mov	r8,-125952
}


bool flashc_is_page_erased(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
8000208c:	70 2c       	ld.w	r12,r8[0x8]
8000208e:	f9 dc c0 a1 	bfextu	r12,r12,0x5,0x1

bool flashc_quick_page_read(int page_number)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
	return flashc_is_page_erased();
}
80002092:	d8 02       	popm	pc

80002094 <flashc_erase_page>:
80002094:	eb cd 40 c0 	pushm	r6-r7,lr
80002098:	16 97       	mov	r7,r11
8000209a:	18 9b       	mov	r11,r12

bool flashc_erase_page(int page_number, bool check)
{
	bool page_erased = true;

	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
8000209c:	30 2c       	mov	r12,2
8000209e:	cc 7f       	rcall	8000202c <flashc_issue_command>
800020a0:	58 07       	cp.w	r7,0
	if (check) {
800020a2:	c0 31       	brne	800020a8 <flashc_erase_page+0x14>
800020a4:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
800020a8:	48 57       	lddpc	r7,800020bc <flashc_erase_page+0x28>
		unsigned int error_status = flashc_error_status;
800020aa:	3f fc       	mov	r12,-1
		page_erased = flashc_quick_page_read(-1);
800020ac:	6e 06       	ld.w	r6,r7[0x0]
{
	bool page_erased = true;

	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
	if (check) {
		unsigned int error_status = flashc_error_status;
800020ae:	ce 9f       	rcall	80002080 <flashc_quick_page_read>
		page_erased = flashc_quick_page_read(-1);
800020b0:	6e 08       	ld.w	r8,r7[0x0]
800020b2:	f1 e6 10 06 	or	r6,r8,r6
		flashc_error_status |= error_status;
800020b6:	8f 06       	st.w	r7[0x0],r6
800020b8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	}
	return page_erased;
}
800020bc:	00 00       	add	r0,r0
800020be:	05 28       	ld.uh	r8,r2++

800020c0 <flashc_write_page>:
800020c0:	d4 01       	pushm	lr
800020c2:	18 9b       	mov	r11,r12
800020c4:	30 1c       	mov	r12,1
800020c6:	cb 3f       	rcall	8000202c <flashc_issue_command>
800020c8:	d8 02       	popm	pc
800020ca:	d7 03       	nop

800020cc <flashc_quick_user_page_read>:


void flashc_write_page(int page_number)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WP, page_number);
}
800020cc:	d4 01       	pushm	lr
800020ce:	30 fc       	mov	r12,15


bool flashc_quick_user_page_read(void)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
800020d0:	3f fb       	mov	r11,-1
800020d2:	ca df       	rcall	8000202c <flashc_issue_command>
800020d4:	fe 68 14 00 	mov	r8,-125952
}


bool flashc_is_page_erased(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
800020d8:	70 2c       	ld.w	r12,r8[0x8]
800020da:	f9 dc c0 a1 	bfextu	r12,r12,0x5,0x1

bool flashc_quick_user_page_read(void)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
	return flashc_is_page_erased();
}
800020de:	d8 02       	popm	pc

800020e0 <flashc_erase_user_page>:
800020e0:	eb cd 40 80 	pushm	r7,lr
800020e4:	3f fb       	mov	r11,-1
800020e6:	18 97       	mov	r7,r12


bool flashc_erase_user_page(bool check)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EUP, -1);
800020e8:	30 ec       	mov	r12,14
800020ea:	ca 1f       	rcall	8000202c <flashc_issue_command>
800020ec:	58 07       	cp.w	r7,0
	return (check) ? flashc_quick_user_page_read() : true;
800020ee:	c0 31       	brne	800020f4 <flashc_erase_user_page+0x14>
800020f0:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
800020f4:	ce cf       	rcall	800020cc <flashc_quick_user_page_read>
800020f6:	e3 cd 80 80 	ldm	sp++,r7,pc
}
800020fa:	d7 03       	nop

800020fc <flashc_write_user_page>:
800020fc:	d4 01       	pushm	lr
800020fe:	3f fb       	mov	r11,-1
80002100:	30 dc       	mov	r12,13
80002102:	c9 5f       	rcall	8000202c <flashc_issue_command>
80002104:	d8 02       	popm	pc
80002106:	d7 03       	nop

80002108 <flashc_memcpy>:


void flashc_write_user_page(void)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WUP, -1);
}
80002108:	d4 31       	pushm	r0-r7,lr
8000210a:	20 7d       	sub	sp,28
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
8000210c:	e0 68 ff ff 	mov	r8,65535
80002110:	ea 18 80 7f 	orh	r8,0x807f
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
80002114:	50 1c       	stdsp	sp[0x4],r12
80002116:	50 49       	stdsp	sp[0x10],r9
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
80002118:	10 3c       	cp.w	r12,r8
8000211a:	5f bc       	srhi	r12
8000211c:	50 3c       	stdsp	sp[0xc],r12
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
8000211e:	14 97       	mov	r7,r10

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
80002120:	58 0a       	cp.w	r10,0
80002122:	c6 00       	breq	800021e2 <flashc_memcpy+0xda>
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
80002124:	30 08       	mov	r8,0
	Union64 flash_dword;
	uint8_t i;
	bool b_user_page;
	unsigned int error_status = 0;
	uint8_t* flash_add;
	uint8_t* dest_add=(uint8_t*)dst;
80002126:	40 15       	lddsp	r5,sp[0x4]
	const uint8_t* src_buf=(const uint8_t*)src;
80002128:	16 93       	mov	r3,r11
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
8000212a:	0a 96       	mov	r6,r5
8000212c:	4a f0       	lddpc	r0,800021e8 <flashc_memcpy+0xe0>
8000212e:	e0 16 fe 00 	andl	r6,0xfe00
80002132:	fa c1 ff ec 	sub	r1,sp,-20
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
80002136:	10 94       	mov	r4,r8
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
80002138:	e0 62 02 00 	mov	r2,512

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
8000213c:	50 08       	stdsp	sp[0x0],r8
8000213e:	c9 bf       	rcall	80002074 <flashc_clear_page_buffer>
80002140:	60 09       	ld.w	r9,r0[0x0]
		error_status |= flashc_error_status;
80002142:	40 08       	lddsp	r8,sp[0x0]
80002144:	30 0c       	mov	r12,0
80002146:	12 48       	or	r8,r9
80002148:	0c 9a       	mov	r10,r6
8000214a:	50 28       	stdsp	sp[0x8],r8
8000214c:	18 96       	mov	r6,r12
8000214e:	f4 e8 00 00 	ld.d	r8,r10[0]

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;
80002152:	f4 cc ff f7 	sub	r12,r10,-9
	// Return the initial destination pointer as the standard memset function does.
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
80002156:	fa e9 00 14 	st.d	sp[20],r8
		error_status |= flashc_error_status;

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;
8000215a:	f4 c8 ff ff 	sub	r8,r10,-1
8000215e:	02 99       	mov	r9,r1
80002160:	58 07       	cp.w	r7,0

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
80002162:	5f 1a       	srne	r10
80002164:	f0 cb 00 01 	sub	r11,r8,1
80002168:	16 35       	cp.w	r5,r11
8000216a:	5f 0b       	sreq	r11
8000216c:	f7 ea 00 0a 	and	r10,r11,r10
80002170:	e8 0a 18 00 	cp.b	r10,r4
80002174:	c0 50       	breq	8000217e <flashc_memcpy+0x76>
80002176:	07 3a       	ld.ub	r10,r3++
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80002178:	20 17       	sub	r7,1
					dest_add++;
					nbytes--;
8000217a:	b2 8a       	st.b	r9[0x0],r10

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
8000217c:	10 95       	mov	r5,r8
8000217e:	10 9a       	mov	r10,r8
					dest_add++;
					nbytes--;
80002180:	2f f9       	sub	r9,-1
80002182:	2f f8       	sub	r8,-1
80002184:	18 38       	cp.w	r8,r12
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
80002186:	ce d1       	brne	80002160 <flashc_memcpy+0x58>
80002188:	f4 cb 00 08 	sub	r11,r10,8
				}
				flash_add++;
			}

			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
8000218c:	fa e8 00 14 	ld.d	r8,sp[20]
80002190:	f6 e9 00 00 	st.d	r11[0],r8
80002194:	2f 86       	sub	r6,-8
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
80002196:	5c 86       	casts.h	r6
80002198:	e4 06 19 00 	cp.h	r6,r2
8000219c:	cd 91       	brne	8000214e <flashc_memcpy+0x46>
8000219e:	14 96       	mov	r6,r10
800021a0:	40 48       	lddsp	r8,sp[0x10]
			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
		}

		// Erase the current page if requested and write it from the page buffer.
		if (erase) {
800021a2:	58 08       	cp.w	r8,0
800021a4:	c0 a0       	breq	800021b8 <flashc_memcpy+0xb0>
800021a6:	40 3c       	lddsp	r12,sp[0xc]
			(b_user_page)? flashc_erase_user_page(false) : flashc_erase_page(-1, false);
800021a8:	58 0c       	cp.w	r12,0
800021aa:	c1 80       	breq	800021da <flashc_memcpy+0xd2>
800021ac:	30 0c       	mov	r12,0
800021ae:	c9 9f       	rcall	800020e0 <flashc_erase_user_page>
800021b0:	40 29       	lddsp	r9,sp[0x8]
800021b2:	60 08       	ld.w	r8,r0[0x0]
			error_status |= flashc_error_status;
800021b4:	10 49       	or	r9,r8
800021b6:	50 29       	stdsp	sp[0x8],r9
800021b8:	40 38       	lddsp	r8,sp[0xc]
800021ba:	58 08       	cp.w	r8,0
		}

		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
800021bc:	c0 c0       	breq	800021d4 <flashc_memcpy+0xcc>
800021be:	c9 ff       	rcall	800020fc <flashc_write_user_page>
800021c0:	60 08       	ld.w	r8,r0[0x0]
800021c2:	40 2c       	lddsp	r12,sp[0x8]
800021c4:	f9 e8 10 08 	or	r8,r12,r8
		error_status |= flashc_error_status;
800021c8:	58 07       	cp.w	r7,0
800021ca:	cb 91       	brne	8000213c <flashc_memcpy+0x34>
800021cc:	81 08       	st.w	r0[0x0],r8

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
800021ce:	40 1c       	lddsp	r12,sp[0x4]
800021d0:	2f 9d       	sub	sp,-28
		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
		error_status |= flashc_error_status;
	}
	// Update the FLASHC error status.
	flashc_error_status = error_status;
800021d2:	d8 32       	popm	r0-r7,pc

	// Return the initial destination pointer as the standard memcpy function does.
	return dst;
}
800021d4:	3f fc       	mov	r12,-1
800021d6:	c7 5f       	rcall	800020c0 <flashc_write_page>
800021d8:	cf 4b       	rjmp	800021c0 <flashc_memcpy+0xb8>
			(b_user_page)? flashc_erase_user_page(false) : flashc_erase_page(-1, false);
			error_status |= flashc_error_status;
		}

		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
800021da:	40 3b       	lddsp	r11,sp[0xc]
800021dc:	3f fc       	mov	r12,-1
800021de:	c5 bf       	rcall	80002094 <flashc_erase_page>
800021e0:	ce 8b       	rjmp	800021b0 <flashc_memcpy+0xa8>
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
		}

		// Erase the current page if requested and write it from the page buffer.
		if (erase) {
			(b_user_page)? flashc_erase_user_page(false) : flashc_erase_page(-1, false);
800021e2:	14 98       	mov	r8,r10
800021e4:	48 10       	lddpc	r0,800021e8 <flashc_memcpy+0xe0>
800021e6:	cf 3b       	rjmp	800021cc <flashc_memcpy+0xc4>
800021e8:	00 00       	add	r0,r0
800021ea:	05 28       	ld.uh	r8,r2++

800021ec <prvUSART_ISR_NonNakedBehaviour>:
#elif __ICCAVR32__
	#pragma optimize = no_inline
#endif

static void prvUSART_ISR_NonNakedBehaviour( int usartNum )
{
800021ec:	eb cd 40 c0 	pushm	r6-r7,lr
	/* Now we can declare the local variables. */
	char     cChar;
	// portBASE_TYPE     xHigherPriorityTaskWoken = pdFALSE;
	unsigned long     ulStatus;
	unsigned long     ulMaskReg;
	volatile avr32_usart_t  *usart = usarts[usartNum].usart;
800021f0:	4a 9e       	lddpc	lr,80002294 <prvUSART_ISR_NonNakedBehaviour+0xa8>
800021f2:	e0 6b 01 ac 	mov	r11,428
800021f6:	f8 0b 02 4b 	mul	r11,r12,r11
800021fa:	fc 0b 00 0b 	add	r11,lr,r11
800021fe:	76 08       	ld.w	r8,r11[0x0]
	// portBASE_TYPE retstatus;
	int retstatus;

	/* What caused the interrupt? */
	ulStatus = usart->csr; 
80002200:	70 59       	ld.w	r9,r8[0x14]
	ulMaskReg = usart->imr;
80002202:	70 4a       	ld.w	r10,r8[0x10]

	if (ulStatus & ulMaskReg & AVR32_USART_CSR_TXRDY_MASK)
80002204:	f3 ea 00 0a 	and	r10,r9,r10
80002208:	ed ba 00 01 	bld	r10,0x1
8000220c:	c1 31       	brne	80002232 <prvUSART_ISR_NonNakedBehaviour+0x46>
	return 1;
}

static int get_q( struct usartBuffer * q, char * c)
{
	if (q->input_ptr == q->output_ptr)
8000220e:	f6 c6 ff 20 	sub	r6,r11,-224
80002212:	f6 fa 00 dc 	ld.w	r10,r11[220]
80002216:	6c 07       	ld.w	r7,r6[0x0]
80002218:	0e 3a       	cp.w	r10,r7
8000221a:	c3 90       	breq	8000228c <prvUSART_ISR_NonNakedBehaviour+0xa0>
		return 0; // queue empty
	}
	
	int next_ptr = q->output_ptr;
	
	next_ptr ++;
8000221c:	ee ca ff ff 	sub	r10,r7,-1
	
	if (next_ptr >= USART_BUFLEN)
80002220:	e0 4a 00 c8 	cp.w	r10,200
80002224:	f9 ba 04 00 	movge	r10,0
	{
		next_ptr = 0;
	}
	
	*c = q->buf[ q->output_ptr ];
	q->output_ptr = next_ptr;
80002228:	8d 0a       	st.w	r6[0x0],r10
	if (next_ptr >= USART_BUFLEN)
	{
		next_ptr = 0;
	}
	
	*c = q->buf[ q->output_ptr ];
8000222a:	0e 0b       	add	r11,r7
8000222c:	f7 3a 00 e4 	ld.ub	r10,r11[228]

		if (retstatus == 1)
		{
			/* A character was retrieved from the queue so can be sent to the
			 THR now. */
			usart->thr = cChar;
80002230:	91 7a       	st.w	r8[0x1c],r10
			/* Queue empty, nothing to send so turn off the Tx interrupt. */
			usart->idr = AVR32_USART_IDR_TXRDY_MASK;
		}
	}

	if (ulStatus & AVR32_USART_CSR_RXRDY_MASK)
80002232:	ed b9 00 00 	bld	r9,0x0
80002236:	c1 a1       	brne	8000226a <prvUSART_ISR_NonNakedBehaviour+0x7e>



static int put_q( struct usartBuffer * q, char c)
{
	int next_ptr = q->input_ptr;
80002238:	e0 6a 01 ac 	mov	r10,428
	}

	if (ulStatus & AVR32_USART_CSR_RXRDY_MASK)
	{
		/* The interrupt was caused by the receiver getting data. */
		cChar = usart->rhr; //TODO
8000223c:	70 66       	ld.w	r6,r8[0x18]



static int put_q( struct usartBuffer * q, char c)
{
	int next_ptr = q->input_ptr;
8000223e:	f8 0a 03 4e 	mac	lr,r12,r10
80002242:	fc cb ff f4 	sub	r11,lr,-12
	if (next_ptr >= USART_BUFLEN)
	{
		next_ptr = 0;
	}
	
	if (next_ptr == q->output_ptr) // queue is full
80002246:	7c 47       	ld.w	r7,lr[0x10]



static int put_q( struct usartBuffer * q, char c)
{
	int next_ptr = q->input_ptr;
80002248:	76 0c       	ld.w	r12,r11[0x0]
	
	next_ptr ++;
8000224a:	f8 ca ff ff 	sub	r10,r12,-1
	
	if (next_ptr >= USART_BUFLEN)
8000224e:	e0 4a 00 c8 	cp.w	r10,200
80002252:	f9 ba 04 00 	movge	r10,0
	{
		next_ptr = 0;
	}
	
	if (next_ptr == q->output_ptr) // queue is full
80002256:	14 37       	cp.w	r7,r10
80002258:	c1 50       	breq	80002282 <prvUSART_ISR_NonNakedBehaviour+0x96>
	{
		return 0;
	}
	
	q->buf[ q->input_ptr ] = c;
8000225a:	18 0e       	add	lr,r12
8000225c:	fd 66 00 14 	st.b	lr[20],r6
	q->input_ptr = next_ptr;
80002260:	97 0a       	st.w	r11[0x0],r10
		retstatus = put_q(& usarts[usartNum].rx, cChar);
		
	
		if (retstatus == 1)
		{
			serialRXOK ++;
80002262:	48 ea       	lddpc	r10,80002298 <prvUSART_ISR_NonNakedBehaviour+0xac>
80002264:	74 0b       	ld.w	r11,r10[0x0]
80002266:	2f fb       	sub	r11,-1
80002268:	95 0b       	st.w	r10[0x0],r11
		
	}
	

	
	if (ulStatus & (AVR32_USART_CSR_OVRE_MASK | AVR32_USART_CSR_FRAME_MASK ))
8000226a:	e2 19 00 60 	andl	r9,0x60,COH
8000226e:	c0 80       	breq	8000227e <prvUSART_ISR_NonNakedBehaviour+0x92>
	{
			serialRXError ++;	
80002270:	48 b9       	lddpc	r9,8000229c <prvUSART_ISR_NonNakedBehaviour+0xb0>
80002272:	72 0a       	ld.w	r10,r9[0x0]
80002274:	2f fa       	sub	r10,-1
80002276:	93 0a       	st.w	r9[0x0],r10
			usart->cr = AVR32_USART_CR_RSTSTA_MASK;
80002278:	e0 69 01 00 	mov	r9,256
8000227c:	91 09       	st.w	r8[0x0],r9
8000227e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		{
			serialRXOK ++;
		}
		else
		{
			serialRXError ++;
80002282:	48 7a       	lddpc	r10,8000229c <prvUSART_ISR_NonNakedBehaviour+0xb0>
80002284:	74 0b       	ld.w	r11,r10[0x0]
80002286:	2f fb       	sub	r11,-1
80002288:	95 0b       	st.w	r10[0x0],r11
8000228a:	cf 0b       	rjmp	8000226a <prvUSART_ISR_NonNakedBehaviour+0x7e>
			usart->thr = cChar;
		}
		else
		{
			/* Queue empty, nothing to send so turn off the Tx interrupt. */
			usart->idr = AVR32_USART_IDR_TXRDY_MASK;
8000228c:	30 2a       	mov	r10,2
8000228e:	91 3a       	st.w	r8[0xc],r10
80002290:	cd 1b       	rjmp	80002232 <prvUSART_ISR_NonNakedBehaviour+0x46>
80002292:	d7 03       	nop
80002294:	00 00       	add	r0,r0
80002296:	00 08       	add	r8,r0
80002298:	00 00       	add	r0,r0
8000229a:	05 30       	ld.ub	r0,r2++
8000229c:	00 00       	add	r0,r0
8000229e:	05 2c       	ld.uh	r12,r2++

800022a0 <vUSART0_ISR>:
static void vUSART0_ISR( void )
{
	/* This ISR can cause a context switch, so the first statement must be a
	call to the portENTER_SWITCHING_ISR() macro.  This must be BEFORE any
	variable declarations. */
	portENTER_SWITCHING_ISR();
800022a0:	eb cd 00 ff 	pushm	r0-r7

	prvUSART_ISR_NonNakedBehaviour(0);
800022a4:	30 0c       	mov	r12,0
800022a6:	ca 3f       	rcall	800021ec <prvUSART_ISR_NonNakedBehaviour>
800022a8:	e3 cd 00 ff 	ldm	sp++,r0-r7

	/* Exit the ISR.  If a task was woken by either a character being received
	or transmitted then a context switch will occur. */
	portEXIT_SWITCHING_ISR();
800022ac:	d6 03       	rete
800022ae:	d7 03       	nop

800022b0 <vUSART1_ISR>:
800022b0:	eb cd 00 ff 	pushm	r0-r7
	/* This ISR can cause a context switch, so the first statement must be a
	call to the portENTER_SWITCHING_ISR() macro.  This must be BEFORE any
	variable declarations. */
	portENTER_SWITCHING_ISR();

	prvUSART_ISR_NonNakedBehaviour(1);
800022b4:	30 1c       	mov	r12,1
800022b6:	c9 bf       	rcall	800021ec <prvUSART_ISR_NonNakedBehaviour>
800022b8:	e3 cd 00 ff 	ldm	sp++,r0-r7

	/* Exit the ISR.  If a task was woken by either a character being received
	or transmitted then a context switch will occur. */
	portEXIT_SWITCHING_ISR();
800022bc:	d6 03       	rete
800022be:	d7 03       	nop

800022c0 <vUSART2_ISR>:
800022c0:	eb cd 00 ff 	pushm	r0-r7
	/* This ISR can cause a context switch, so the first statement must be a
	call to the portENTER_SWITCHING_ISR() macro.  This must be BEFORE any
	variable declarations. */
	portENTER_SWITCHING_ISR();

	prvUSART_ISR_NonNakedBehaviour(2);
800022c4:	30 2c       	mov	r12,2
800022c6:	c9 3f       	rcall	800021ec <prvUSART_ISR_NonNakedBehaviour>
800022c8:	e3 cd 00 ff 	ldm	sp++,r0-r7

	/* Exit the ISR.  If a task was woken by either a character being received
	or transmitted then a context switch will occur. */
	portEXIT_SWITCHING_ISR();
800022cc:	d6 03       	rete
800022ce:	d7 03       	nop

800022d0 <serial_rx_char_available>:
800022d0:	48 69       	lddpc	r9,800022e8 <serial_rx_char_available+0x18>
800022d2:	e0 68 01 ac 	mov	r8,428
	return 0;  
}


int serial_rx_char_available (int pxPort)
{
800022d6:	f8 08 02 48 	mul	r8,r12,r8
800022da:	f2 08 00 08 	add	r8,r9,r8
800022de:	70 49       	ld.w	r9,r8[0x10]
800022e0:	70 38       	ld.w	r8,r8[0xc]
800022e2:	12 38       	cp.w	r8,r9

	struct usartBuffer * q = & usarts[pxPort].rx;
	
	return q->input_ptr != q->output_ptr;
}
800022e4:	5f 1c       	srne	r12
800022e6:	5e fc       	retal	r12
800022e8:	00 00       	add	r0,r0
800022ea:	00 08       	add	r8,r0

800022ec <serial_putc>:
	return 1;
}


int serial_putc ( int pxPort, char cOutChar )
{
800022ec:	eb cd 40 80 	pushm	r7,lr
	volatile avr32_usart_t  *usart = usarts[pxPort].usart;
800022f0:	49 59       	lddpc	r9,80002344 <serial_putc+0x58>
800022f2:	e0 68 01 ac 	mov	r8,428
800022f6:	f8 08 02 48 	mul	r8,r12,r8
800022fa:	f2 08 00 08 	add	r8,r9,r8
800022fe:	70 07       	ld.w	r7,r8[0x0]

	struct usartBuffer * q = & usarts[pxPort].tx;
	int returnval;
	
	
	Disable_global_interrupt();
80002300:	d3 03       	ssrf	0x10



static int put_q( struct usartBuffer * q, char c)
{
	int next_ptr = q->input_ptr;
80002302:	f0 cc ff 24 	sub	r12,r8,-220
	if (next_ptr >= USART_BUFLEN)
	{
		next_ptr = 0;
	}
	
	if (next_ptr == q->output_ptr) // queue is full
80002306:	f0 fe 00 e0 	ld.w	lr,r8[224]



static int put_q( struct usartBuffer * q, char c)
{
	int next_ptr = q->input_ptr;
8000230a:	78 0a       	ld.w	r10,r12[0x0]
	
	next_ptr ++;
8000230c:	f4 c9 ff ff 	sub	r9,r10,-1
	
	if (next_ptr >= USART_BUFLEN)
80002310:	e0 49 00 c8 	cp.w	r9,200
80002314:	f9 b9 04 00 	movge	r9,0
	{
		next_ptr = 0;
	}
	
	if (next_ptr == q->output_ptr) // queue is full
80002318:	12 3e       	cp.w	lr,r9
8000231a:	f9 bc 00 00 	moveq	r12,0
	{
		return 0;
	}
	
	q->buf[ q->input_ptr ] = c;
	q->input_ptr = next_ptr;
8000231e:	f9 f9 1a 00 	st.wne	r12[0x0],r9
	if (next_ptr == q->output_ptr) // queue is full
	{
		return 0;
	}
	
	q->buf[ q->input_ptr ] = c;
80002322:	f1 da e1 08 	addne	r8,r8,r10
80002326:	f1 fb 1e e4 	st.bne	r8[0xe4],r11
	q->input_ptr = next_ptr;
8000232a:	f9 bc 01 01 	movne	r12,1
	
	Disable_global_interrupt();
	
	returnval = put_q(q, cOutChar);
	
	Enable_global_interrupt();
8000232e:	d5 03       	csrf	0x10
	
	if (returnval != 1)
80002330:	58 1c       	cp.w	r12,1
80002332:	f9 bc 01 00 	movne	r12,0

	/* Turn on the Tx interrupt so the ISR will remove the character from the
	queue and send it.   This does not need to be in a critical section as
	if the interrupt has already removed the character the next interrupt
	will simply turn off the Tx interrupt again. */
	usart->ier = (1 << AVR32_USART_IER_TXRDY_OFFSET);
80002336:	f9 b8 00 02 	moveq	r8,2
8000233a:	ef f8 0a 02 	st.weq	r7[0x8],r8

	return 1;
}
8000233e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002342:	d7 03       	nop
80002344:	00 00       	add	r0,r0
80002346:	00 08       	add	r8,r0

80002348 <serial_getc>:

	struct usartBuffer * q = & usarts[pxPort].rx;
	int returnval;
	
	
	Disable_global_interrupt();
80002348:	d3 03       	ssrf	0x10
	return 1;
}

static int get_q( struct usartBuffer * q, char * c)
{
	if (q->input_ptr == q->output_ptr)
8000234a:	e0 68 01 ac 	mov	r8,428
8000234e:	b1 3c       	mul	r12,r8
80002350:	48 d8       	lddpc	r8,80002384 <serial_getc+0x3c>
80002352:	f0 0c 00 0c 	add	r12,r8,r12
80002356:	f8 c9 ff f0 	sub	r9,r12,-16
8000235a:	78 3a       	ld.w	r10,r12[0xc]
8000235c:	72 08       	ld.w	r8,r9[0x0]
8000235e:	10 3a       	cp.w	r10,r8
80002360:	c0 e0       	breq	8000237c <serial_getc+0x34>
	if (next_ptr >= USART_BUFLEN)
	{
		next_ptr = 0;
	}
	
	*c = q->buf[ q->output_ptr ];
80002362:	10 0c       	add	r12,r8
80002364:	f9 3a 00 14 	ld.ub	r10,r12[20]
80002368:	b6 8a       	st.b	r11[0x0],r10
		return 0; // queue empty
	}
	
	int next_ptr = q->output_ptr;
	
	next_ptr ++;
8000236a:	2f f8       	sub	r8,-1
	{
		next_ptr = 0;
	}
	
	*c = q->buf[ q->output_ptr ];
	q->output_ptr = next_ptr;
8000236c:	30 1c       	mov	r12,1
	
	int next_ptr = q->output_ptr;
	
	next_ptr ++;
	
	if (next_ptr >= USART_BUFLEN)
8000236e:	e0 48 00 c8 	cp.w	r8,200
80002372:	f9 b8 04 00 	movge	r8,0
	{
		next_ptr = 0;
	}
	
	*c = q->buf[ q->output_ptr ];
	q->output_ptr = next_ptr;
80002376:	93 08       	st.w	r9[0x0],r8
	
	Disable_global_interrupt();
	
	returnval = get_q(q, cOutChar);
	
	Enable_global_interrupt();
80002378:	d5 03       	csrf	0x10
	{
		return 0; // queue is empty
	}
	
	return 1;
}
8000237a:	5e fc       	retal	r12
	return 1;
}

static int get_q( struct usartBuffer * q, char * c)
{
	if (q->input_ptr == q->output_ptr)
8000237c:	30 0c       	mov	r12,0
	
	Disable_global_interrupt();
	
	returnval = get_q(q, cOutChar);
	
	Enable_global_interrupt();
8000237e:	d5 03       	csrf	0x10
	{
		return 0; // queue is empty
	}
	
	return 1;
}
80002380:	5e fc       	retal	r12
80002382:	d7 03       	nop
80002384:	00 00       	add	r0,r0
80002386:	00 08       	add	r8,r0

80002388 <serial_stop>:
/*-----------------------------------------------------------*/


int serial_stop ( int usartNum )
{
	if ((usartNum < 0) || (usartNum >= NUM_USART))
80002388:	58 2c       	cp.w	r12,2
8000238a:	e0 88 00 03 	brls	80002390 <serial_stop+0x8>
8000238e:	5e fe       	retal	-1
	return -1;  // error

	volatile avr32_usart_t  *usart = usarts[usartNum].usart;
80002390:	e0 68 01 ac 	mov	r8,428
80002394:	b1 3c       	mul	r12,r8
80002396:	48 68       	lddpc	r8,800023ac <serial_stop+0x24>
80002398:	f0 0c 03 08 	ld.w	r8,r8[r12]
	
	Disable_global_interrupt();
8000239c:	d3 03       	ssrf	0x10
	{
		usart->idr = AVR32_USART_IDR_RXRDY_MASK | AVR32_USART_IDR_TXRDY_MASK;
8000239e:	30 39       	mov	r9,3
800023a0:	91 39       	st.w	r8[0xc],r9
		usart->cr = AVR32_USART_CR_TXDIS_MASK | AVR32_USART_CR_RXDIS_MASK;
800023a2:	e0 69 00 a0 	mov	r9,160
800023a6:	91 09       	st.w	r8[0x0],r9
	}
	Enable_global_interrupt();
800023a8:	d5 03       	csrf	0x10
800023aa:	5e fd       	retal	0
800023ac:	00 00       	add	r0,r0
800023ae:	00 08       	add	r8,r0

800023b0 <serial_init>:
/*
 * Init the serial port for the Minimal implementation.
 */
//xComPortHandle xSerialPortInitMinimal( int usartNum, unsigned portLONG ulWantedBaud, unsigned portBASE_TYPE uxQueueLength )
int serial_init ( int usartNum, unsigned long ulWantedBaud )
{
800023b0:	d4 21       	pushm	r4-r7,lr
	
	if ((usartNum < 0) || (usartNum >= NUM_USART))
800023b2:	58 2c       	cp.w	r12,2
800023b4:	e0 88 00 03 	brls	800023ba <serial_init+0xa>
	else
	{
		return -1;  // error
	}

	return 0;  
800023b8:	dc 2a       	popm	r4-r7,pc,r12=-1
	/*
	usarts[usartNum].xRxedChars = xQueueCreate( uxQueueLength, ( unsigned portBASE_TYPE ) sizeof( signed portCHAR ) );
	usarts[usartNum].xCharsForTx = xQueueCreate( uxQueueLength + 1, ( unsigned portBASE_TYPE ) sizeof( signed portCHAR ) );
	*/
	
	volatile avr32_usart_t  *usart = usarts[usartNum].usart;
800023ba:	4a 08       	lddpc	r8,80002438 <serial_init+0x88>
800023bc:	e0 6a 01 ac 	mov	r10,428
800023c0:	f8 0a 02 4a 	mul	r10,r12,r10
800023c4:	f0 0a 00 0a 	add	r10,r8,r10
800023c8:	74 07       	ld.w	r7,r10[0x0]
	
	int cd; /* USART Clock Divider. */


	/* Configure USART. */
	if(   ( ulWantedBaud > 0 ) )
800023ca:	58 0b       	cp.w	r11,0
800023cc:	cf 60       	breq	800023b8 <serial_init+0x8>
	{
		//portENTER_CRITICAL();
		Disable_global_interrupt();
800023ce:	d3 03       	ssrf	0x10
		{
			/**
			** Reset USART.
			**/
			/* Disable all USART interrupt sources to begin... */
			usart->idr = 0xFFFFFFFF;
800023d0:	3f f9       	mov	r9,-1
800023d2:	8f 39       	st.w	r7[0xc],r9

			/* Reset mode and other registers that could cause unpredictable
			 behaviour after reset */
			usart->mr = 0; /* Reset Mode register. */
800023d4:	30 06       	mov	r6,0
800023d6:	8f 16       	st.w	r7[0x4],r6
			usart->rtor = 0; /* Reset Receiver Time-out register. */
800023d8:	8f 96       	st.w	r7[0x24],r6
			usart->ttgr = 0; /* Reset Transmitter Timeguard register. */
800023da:	8f a6       	st.w	r7[0x28],r6

			/* Shutdown RX and TX, reset status bits, reset iterations in CSR, reset NACK
			 and turn off DTR and RTS */
			usart->cr = AVR32_USART_CR_RSTRX_MASK   |
800023dc:	ea 69 61 ac 	mov	r9,680364
800023e0:	8f 09       	st.w	r7[0x0],r9
			*       (with 16x oversampling)              (with 8x oversampling)
			*/

			// if( ulWantedBaud > ( configPBA_CLOCK_HZ / 16 ) )
			
			if( ulWantedBaud > 300 )
800023e2:	e0 4b 01 2c 	cp.w	r11,300
800023e6:	fe 98 ff e9 	brls	800023b8 <serial_init+0x8>
			{
				/* Use 8x oversampling */
				usart->mr |= (1<<AVR32_USART_MR_OVER_OFFSET);
800023ea:	6e 19       	ld.w	r9,r7[0x4]
800023ec:	b3 b9       	sbr	r9,0x13
800023ee:	8f 19       	st.w	r7[0x4],r9
				cd = configPBA_CLOCK_HZ / (ulWantedBaud);
800023f0:	fc 15 00 fa 	movh	r5,0xfa
800023f4:	ea 0b 0d 04 	divu	r4,r5,r11
				
				int fp = cd & 0x07; // fractional baudrate
				
				cd = cd >> 3; // divide by 8
800023f8:	e8 09 14 03 	asr	r9,r4,0x3

				if( cd < 2 )
800023fc:	58 19       	cp.w	r9,1
800023fe:	fe 9a ff dd 	brle	800023b8 <serial_init+0x8>
				{
					return -1;  // error
				}

				usart->brgr = (cd << AVR32_USART_BRGR_CD_OFFSET) | (fp << AVR32_USART_BRGR_FP_OFFSET);
80002402:	f7 d4 c0 03 	bfextu	r11,r4,0x0,0x3
80002406:	f3 eb 11 09 	or	r9,r9,r11<<0x10
8000240a:	8f 89       	st.w	r7[0x20],r9

			/* Set the USART Mode register: Mode=Normal(0), Clk selection=MCK(0),
			CHRL=8BIT,  SYNC=0(asynchronous), PAR=None, NBSTOP=0 (1 Stop bit), CHMODE=0, MSBF=0,
			MODE9=0, CKLO=0, OVER(previously done when setting the baudrate),
			other fields not used in this mode. */
			usart->mr |= ((8-5) << AVR32_USART_MR_CHRL_OFFSET  ) |
8000240c:	6e 19       	ld.w	r9,r7[0x4]
8000240e:	e8 19 08 c0 	orl	r9,0x8c0
80002412:	8f 19       	st.w	r7[0x4],r9
			usart->ttgr = 0;


			/* Register the USART interrupt handler to the interrupt controller and
			 enable the USART interrupt. */
			INTC_register_interrupt((__int_handler) usarts[usartNum].intrHandler, 
80002414:	f8 09 10 6b 	mul	r9,r12,107
80002418:	2f f9       	sub	r9,-1
			usart->mr |= ((8-5) << AVR32_USART_MR_CHRL_OFFSET  ) |
					(   4  << AVR32_USART_MR_PAR_OFFSET   ) |
					(   0  << AVR32_USART_MR_NBSTOP_OFFSET);

			/* Write the Transmit Timeguard Register */
			usart->ttgr = 0;
8000241a:	8f a6       	st.w	r7[0x28],r6


			/* Register the USART interrupt handler to the interrupt controller and
			 enable the USART interrupt. */
			INTC_register_interrupt((__int_handler) usarts[usartNum].intrHandler, 
8000241c:	74 2c       	ld.w	r12,r10[0x8]
8000241e:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
80002422:	30 1a       	mov	r10,1
80002424:	e0 a0 02 aa 	rcall	80002978 <INTC_register_interrupt>
					usarts[usartNum].irq, AVR32_INTC_INT1);

			/* Enable USART interrupt sources (but not Tx for now)... */
			usart->ier = AVR32_USART_IER_RXRDY_MASK;
80002428:	30 18       	mov	r8,1
8000242a:	8f 28       	st.w	r7[0x8],r8

			/* Enable receiver and transmitter... */
			usart->cr = AVR32_USART_CR_TXEN_MASK | AVR32_USART_CR_RXEN_MASK;
8000242c:	35 08       	mov	r8,80
8000242e:	8f 08       	st.w	r7[0x0],r8
			
		}
		//portEXIT_CRITICAL();
		Enable_global_interrupt();
80002430:	d5 03       	csrf	0x10
80002432:	0c 9c       	mov	r12,r6
	else
	{
		return -1;  // error
	}

	return 0;  
80002434:	d8 22       	popm	r4-r7,pc
80002436:	d7 03       	nop
80002438:	00 00       	add	r0,r0
8000243a:	00 08       	add	r8,r0

8000243c <SHA1Reset>:
 *  Comments:
 *
 */
void SHA1Reset(SHA1Context *context)
{
    context->Length_Low             = 0;
8000243c:	30 08       	mov	r8,0
    context->Message_Digest[2]      = 0x98BADCFE;
    context->Message_Digest[3]      = 0x10325476;
    context->Message_Digest[4]      = 0xC3D2E1F0;

    context->Computed   = 0;
    context->Corrupted  = 0;
8000243e:	f9 48 00 64 	st.w	r12[100],r8
 *  Comments:
 *
 */
void SHA1Reset(SHA1Context *context)
{
    context->Length_Low             = 0;
80002442:	99 58       	st.w	r12[0x14],r8
    context->Length_High            = 0;
80002444:	99 68       	st.w	r12[0x18],r8
    context->Message_Block_Index    = 0;
80002446:	f9 48 00 5c 	st.w	r12[92],r8
    context->Message_Digest[1]      = 0xEFCDAB89;
    context->Message_Digest[2]      = 0x98BADCFE;
    context->Message_Digest[3]      = 0x10325476;
    context->Message_Digest[4]      = 0xC3D2E1F0;

    context->Computed   = 0;
8000244a:	f9 48 00 60 	st.w	r12[96],r8
{
    context->Length_Low             = 0;
    context->Length_High            = 0;
    context->Message_Block_Index    = 0;

    context->Message_Digest[0]      = 0x67452301;
8000244e:	e0 68 23 01 	mov	r8,8961
80002452:	ea 18 67 45 	orh	r8,0x6745
80002456:	99 08       	st.w	r12[0x0],r8
    context->Message_Digest[1]      = 0xEFCDAB89;
80002458:	e0 68 ab 89 	mov	r8,43913
8000245c:	ea 18 ef cd 	orh	r8,0xefcd
80002460:	99 18       	st.w	r12[0x4],r8
    context->Message_Digest[2]      = 0x98BADCFE;
80002462:	e0 68 dc fe 	mov	r8,56574
80002466:	ea 18 98 ba 	orh	r8,0x98ba
8000246a:	99 28       	st.w	r12[0x8],r8
    context->Message_Digest[3]      = 0x10325476;
8000246c:	e0 68 54 76 	mov	r8,21622
80002470:	ea 18 10 32 	orh	r8,0x1032
80002474:	99 38       	st.w	r12[0xc],r8
    context->Message_Digest[4]      = 0xC3D2E1F0;
80002476:	e0 68 e1 f0 	mov	r8,57840
8000247a:	ea 18 c3 d2 	orh	r8,0xc3d2
8000247e:	99 48       	st.w	r12[0x10],r8

    context->Computed   = 0;
    context->Corrupted  = 0;
}
80002480:	5e fc       	retal	r12

80002482 <SHA1ProcessMessageBlock>:
 *      used in the publication.
 *         
 *
 */
void SHA1ProcessMessageBlock(SHA1Context *context)
{
80002482:	d4 31       	pushm	r0-r7,lr
80002484:	20 3d       	sub	sp,12
80002486:	30 09       	mov	r9,0
80002488:	f8 c3 ff 98 	sub	r3,r12,-104
8000248c:	06 98       	mov	r8,r3
    /*
     *  Initialize the first 16 words in the array W
     */
    for(t = 0; t < 16; t++)
    {
        W[t] = ((unsigned) context->Message_Block[t * 4]) << 24;
8000248e:	f1 3b ff b4 	ld.ub	r11,r8[-76]
        W[t] |= ((unsigned) context->Message_Block[t * 4 + 1]) << 16;
80002492:	f1 3a ff b5 	ld.ub	r10,r8[-75]
80002496:	b1 6a       	lsl	r10,0x10
80002498:	f5 eb 11 8a 	or	r10,r10,r11<<0x18
        W[t] |= ((unsigned) context->Message_Block[t * 4 + 2]) << 8;
8000249c:	f1 3b ff b6 	ld.ub	r11,r8[-74]
800024a0:	f5 eb 10 8a 	or	r10,r10,r11<<0x8
        W[t] |= ((unsigned) context->Message_Block[t * 4 + 3]);
800024a4:	f1 3b ff b7 	ld.ub	r11,r8[-73]
800024a8:	16 4a       	or	r10,r11
800024aa:	10 aa       	st.w	r8++,r10
#define W   (context->W_var)

    /*
     *  Initialize the first 16 words in the array W
     */
    for(t = 0; t < 16; t++)
800024ac:	2f f9       	sub	r9,-1
800024ae:	59 09       	cp.w	r9,16
800024b0:	ce f1       	brne	8000248e <SHA1ProcessMessageBlock+0xc>
800024b2:	f8 c8 ff 64 	sub	r8,r12,-156
        W[t] |= ((unsigned) context->Message_Block[t * 4 + 3]);
    }

    for(t = 16; t < 80; t++)
    {
       W[t] = SHA1CircularShift(1,W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16]);
800024b6:	f0 fb ff ec 	ld.w	r11,r8[-20]
800024ba:	70 0a       	ld.w	r10,r8[0x0]
800024bc:	f7 ea 20 0a 	eor	r10,r11,r10
800024c0:	f0 fb ff d4 	ld.w	r11,r8[-44]
800024c4:	16 5a       	eor	r10,r11
800024c6:	f0 fb ff cc 	ld.w	r11,r8[-52]
800024ca:	16 5a       	eor	r10,r11
800024cc:	f4 0b 15 01 	lsl	r11,r10,0x1
800024d0:	f7 ea 13 fa 	or	r10,r11,r10>>0x1f
800024d4:	91 3a       	st.w	r8[0xc],r10
        W[t] |= ((unsigned) context->Message_Block[t * 4 + 1]) << 16;
        W[t] |= ((unsigned) context->Message_Block[t * 4 + 2]) << 8;
        W[t] |= ((unsigned) context->Message_Block[t * 4 + 3]);
    }

    for(t = 16; t < 80; t++)
800024d6:	2f f9       	sub	r9,-1
800024d8:	2f c8       	sub	r8,-4
800024da:	e0 49 00 50 	cp.w	r9,80
800024de:	ce c1       	brne	800024b6 <SHA1ProcessMessageBlock+0x34>
       W[t] = SHA1CircularShift(1,W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16]);
    }

    A = context->Message_Digest[0];
    B = context->Message_Digest[1];
    C = context->Message_Digest[2];
800024e0:	78 28       	ld.w	r8,r12[0x8]
800024e2:	50 28       	stdsp	sp[0x8],r8
    D = context->Message_Digest[3];
800024e4:	78 38       	ld.w	r8,r12[0xc]
800024e6:	50 08       	stdsp	sp[0x0],r8
    E = context->Message_Digest[4];
800024e8:	78 48       	ld.w	r8,r12[0x10]
    for(t = 16; t < 80; t++)
    {
       W[t] = SHA1CircularShift(1,W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16]);
    }

    A = context->Message_Digest[0];
800024ea:	78 05       	ld.w	r5,r12[0x0]
    B = context->Message_Digest[1];
800024ec:	78 16       	ld.w	r6,r12[0x4]
    C = context->Message_Digest[2];
    D = context->Message_Digest[3];
    E = context->Message_Digest[4];
800024ee:	50 18       	stdsp	sp[0x4],r8
800024f0:	10 92       	mov	r2,r8
    {
       W[t] = SHA1CircularShift(1,W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16]);
    }

    A = context->Message_Digest[0];
    B = context->Message_Digest[1];
800024f2:	0c 99       	mov	r9,r6
    C = context->Message_Digest[2];
800024f4:	40 24       	lddsp	r4,sp[0x8]
    D = context->Message_Digest[3];
800024f6:	40 0b       	lddsp	r11,sp[0x0]
    E = context->Message_Digest[4];
800024f8:	0a 97       	mov	r7,r5
800024fa:	30 08       	mov	r8,0

    for(t = 0; t < 20; t++)
    {
        temp =  SHA1CircularShift(5,A) +
800024fc:	e0 61 79 99 	mov	r1,31129
80002500:	ea 11 5a 82 	orh	r1,0x5a82
80002504:	c0 48       	rjmp	8000250c <SHA1ProcessMessageBlock+0x8a>
    B = context->Message_Digest[1];
    C = context->Message_Digest[2];
    D = context->Message_Digest[3];
    E = context->Message_Digest[4];

    for(t = 0; t < 20; t++)
80002506:	08 9b       	mov	r11,r4
80002508:	14 97       	mov	r7,r10
8000250a:	00 94       	mov	r4,r0
    {
        temp =  SHA1CircularShift(5,A) +
8000250c:	e9 e9 00 00 	and	r0,r4,r9
80002510:	f2 0a 11 ff 	rsub	r10,r9,-1
80002514:	ee 0e 15 05 	lsl	lr,r7,0x5
80002518:	16 6a       	and	r10,r11
8000251a:	fd e7 13 be 	or	lr,lr,r7>>0x1b
8000251e:	00 4a       	or	r10,r0
80002520:	07 00       	ld.w	r0,r3++
80002522:	02 00       	add	r0,r1
80002524:	e0 02 00 02 	add	r2,r0,r2
80002528:	1c 02       	add	r2,lr
                ((B & C) | ((~B) & D)) + E + W[t] + K[0];
        temp &= 0xFFFFFFFF;
        E = D;
        D = C;
        C = SHA1CircularShift(30,B);
8000252a:	f2 00 15 1e 	lsl	r0,r9,0x1e
    D = context->Message_Digest[3];
    E = context->Message_Digest[4];

    for(t = 0; t < 20; t++)
    {
        temp =  SHA1CircularShift(5,A) +
8000252e:	e4 0a 00 0a 	add	r10,r2,r10
                ((B & C) | ((~B) & D)) + E + W[t] + K[0];
        temp &= 0xFFFFFFFF;
        E = D;
        D = C;
        C = SHA1CircularShift(30,B);
80002532:	e1 e9 12 20 	or	r0,r0,r9>>0x2
    B = context->Message_Digest[1];
    C = context->Message_Digest[2];
    D = context->Message_Digest[3];
    E = context->Message_Digest[4];

    for(t = 0; t < 20; t++)
80002536:	2f f8       	sub	r8,-1
80002538:	16 92       	mov	r2,r11
8000253a:	0e 99       	mov	r9,r7
8000253c:	59 48       	cp.w	r8,20
8000253e:	ce 41       	brne	80002506 <SHA1ProcessMessageBlock+0x84>
80002540:	14 9e       	mov	lr,r10
80002542:	16 92       	mov	r2,r11
80002544:	00 9a       	mov	r10,r0
80002546:	f8 c3 ff 48 	sub	r3,r12,-184
        A = temp;
    }

    for(t = 20; t < 40; t++)
    {
        temp = SHA1CircularShift(5,A) + (B ^ C ^ D) + E + W[t] + K[1];
8000254a:	e0 61 eb a1 	mov	r1,60321
8000254e:	ea 11 6e d9 	orh	r1,0x6ed9
80002552:	c0 48       	rjmp	8000255a <SHA1ProcessMessageBlock+0xd8>
        C = SHA1CircularShift(30,B);
        B = A;
        A = temp;
    }

    for(t = 20; t < 40; t++)
80002554:	14 94       	mov	r4,r10
80002556:	12 9e       	mov	lr,r9
80002558:	00 9a       	mov	r10,r0
    {
        temp = SHA1CircularShift(5,A) + (B ^ C ^ D) + E + W[t] + K[1];
8000255a:	fc 0b 15 05 	lsl	r11,lr,0x5
8000255e:	07 00       	ld.w	r0,r3++
80002560:	f7 ee 13 bb 	or	r11,r11,lr>>0x1b
80002564:	02 00       	add	r0,r1
80002566:	e0 02 00 02 	add	r2,r0,r2
8000256a:	16 02       	add	r2,r11
8000256c:	f5 e7 20 09 	eor	r9,r10,r7
        temp &= 0xFFFFFFFF;
        E = D;
        D = C;
        C = SHA1CircularShift(30,B);
80002570:	ee 00 15 1e 	lsl	r0,r7,0x1e
        A = temp;
    }

    for(t = 20; t < 40; t++)
    {
        temp = SHA1CircularShift(5,A) + (B ^ C ^ D) + E + W[t] + K[1];
80002574:	08 59       	eor	r9,r4
        temp &= 0xFFFFFFFF;
        E = D;
        D = C;
        C = SHA1CircularShift(30,B);
80002576:	e1 e7 12 20 	or	r0,r0,r7>>0x2
        A = temp;
    }

    for(t = 20; t < 40; t++)
    {
        temp = SHA1CircularShift(5,A) + (B ^ C ^ D) + E + W[t] + K[1];
8000257a:	e4 09 00 09 	add	r9,r2,r9
        C = SHA1CircularShift(30,B);
        B = A;
        A = temp;
    }

    for(t = 20; t < 40; t++)
8000257e:	2f f8       	sub	r8,-1
80002580:	08 92       	mov	r2,r4
80002582:	1c 97       	mov	r7,lr
80002584:	e0 48 00 28 	cp.w	r8,40
80002588:	ce 61       	brne	80002554 <SHA1ProcessMessageBlock+0xd2>
8000258a:	12 9b       	mov	r11,r9
8000258c:	14 97       	mov	r7,r10
8000258e:	00 99       	mov	r9,r0
80002590:	f8 c3 fe f8 	sub	r3,r12,-264
        A = temp;
    }

    for(t = 40; t < 60; t++)
    {
        temp = SHA1CircularShift(5,A) +
80002594:	e0 61 bc dc 	mov	r1,48348
80002598:	ea 11 8f 1b 	orh	r1,0x8f1b
8000259c:	c0 48       	rjmp	800025a4 <SHA1ProcessMessageBlock+0x122>
        C = SHA1CircularShift(30,B);
        B = A;
        A = temp;
    }

    for(t = 40; t < 60; t++)
8000259e:	12 97       	mov	r7,r9
800025a0:	14 9b       	mov	r11,r10
800025a2:	00 99       	mov	r9,r0
    {
        temp = SHA1CircularShift(5,A) +
800025a4:	ef e9 00 02 	and	r2,r7,r9
800025a8:	ef e9 10 0a 	or	r10,r7,r9
800025ac:	07 00       	ld.w	r0,r3++
800025ae:	1c 6a       	and	r10,lr
800025b0:	02 00       	add	r0,r1
800025b2:	04 4a       	or	r10,r2
800025b4:	e0 04 00 04 	add	r4,r0,r4
800025b8:	f6 02 15 05 	lsl	r2,r11,0x5
800025bc:	e5 eb 13 b2 	or	r2,r2,r11>>0x1b
800025c0:	04 04       	add	r4,r2
               ((B & C) | (B & D) | (C & D)) + E + W[t] + K[2];
        temp &= 0xFFFFFFFF;
        E = D;
        D = C;
        C = SHA1CircularShift(30,B);
800025c2:	fc 00 15 1e 	lsl	r0,lr,0x1e
        A = temp;
    }

    for(t = 40; t < 60; t++)
    {
        temp = SHA1CircularShift(5,A) +
800025c6:	e8 0a 00 0a 	add	r10,r4,r10
               ((B & C) | (B & D) | (C & D)) + E + W[t] + K[2];
        temp &= 0xFFFFFFFF;
        E = D;
        D = C;
        C = SHA1CircularShift(30,B);
800025ca:	e1 ee 12 20 	or	r0,r0,lr>>0x2
        C = SHA1CircularShift(30,B);
        B = A;
        A = temp;
    }

    for(t = 40; t < 60; t++)
800025ce:	2f f8       	sub	r8,-1
800025d0:	0e 94       	mov	r4,r7
800025d2:	16 9e       	mov	lr,r11
800025d4:	e0 48 00 3c 	cp.w	r8,60
800025d8:	ce 31       	brne	8000259e <SHA1ProcessMessageBlock+0x11c>
800025da:	14 92       	mov	r2,r10
800025dc:	f8 c4 fe a8 	sub	r4,r12,-344
800025e0:	00 9a       	mov	r10,r0
800025e2:	04 9e       	mov	lr,r2
        A = temp;
    }

    for(t = 60; t < 80; t++)
    {
        temp = SHA1CircularShift(5,A) + (B ^ C ^ D) + E + W[t] + K[3];
800025e4:	e0 60 c1 d6 	mov	r0,49622
800025e8:	ea 10 ca 62 	orh	r0,0xca62
800025ec:	c0 48       	rjmp	800025f4 <SHA1ProcessMessageBlock+0x172>
        C = SHA1CircularShift(30,B);
        B = A;
        A = temp;
    }

    for(t = 60; t < 80; t++)
800025ee:	14 99       	mov	r9,r10
800025f0:	06 9e       	mov	lr,r3
800025f2:	02 9a       	mov	r10,r1
    {
        temp = SHA1CircularShift(5,A) + (B ^ C ^ D) + E + W[t] + K[3];
800025f4:	fc 02 15 05 	lsl	r2,lr,0x5
800025f8:	09 01       	ld.w	r1,r4++
800025fa:	e5 ee 13 b2 	or	r2,r2,lr>>0x1b
800025fe:	00 01       	add	r1,r0
80002600:	e2 07 00 07 	add	r7,r1,r7
80002604:	04 07       	add	r7,r2
80002606:	f5 eb 20 03 	eor	r3,r10,r11
        temp &= 0xFFFFFFFF;
        E = D;
        D = C;
        C = SHA1CircularShift(30,B);
8000260a:	f6 01 15 1e 	lsl	r1,r11,0x1e
        A = temp;
    }

    for(t = 60; t < 80; t++)
    {
        temp = SHA1CircularShift(5,A) + (B ^ C ^ D) + E + W[t] + K[3];
8000260e:	12 53       	eor	r3,r9
        temp &= 0xFFFFFFFF;
        E = D;
        D = C;
        C = SHA1CircularShift(30,B);
80002610:	e3 eb 12 21 	or	r1,r1,r11>>0x2
        A = temp;
    }

    for(t = 60; t < 80; t++)
    {
        temp = SHA1CircularShift(5,A) + (B ^ C ^ D) + E + W[t] + K[3];
80002614:	ee 03 00 03 	add	r3,r7,r3
        C = SHA1CircularShift(30,B);
        B = A;
        A = temp;
    }

    for(t = 60; t < 80; t++)
80002618:	2f f8       	sub	r8,-1
8000261a:	12 97       	mov	r7,r9
8000261c:	1c 9b       	mov	r11,lr
8000261e:	e0 48 00 50 	cp.w	r8,80
80002622:	ce 61       	brne	800025ee <SHA1ProcessMessageBlock+0x16c>

    context->Message_Digest[0] =
                        (context->Message_Digest[0] + A) & 0xFFFFFFFF;
    context->Message_Digest[1] =
                        (context->Message_Digest[1] + B) & 0xFFFFFFFF;
    context->Message_Digest[2] =
80002624:	40 28       	lddsp	r8,sp[0x8]
80002626:	f0 01 00 01 	add	r1,r8,r1
                        (context->Message_Digest[2] + C) & 0xFFFFFFFF;
    context->Message_Digest[3] =
8000262a:	40 08       	lddsp	r8,sp[0x0]
8000262c:	f0 0a 00 0a 	add	r10,r8,r10
                        (context->Message_Digest[3] + D) & 0xFFFFFFFF;
    context->Message_Digest[4] =
80002630:	40 18       	lddsp	r8,sp[0x4]
        C = SHA1CircularShift(30,B);
        B = A;
        A = temp;
    }

    context->Message_Digest[0] =
80002632:	e6 05 00 05 	add	r5,r3,r5
                        (context->Message_Digest[1] + B) & 0xFFFFFFFF;
    context->Message_Digest[2] =
                        (context->Message_Digest[2] + C) & 0xFFFFFFFF;
    context->Message_Digest[3] =
                        (context->Message_Digest[3] + D) & 0xFFFFFFFF;
    context->Message_Digest[4] =
80002636:	f0 09 00 09 	add	r9,r8,r9
        A = temp;
    }

    context->Message_Digest[0] =
                        (context->Message_Digest[0] + A) & 0xFFFFFFFF;
    context->Message_Digest[1] =
8000263a:	ec 0e 00 0e 	add	lr,r6,lr
    context->Message_Digest[3] =
                        (context->Message_Digest[3] + D) & 0xFFFFFFFF;
    context->Message_Digest[4] =
                        (context->Message_Digest[4] + E) & 0xFFFFFFFF;

    context->Message_Block_Index = 0;
8000263e:	30 08       	mov	r8,0
        C = SHA1CircularShift(30,B);
        B = A;
        A = temp;
    }

    context->Message_Digest[0] =
80002640:	99 05       	st.w	r12[0x0],r5
                        (context->Message_Digest[0] + A) & 0xFFFFFFFF;
    context->Message_Digest[1] =
80002642:	99 1e       	st.w	r12[0x4],lr
                        (context->Message_Digest[1] + B) & 0xFFFFFFFF;
    context->Message_Digest[2] =
80002644:	99 21       	st.w	r12[0x8],r1
                        (context->Message_Digest[2] + C) & 0xFFFFFFFF;
    context->Message_Digest[3] =
80002646:	99 3a       	st.w	r12[0xc],r10
                        (context->Message_Digest[3] + D) & 0xFFFFFFFF;
    context->Message_Digest[4] =
80002648:	99 49       	st.w	r12[0x10],r9
                        (context->Message_Digest[4] + E) & 0xFFFFFFFF;

    context->Message_Block_Index = 0;
8000264a:	f9 48 00 5c 	st.w	r12[92],r8
	
#undef W

}
8000264e:	2f dd       	sub	sp,-12
80002650:	d8 32       	popm	r0-r7,pc
80002652:	d7 03       	nop

80002654 <SHA1Input>:
 *
 */
void SHA1Input(     SHA1Context         *context,
                    const unsigned char *message_array,
                    unsigned            length)
{
80002654:	eb cd 40 e0 	pushm	r5-r7,lr
80002658:	20 1d       	sub	sp,4
8000265a:	18 97       	mov	r7,r12
    if (!length)
8000265c:	58 0a       	cp.w	r10,0
8000265e:	c2 f0       	breq	800026bc <SHA1Input+0x68>
    {
        return;
    }

    if (context->Computed || context->Corrupted)
80002660:	79 88       	ld.w	r8,r12[0x60]
80002662:	58 08       	cp.w	r8,0
80002664:	c2 f1       	brne	800026c2 <SHA1Input+0x6e>
80002666:	79 98       	ld.w	r8,r12[0x64]
80002668:	58 08       	cp.w	r8,0
8000266a:	c2 c1       	brne	800026c2 <SHA1Input+0x6e>
    {
        context->Corrupted = 1;
        return;
    }

    while(length-- && !context->Corrupted)
8000266c:	f4 c6 00 01 	sub	r6,r10,1
            /* Force it to 32 bits */
            context->Length_High &= 0xFFFFFFFF;
            if (context->Length_High == 0)
            {
                /* Message is too long */
                context->Corrupted = 1;
80002670:	30 15       	mov	r5,1
80002672:	c0 88       	rjmp	80002682 <SHA1Input+0x2e>
    {
        context->Corrupted = 1;
        return;
    }

    while(length-- && !context->Corrupted)
80002674:	58 06       	cp.w	r6,0
80002676:	c2 30       	breq	800026bc <SHA1Input+0x68>
        if (context->Message_Block_Index == 64)
        {
            SHA1ProcessMessageBlock(context);
        }

        message_array++;
80002678:	2f fb       	sub	r11,-1
    {
        context->Corrupted = 1;
        return;
    }

    while(length-- && !context->Corrupted)
8000267a:	20 16       	sub	r6,1
8000267c:	6f 98       	ld.w	r8,r7[0x64]
8000267e:	58 08       	cp.w	r8,0
80002680:	c1 e1       	brne	800026bc <SHA1Input+0x68>
    {
        context->Message_Block[context->Message_Block_Index++] =
80002682:	17 8c       	ld.ub	r12,r11[0x0]
80002684:	6f 7a       	ld.w	r10,r7[0x5c]
                                                (*message_array & 0xFF);

        context->Length_Low += 8;
80002686:	6e 59       	ld.w	r9,r7[0x14]
        return;
    }

    while(length-- && !context->Corrupted)
    {
        context->Message_Block[context->Message_Block_Index++] =
80002688:	f4 c8 ff ff 	sub	r8,r10,-1
                                                (*message_array & 0xFF);

        context->Length_Low += 8;
8000268c:	2f 89       	sub	r9,-8
        return;
    }

    while(length-- && !context->Corrupted)
    {
        context->Message_Block[context->Message_Block_Index++] =
8000268e:	ee 0a 00 0a 	add	r10,r7,r10
80002692:	ef 48 00 5c 	st.w	r7[92],r8
                                                (*message_array & 0xFF);

        context->Length_Low += 8;
        /* Force it to 32 bits */
        context->Length_Low &= 0xFFFFFFFF;
80002696:	8f 59       	st.w	r7[0x14],r9
        return;
    }

    while(length-- && !context->Corrupted)
    {
        context->Message_Block[context->Message_Block_Index++] =
80002698:	f5 6c 00 1c 	st.b	r10[28],r12
                                                (*message_array & 0xFF);

        context->Length_Low += 8;
        /* Force it to 32 bits */
        context->Length_Low &= 0xFFFFFFFF;
        if (context->Length_Low == 0)
8000269c:	58 09       	cp.w	r9,0
8000269e:	c0 61       	brne	800026aa <SHA1Input+0x56>
        {
            context->Length_High++;
800026a0:	6e 69       	ld.w	r9,r7[0x18]
800026a2:	2f f9       	sub	r9,-1
            /* Force it to 32 bits */
            context->Length_High &= 0xFFFFFFFF;
800026a4:	8f 69       	st.w	r7[0x18],r9
            if (context->Length_High == 0)
            {
                /* Message is too long */
                context->Corrupted = 1;
800026a6:	ef f5 0a 19 	st.weq	r7[0x64],r5
            }
        }

        if (context->Message_Block_Index == 64)
800026aa:	e0 48 00 40 	cp.w	r8,64
800026ae:	ce 31       	brne	80002674 <SHA1Input+0x20>
        {
            SHA1ProcessMessageBlock(context);
800026b0:	50 0b       	stdsp	sp[0x0],r11
800026b2:	0e 9c       	mov	r12,r7
800026b4:	ce 7e       	rcall	80002482 <SHA1ProcessMessageBlock>
800026b6:	40 0b       	lddsp	r11,sp[0x0]
800026b8:	58 06       	cp.w	r6,0
    {
        context->Corrupted = 1;
        return;
    }

    while(length-- && !context->Corrupted)
800026ba:	cd f1       	brne	80002678 <SHA1Input+0x24>
800026bc:	2f fd       	sub	sp,-4
            SHA1ProcessMessageBlock(context);
        }

        message_array++;
    }
}
800026be:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800026c2:	30 18       	mov	r8,1
        return;
    }

    if (context->Computed || context->Corrupted)
    {
        context->Corrupted = 1;
800026c4:	ef 48 00 64 	st.w	r7[100],r8
800026c8:	2f fd       	sub	sp,-4
            SHA1ProcessMessageBlock(context);
        }

        message_array++;
    }
}
800026ca:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800026ce:	d7 03       	nop

800026d0 <SHA1PadMessage>:
800026d0:	eb cd 40 80 	pushm	r7,lr
 *
 *  Comments:
 *
 */
void SHA1PadMessage(SHA1Context *context)
{
800026d4:	18 97       	mov	r7,r12
     *  Check to see if the current message block is too small to hold
     *  the initial padding bits and length.  If so, we will pad the
     *  block, process it, and then continue padding into a second
     *  block.
     */
    if (context->Message_Block_Index > 55)
800026d6:	79 7a       	ld.w	r10,r12[0x5c]
800026d8:	e0 4a 00 37 	cp.w	r10,55
800026dc:	e0 8a 00 54 	brle	80002784 <SHA1PadMessage+0xb4>
    {
        context->Message_Block[context->Message_Block_Index++] = 0x80;
800026e0:	f8 0a 00 08 	add	r8,r12,r10
800026e4:	38 09       	mov	r9,-128
800026e6:	f4 cc ff ff 	sub	r12,r10,-1
800026ea:	f1 69 00 1c 	st.b	r8[28],r9
800026ee:	ef 4c 00 5c 	st.w	r7[92],r12
        while(context->Message_Block_Index < 64)
800026f2:	e0 4c 00 3f 	cp.w	r12,63
800026f6:	e0 89 00 12 	brgt	8000271a <SHA1PadMessage+0x4a>
800026fa:	f4 c9 ff e3 	sub	r9,r10,-29
800026fe:	18 98       	mov	r8,r12
80002700:	ee 09 00 09 	add	r9,r7,r9
        {
            context->Message_Block[context->Message_Block_Index++] = 0;
80002704:	30 0b       	mov	r11,0
80002706:	12 cb       	st.b	r9++,r11
80002708:	2f f8       	sub	r8,-1
     *  block.
     */
    if (context->Message_Block_Index > 55)
    {
        context->Message_Block[context->Message_Block_Index++] = 0x80;
        while(context->Message_Block_Index < 64)
8000270a:	e0 48 00 40 	cp.w	r8,64
8000270e:	cf c1       	brne	80002706 <SHA1PadMessage+0x36>
80002710:	f8 0a 01 0a 	sub	r10,r12,r10
80002714:	2c 1a       	sub	r10,-63
80002716:	ef 4a 00 5c 	st.w	r7[92],r10
        {
            context->Message_Block[context->Message_Block_Index++] = 0;
        }

        SHA1ProcessMessageBlock(context);
8000271a:	0e 9c       	mov	r12,r7
8000271c:	cb 3e       	rcall	80002482 <SHA1ProcessMessageBlock>
8000271e:	6f 79       	ld.w	r9,r7[0x5c]

        while(context->Message_Block_Index < 56)
80002720:	e0 49 00 37 	cp.w	r9,55
80002724:	e0 89 00 10 	brgt	80002744 <SHA1PadMessage+0x74>
80002728:	f2 0b 11 38 	rsub	r11,r9,56
 *      Nothing.
 *
 *  Comments:
 *
 */
void SHA1PadMessage(SHA1Context *context)
8000272c:	30 08       	mov	r8,0
8000272e:	2e 49       	sub	r9,-28
            context->Message_Block[context->Message_Block_Index++] = 0;
        }

        SHA1ProcessMessageBlock(context);

        while(context->Message_Block_Index < 56)
80002730:	10 9a       	mov	r10,r8
        {
            context->Message_Block[context->Message_Block_Index++] = 0;
80002732:	ee 09 00 09 	add	r9,r7,r9
            context->Message_Block[context->Message_Block_Index++] = 0;
        }

        SHA1ProcessMessageBlock(context);

        while(context->Message_Block_Index < 56)
80002736:	12 ca       	st.b	r9++,r10
        {
            context->Message_Block[context->Message_Block_Index++] = 0;
80002738:	2f f8       	sub	r8,-1
8000273a:	16 38       	cp.w	r8,r11
            context->Message_Block[context->Message_Block_Index++] = 0;
        }

        SHA1ProcessMessageBlock(context);

        while(context->Message_Block_Index < 56)
8000273c:	cf d1       	brne	80002736 <SHA1PadMessage+0x66>
8000273e:	33 88       	mov	r8,56
        }
    }
    else
    {
        context->Message_Block[context->Message_Block_Index++] = 0x80;
        while(context->Message_Block_Index < 56)
80002740:	ef 48 00 5c 	st.w	r7[92],r8
80002744:	6e 69       	ld.w	r9,r7[0x18]
    }

    /*
     *  Store the message length as the last 8 octets
     */
    context->Message_Block[56] = (context->Length_High >> 24) & 0xFF;
80002746:	f2 0a 16 18 	lsr	r10,r9,0x18
8000274a:	ef 69 00 57 	st.b	r7[87],r9
    context->Message_Block[57] = (context->Length_High >> 16) & 0xFF;
    context->Message_Block[58] = (context->Length_High >> 8) & 0xFF;
    context->Message_Block[59] = (context->Length_High) & 0xFF;
8000274e:	ef 6a 00 54 	st.b	r7[84],r10
    }

    /*
     *  Store the message length as the last 8 octets
     */
    context->Message_Block[56] = (context->Length_High >> 24) & 0xFF;
80002752:	f2 0a 16 10 	lsr	r10,r9,0x10
    context->Message_Block[57] = (context->Length_High >> 16) & 0xFF;
80002756:	a9 89       	lsr	r9,0x8
    context->Message_Block[58] = (context->Length_High >> 8) & 0xFF;
80002758:	6e 58       	ld.w	r8,r7[0x14]
    context->Message_Block[59] = (context->Length_High) & 0xFF;
    context->Message_Block[60] = (context->Length_Low >> 24) & 0xFF;
8000275a:	ef 69 00 56 	st.b	r7[86],r9
    /*
     *  Store the message length as the last 8 octets
     */
    context->Message_Block[56] = (context->Length_High >> 24) & 0xFF;
    context->Message_Block[57] = (context->Length_High >> 16) & 0xFF;
    context->Message_Block[58] = (context->Length_High >> 8) & 0xFF;
8000275e:	f0 09 16 18 	lsr	r9,r8,0x18
    context->Message_Block[59] = (context->Length_High) & 0xFF;
    context->Message_Block[60] = (context->Length_Low >> 24) & 0xFF;
80002762:	ef 68 00 5b 	st.b	r7[91],r8
    context->Message_Block[61] = (context->Length_Low >> 16) & 0xFF;
    context->Message_Block[62] = (context->Length_Low >> 8) & 0xFF;
    context->Message_Block[63] = (context->Length_Low) & 0xFF;
80002766:	ef 69 00 58 	st.b	r7[88],r9
     */
    context->Message_Block[56] = (context->Length_High >> 24) & 0xFF;
    context->Message_Block[57] = (context->Length_High >> 16) & 0xFF;
    context->Message_Block[58] = (context->Length_High >> 8) & 0xFF;
    context->Message_Block[59] = (context->Length_High) & 0xFF;
    context->Message_Block[60] = (context->Length_Low >> 24) & 0xFF;
8000276a:	f0 09 16 10 	lsr	r9,r8,0x10
    context->Message_Block[61] = (context->Length_Low >> 16) & 0xFF;
8000276e:	a9 88       	lsr	r8,0x8
    context->Message_Block[62] = (context->Length_Low >> 8) & 0xFF;
80002770:	0e 9c       	mov	r12,r7
    context->Message_Block[63] = (context->Length_Low) & 0xFF;

    SHA1ProcessMessageBlock(context);
80002772:	ef 6a 00 55 	st.b	r7[85],r10

    /*
     *  Store the message length as the last 8 octets
     */
    context->Message_Block[56] = (context->Length_High >> 24) & 0xFF;
    context->Message_Block[57] = (context->Length_High >> 16) & 0xFF;
80002776:	ef 69 00 59 	st.b	r7[89],r9
    context->Message_Block[58] = (context->Length_High >> 8) & 0xFF;
    context->Message_Block[59] = (context->Length_High) & 0xFF;
    context->Message_Block[60] = (context->Length_Low >> 24) & 0xFF;
    context->Message_Block[61] = (context->Length_Low >> 16) & 0xFF;
8000277a:	ef 68 00 5a 	st.b	r7[90],r8
    context->Message_Block[62] = (context->Length_Low >> 8) & 0xFF;
8000277e:	c8 2e       	rcall	80002482 <SHA1ProcessMessageBlock>
    context->Message_Block[63] = (context->Length_Low) & 0xFF;

    SHA1ProcessMessageBlock(context);
80002780:	e3 cd 80 80 	ldm	sp++,r7,pc
}
80002784:	f8 0a 00 08 	add	r8,r12,r10
            context->Message_Block[context->Message_Block_Index++] = 0;
        }
    }
    else
    {
        context->Message_Block[context->Message_Block_Index++] = 0x80;
80002788:	38 09       	mov	r9,-128
8000278a:	f4 cc ff ff 	sub	r12,r10,-1
8000278e:	f1 69 00 1c 	st.b	r8[28],r9
80002792:	ef 4c 00 5c 	st.w	r7[92],r12
80002796:	e0 4c 00 38 	cp.w	r12,56
        while(context->Message_Block_Index < 56)
8000279a:	cd 50       	breq	80002744 <SHA1PadMessage+0x74>
8000279c:	f4 c9 ff e3 	sub	r9,r10,-29
800027a0:	18 98       	mov	r8,r12
800027a2:	ee 09 00 09 	add	r9,r7,r9
800027a6:	30 0b       	mov	r11,0
800027a8:	12 cb       	st.b	r9++,r11
        {
            context->Message_Block[context->Message_Block_Index++] = 0;
800027aa:	2f f8       	sub	r8,-1
800027ac:	e0 48 00 38 	cp.w	r8,56
        }
    }
    else
    {
        context->Message_Block[context->Message_Block_Index++] = 0x80;
        while(context->Message_Block_Index < 56)
800027b0:	cf c1       	brne	800027a8 <SHA1PadMessage+0xd8>
800027b2:	f8 0a 01 0a 	sub	r10,r12,r10
800027b6:	2c 9a       	sub	r10,-55
800027b8:	ef 4a 00 5c 	st.w	r7[92],r10
800027bc:	cc 4b       	rjmp	80002744 <SHA1PadMessage+0x74>
800027be:	d7 03       	nop

800027c0 <SHA1Result>:
800027c0:	eb cd 40 80 	pushm	r7,lr
800027c4:	18 97       	mov	r7,r12
800027c6:	79 98       	ld.w	r8,r12[0x64]
 *
 */
int SHA1Result(SHA1Context *context)
{

    if (context->Corrupted)
800027c8:	58 08       	cp.w	r8,0
800027ca:	c0 c1       	brne	800027e2 <SHA1Result+0x22>
    {
        return 0;
    }

    if (!context->Computed)
800027cc:	79 88       	ld.w	r8,r12[0x60]
800027ce:	58 08       	cp.w	r8,0
800027d0:	c0 30       	breq	800027d6 <SHA1Result+0x16>
800027d2:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
    {
        SHA1PadMessage(context);
800027d6:	c7 df       	rcall	800026d0 <SHA1PadMessage>
800027d8:	30 1c       	mov	r12,1
        context->Computed = 1;
800027da:	ef 4c 00 60 	st.w	r7[96],r12
800027de:	e3 cd 80 80 	ldm	sp++,r7,pc
    }

    return 1;
}
800027e2:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
 *
 */
int SHA1Result(SHA1Context *context)
{

    if (context->Corrupted)
800027e6:	d7 03       	nop

800027e8 <gpio_enable_module_pin>:
}


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800027e8:	f8 08 16 05 	lsr	r8,r12,0x5
800027ec:	a9 68       	lsl	r8,0x8
800027ee:	e0 28 f0 00 	sub	r8,61440

  // Enable the correct function.
  switch (function)
800027f2:	58 1b       	cp.w	r11,1
800027f4:	c1 50       	breq	8000281e <gpio_enable_module_pin+0x36>
800027f6:	c0 82       	brcc	80002806 <gpio_enable_module_pin+0x1e>
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800027f8:	30 1b       	mov	r11,1
800027fa:	f6 0c 09 4c 	lsl	r12,r11,r12
800027fe:	91 6c       	st.w	r8[0x18],r12
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80002800:	91 ac       	st.w	r8[0x28],r12
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80002802:	91 2c       	st.w	r8[0x8],r12
80002804:	5e fd       	retal	0
int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Enable the correct function.
  switch (function)
80002806:	58 2b       	cp.w	r11,2
80002808:	c1 10       	breq	8000282a <gpio_enable_module_pin+0x42>
8000280a:	58 3b       	cp.w	r11,3
8000280c:	c0 20       	breq	80002810 <gpio_enable_module_pin+0x28>
8000280e:	5e ff       	retal	1
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80002810:	30 1b       	mov	r11,1
80002812:	f6 0c 09 4c 	lsl	r12,r11,r12
80002816:	91 5c       	st.w	r8[0x14],r12
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80002818:	91 9c       	st.w	r8[0x24],r12
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
8000281a:	91 2c       	st.w	r8[0x8],r12
8000281c:	5e fd       	retal	0
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8000281e:	f6 0c 09 4c 	lsl	r12,r11,r12
80002822:	91 5c       	st.w	r8[0x14],r12
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80002824:	91 ac       	st.w	r8[0x28],r12
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80002826:	91 2c       	st.w	r8[0x8],r12
80002828:	5e fd       	retal	0
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000282a:	30 1b       	mov	r11,1
8000282c:	f6 0c 09 4c 	lsl	r12,r11,r12
80002830:	91 6c       	st.w	r8[0x18],r12
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80002832:	91 9c       	st.w	r8[0x24],r12
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80002834:	91 2c       	st.w	r8[0x8],r12
80002836:	5e fd       	retal	0

80002838 <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002838:	d4 21       	pushm	r4-r7,lr
8000283a:	18 97       	mov	r7,r12
8000283c:	16 94       	mov	r4,r11
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
8000283e:	58 0b       	cp.w	r11,0
80002840:	c0 e0       	breq	8000285c <gpio_enable_module+0x24>
80002842:	30 06       	mov	r6,0
80002844:	0c 95       	mov	r5,r6
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002846:	0f 9b       	ld.ub	r11,r7[0x1]
80002848:	0f 8c       	ld.ub	r12,r7[0x0]
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
8000284a:	2f f6       	sub	r6,-1
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
8000284c:	2f e7       	sub	r7,-2
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000284e:	cc df       	rcall	800027e8 <gpio_enable_module_pin>
80002850:	18 45       	or	r5,r12
80002852:	0c 34       	cp.w	r4,r6
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80002854:	fe 9b ff f9 	brhi	80002846 <gpio_enable_module+0xe>
80002858:	0a 9c       	mov	r12,r5
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
}
8000285a:	d8 22       	popm	r4-r7,pc
8000285c:	16 95       	mov	r5,r11
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
8000285e:	cf db       	rjmp	80002858 <gpio_enable_module+0x20>

80002860 <gpio_enable_gpio>:
80002860:	d4 01       	pushm	lr
80002862:	58 0b       	cp.w	r11,0
80002864:	c1 20       	breq	80002888 <gpio_enable_gpio+0x28>
80002866:	30 09       	mov	r9,0


void gpio_enable_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->oderc = 1 << (pin & 0x1F);
80002868:	30 1e       	mov	lr,1
{
  uint32_t i;

  for (i = 0; i < size; i++)
  {
    gpio_enable_gpio_pin(gpiomap->pin);
8000286a:	19 88       	ld.ub	r8,r12[0x0]


void gpio_enable_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->oderc = 1 << (pin & 0x1F);
8000286c:	fc 08 09 4a 	lsl	r10,lr,r8
}


void gpio_enable_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002870:	a5 98       	lsr	r8,0x5
80002872:	a9 68       	lsl	r8,0x8
80002874:	e0 28 f0 00 	sub	r8,61440
  gpio_port->oderc = 1 << (pin & 0x1F);
80002878:	f1 4a 00 48 	st.w	r8[72],r10
  gpio_port->gpers = 1 << (pin & 0x1F);
8000287c:	91 1a       	st.w	r8[0x4],r10
  uint32_t i;

  for (i = 0; i < size; i++)
  {
    gpio_enable_gpio_pin(gpiomap->pin);
    gpiomap++;
8000287e:	2f ec       	sub	r12,-2

void gpio_enable_gpio(const gpio_map_t gpiomap, uint32_t size)
{
  uint32_t i;

  for (i = 0; i < size; i++)
80002880:	2f f9       	sub	r9,-1
80002882:	12 3b       	cp.w	r11,r9
80002884:	fe 9b ff f3 	brhi	8000286a <gpio_enable_gpio+0xa>
80002888:	d8 02       	popm	pc

8000288a <gpio_enable_gpio_pin>:


void gpio_enable_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->oderc = 1 << (pin & 0x1F);
8000288a:	30 18       	mov	r8,1
8000288c:	f0 0c 09 48 	lsl	r8,r8,r12
}


void gpio_enable_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002890:	a5 9c       	lsr	r12,0x5
80002892:	a9 6c       	lsl	r12,0x8
80002894:	e0 2c f0 00 	sub	r12,61440
  gpio_port->oderc = 1 << (pin & 0x1F);
80002898:	f9 48 00 48 	st.w	r12[72],r8
  gpio_port->gpers = 1 << (pin & 0x1F);
8000289c:	99 18       	st.w	r12[0x4],r8
}
8000289e:	5e fc       	retal	r12

800028a0 <gpio_configure_pin>:

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800028a0:	f8 08 16 05 	lsr	r8,r12,0x5
800028a4:	a9 68       	lsl	r8,0x8
800028a6:	e0 28 f0 00 	sub	r8,61440
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif
    if (flags & GPIO_PULL_UP)
800028aa:	ed bb 00 02 	bld	r11,0x2
800028ae:	c1 e1       	brne	800028ea <gpio_configure_pin+0x4a>
            gpio_port->puers = 1 << (pin & 0x1F);
800028b0:	30 19       	mov	r9,1
800028b2:	f2 0c 09 4c 	lsl	r12,r9,r12
800028b6:	f1 4c 00 74 	st.w	r8[116],r12
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
800028ba:	ed bb 00 07 	bld	r11,0x7
800028be:	c0 91       	brne	800028d0 <gpio_configure_pin+0x30>
            if (flags & GPIO_BOTHEDGES)
800028c0:	16 99       	mov	r9,r11
800028c2:	e2 19 01 80 	andl	r9,0x180,COH
800028c6:	c1 c0       	breq	800028fe <gpio_configure_pin+0x5e>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
800028c8:	f1 4c 00 a8 	st.w	r8[168],r12
                   gpio_port->imr1c = 1 << (pin & 0x1F);
800028cc:	f1 4c 00 b8 	st.w	r8[184],r12
                   gpio_port->imr1s = 1 << (pin & 0x1F);
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
800028d0:	ed bb 00 00 	bld	r11,0x0
800028d4:	c1 11       	brne	800028f6 <gpio_configure_pin+0x56>
            if (flags & GPIO_INIT_HIGH)
                    gpio_port->ovrs = 1 << (pin & 0x1F);
800028d6:	ed bb 00 01 	bld	r11,0x1
800028da:	f1 fc 0a 15 	st.weq	r8[0x54],r12
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
800028de:	f1 fc 1a 16 	st.wne	r8[0x58],r12
            gpio_port->oders = 1 << (pin & 0x1F);
800028e2:	f1 4c 00 44 	st.w	r8[68],r12
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
800028e6:	91 1c       	st.w	r8[0x4],r12
}
800028e8:	5e fc       	retal	r12
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif
    if (flags & GPIO_PULL_UP)
            gpio_port->puers = 1 << (pin & 0x1F);
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
800028ea:	30 19       	mov	r9,1
800028ec:	f2 0c 09 4c 	lsl	r12,r9,r12
800028f0:	f1 4c 00 78 	st.w	r8[120],r12
800028f4:	ce 3b       	rjmp	800028ba <gpio_configure_pin+0x1a>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
            gpio_port->oders = 1 << (pin & 0x1F);
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
800028f6:	f1 4c 00 48 	st.w	r8[72],r12
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
800028fa:	91 1c       	st.w	r8[0x4],r12
}
800028fc:	5e fc       	retal	r12
            if (flags & GPIO_BOTHEDGES)
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
                   gpio_port->imr1c = 1 << (pin & 0x1F);
            }
            else if (flags & GPIO_RISING)
800028fe:	16 99       	mov	r9,r11
80002900:	e2 19 02 80 	andl	r9,0x280,COH
80002904:	c0 60       	breq	80002910 <gpio_configure_pin+0x70>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
80002906:	f1 4c 00 a4 	st.w	r8[164],r12
                   gpio_port->imr1c = 1 << (pin & 0x1F);
8000290a:	f1 4c 00 b8 	st.w	r8[184],r12
8000290e:	ce 1b       	rjmp	800028d0 <gpio_configure_pin+0x30>
            }
            else if (flags & GPIO_FALLING)
80002910:	16 99       	mov	r9,r11
80002912:	e2 19 03 80 	andl	r9,0x380,COH
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80002916:	f1 fc 1a 2a 	st.wne	r8[0xa8],r12
                   gpio_port->imr1s = 1 << (pin & 0x1F);
8000291a:	f1 fc 1a 2d 	st.wne	r8[0xb4],r12
8000291e:	cd 9b       	rjmp	800028d0 <gpio_configure_pin+0x30>

80002920 <gpio_get_pin_value>:
    gpio_port->gpers = mask;
}

int gpio_get_pin_value(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002920:	f8 08 16 05 	lsr	r8,r12,0x5
80002924:	a9 68       	lsl	r8,0x8
80002926:	e0 28 f0 00 	sub	r8,61440
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
8000292a:	71 88       	ld.w	r8,r8[0x60]
8000292c:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80002930:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002934:	5e fc       	retal	r12

80002936 <gpio_set_pin_high>:
}

void gpio_set_pin_high(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80002936:	30 18       	mov	r8,1
80002938:	f0 0c 09 48 	lsl	r8,r8,r12
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}

void gpio_set_pin_high(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000293c:	a5 9c       	lsr	r12,0x5
8000293e:	a9 6c       	lsl	r12,0x8
80002940:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80002944:	f9 48 00 54 	st.w	r12[84],r8
}
80002948:	5e fc       	retal	r12

8000294a <gpio_set_group_high>:

void gpio_set_group_high(uint32_t port, uint32_t mask)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
8000294a:	a9 6c       	lsl	r12,0x8
8000294c:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrs  = mask; // Value to be driven on the I/O group: 1.
80002950:	f9 4b 00 54 	st.w	r12[84],r11
}
80002954:	5e fc       	retal	r12

80002956 <gpio_set_pin_low>:


void gpio_set_pin_low(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002956:	30 18       	mov	r8,1
80002958:	f0 0c 09 48 	lsl	r8,r8,r12
}


void gpio_set_pin_low(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000295c:	a5 9c       	lsr	r12,0x5
8000295e:	a9 6c       	lsl	r12,0x8
80002960:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002964:	f9 48 00 58 	st.w	r12[88],r8
}
80002968:	5e fc       	retal	r12

8000296a <gpio_set_group_low>:
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}

void gpio_set_group_low(uint32_t port, uint32_t mask)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
8000296a:	a9 6c       	lsl	r12,0x8
8000296c:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrc  = mask; // Value to be driven on the I/O group: 0.
80002970:	f9 4b 00 58 	st.w	r12[88],r11
}
80002974:	5e fc       	retal	r12
80002976:	d7 03       	nop

80002978 <INTC_register_interrupt>:

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80002978:	f3 db c0 05 	bfextu	r9,r11,0x0,0x5
8000297c:	49 f8       	lddpc	r8,800029f8 <INTC_register_interrupt+0x80>
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
8000297e:	a5 9b       	lsr	r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80002980:	f0 0b 00 38 	add	r8,r8,r11<<0x3
80002984:	70 18       	ld.w	r8,r8[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80002986:	f0 09 09 2c 	st.w	r8[r9<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
8000298a:	58 0a       	cp.w	r10,0
8000298c:	c1 20       	breq	800029b0 <INTC_register_interrupt+0x38>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	} else if (int_level == AVR32_INTC_INT1) {
8000298e:	58 1a       	cp.w	r10,1
80002990:	c1 b0       	breq	800029c6 <INTC_register_interrupt+0x4e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
	} else if (int_level == AVR32_INTC_INT2) {
80002992:	58 2a       	cp.w	r10,2
80002994:	c2 50       	breq	800029de <INTC_register_interrupt+0x66>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80002996:	fe c9 ee 68 	sub	r9,pc,-4504
8000299a:	fe c8 ef 9a 	sub	r8,pc,-4198
8000299e:	f2 08 01 08 	sub	r8,r9,r8
800029a2:	fe 79 08 00 	mov	r9,-63488
800029a6:	ea 18 c0 00 	orh	r8,0xc000
800029aa:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800029ae:	5e fc       	retal	r12
800029b0:	fe 78 08 00 	mov	r8,-63488
800029b4:	fe c9 ef b4 	sub	r9,pc,-4172
800029b8:	fe ca ee b4 	sub	r10,pc,-4428
800029bc:	f4 09 01 09 	sub	r9,r10,r9
	} else if (int_level == AVR32_INTC_INT1) {
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800029c0:	f0 0b 09 29 	st.w	r8[r11<<0x2],r9
800029c4:	5e fc       	retal	r12
800029c6:	fe c9 ee b4 	sub	r9,pc,-4428
800029ca:	fe c8 ef ca 	sub	r8,pc,-4150
800029ce:	f2 08 01 08 	sub	r8,r9,r8
	} else if (int_level == AVR32_INTC_INT2) {
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800029d2:	fe 79 08 00 	mov	r9,-63488
800029d6:	bf a8       	sbr	r8,0x1e
800029d8:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
800029dc:	5e fc       	retal	r12
800029de:	fe c9 ee be 	sub	r9,pc,-4418
800029e2:	fe c8 ef e2 	sub	r8,pc,-4126
800029e6:	f2 08 01 08 	sub	r8,r9,r8
800029ea:	fe 79 08 00 	mov	r9,-63488
800029ee:	bf b8       	sbr	r8,0x1f
800029f0:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
800029f4:	5e fc       	retal	r12
800029f6:	d7 03       	nop
800029f8:	80 00       	ld.sh	r0,r0[0x0]
800029fa:	3c 00       	mov	r0,-64

800029fc <_get_interrupt_handler>:
800029fc:	e0 68 00 83 	mov	r8,131
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002a00:	f0 0c 01 0c 	sub	r12,r8,r12
80002a04:	fe 78 08 00 	mov	r8,-63488
80002a08:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002a0c:	f2 ca ff c0 	sub	r10,r9,-64
80002a10:	f0 0a 03 2c 	ld.w	r12,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002a14:	58 0c       	cp.w	r12,0
80002a16:	5e 0c       	reteq	r12
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002a18:	48 68       	lddpc	r8,80002a30 <_get_interrupt_handler+0x34>
80002a1a:	f8 0c 12 00 	clz	r12,r12
80002a1e:	f0 09 00 39 	add	r9,r8,r9<<0x3
80002a22:	f8 0c 11 1f 	rsub	r12,r12,31
80002a26:	72 18       	ld.w	r8,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002a28:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002a2c:	5e fc       	retal	r12
80002a2e:	d7 03       	nop
80002a30:	80 00       	ld.sh	r0,r0[0x0]
80002a32:	3c 00       	mov	r0,-64

80002a34 <pm_enable_osc0_crystal>:
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002a34:	ec 5b bb 9f 	cp.w	r11,899999
80002a38:	e0 88 00 1d 	brls	80002a72 <pm_enable_osc0_crystal+0x3e>
80002a3c:	e0 68 c6 bf 	mov	r8,50879
80002a40:	ea 18 00 2d 	orh	r8,0x2d
80002a44:	10 3b       	cp.w	r11,r8
80002a46:	e0 8b 00 08 	brhi	80002a56 <pm_enable_osc0_crystal+0x22>
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002a4a:	78 a8       	ld.w	r8,r12[0x28]
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002a4c:	30 5b       	mov	r11,5
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80002a4e:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002a52:	99 a8       	st.w	r12[0x28],r8
{
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
80002a54:	5e fc       	retal	r12
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002a56:	e0 68 12 00 	mov	r8,4608
80002a5a:	ea 18 00 7a 	orh	r8,0x7a
80002a5e:	10 3b       	cp.w	r11,r8
80002a60:	f9 bb 03 06 	movlo	r11,6
80002a64:	f9 bb 02 07 	movhs	r11,7
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002a68:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80002a6a:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002a6e:	99 a8       	st.w	r12[0x28],r8
{
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
80002a70:	5e fc       	retal	r12
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002a72:	78 a8       	ld.w	r8,r12[0x28]
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002a74:	30 4b       	mov	r11,4
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80002a76:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002a7a:	99 a8       	st.w	r12[0x28],r8
{
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
80002a7c:	5e fc       	retal	r12

80002a7e <pm_enable_clk0>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002a7e:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80002a80:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002a84:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80002a86:	78 08       	ld.w	r8,r12[0x0]
80002a88:	a3 a8       	sbr	r8,0x2
80002a8a:	99 08       	st.w	r12[0x0],r8
}


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80002a8c:	79 58       	ld.w	r8,r12[0x54]
80002a8e:	ed b8 00 07 	bld	r8,0x7
80002a92:	cf d1       	brne	80002a8c <pm_enable_clk0+0xe>

void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
  pm_enable_clk0_no_wait(pm, startup);
  pm_wait_for_clk0_ready(pm);
}
80002a94:	5e fc       	retal	r12

80002a96 <pm_enable_osc1_ext_clock>:
 * \param mode Oscillator 1 mode (i.e. AVR32_PM_OSCCTRL1_MODE_x).
 */
static void pm_set_osc1_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl1_t u_avr32_pm_oscctrl1 = {pm->oscctrl1};
80002a96:	78 b8       	ld.w	r8,r12[0x2c]
  // Modify
  u_avr32_pm_oscctrl1.OSCCTRL1.mode = mode;
80002a98:	30 09       	mov	r9,0
80002a9a:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
  // Write
  pm->oscctrl1 = u_avr32_pm_oscctrl1.oscctrl1;
80002a9e:	99 b8       	st.w	r12[0x2c],r8


void pm_enable_osc1_ext_clock(volatile avr32_pm_t *pm)
{
  pm_set_osc1_mode(pm, AVR32_PM_OSCCTRL1_MODE_EXT_CLOCK);
}
80002aa0:	5e fc       	retal	r12

80002aa2 <pm_enable_clk1>:


void pm_enable_clk1_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl1_t u_avr32_pm_oscctrl1 = {pm->oscctrl1};
80002aa2:	78 b8       	ld.w	r8,r12[0x2c]
  // Modify
  u_avr32_pm_oscctrl1.OSCCTRL1.startup = startup;
80002aa4:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl1 = u_avr32_pm_oscctrl1.oscctrl1;
80002aa8:	99 b8       	st.w	r12[0x2c],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC1EN_MASK;
80002aaa:	78 08       	ld.w	r8,r12[0x0]
80002aac:	a3 b8       	sbr	r8,0x3
80002aae:	99 08       	st.w	r12[0x0],r8
}


void pm_wait_for_clk1_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC1RDY_MASK));
80002ab0:	79 58       	ld.w	r8,r12[0x54]
80002ab2:	ed b8 00 08 	bld	r8,0x8
80002ab6:	cf d1       	brne	80002ab0 <pm_enable_clk1+0xe>

void pm_enable_clk1(volatile avr32_pm_t *pm, unsigned int startup)
{
  pm_enable_clk1_no_wait(pm, startup);
  pm_wait_for_clk1_ready(pm);
}
80002ab8:	5e fc       	retal	r12

80002aba <pm_cksel>:
              unsigned int pbasel,
              unsigned int pbbdiv,
              unsigned int pbbsel,
              unsigned int hsbdiv,
              unsigned int hsbsel)
{
80002aba:	eb cd 40 90 	pushm	r4,r7,lr
80002abe:	fa c4 ff f4 	sub	r4,sp,-12
80002ac2:	68 17       	ld.w	r7,r4[0x4]
80002ac4:	68 0e       	ld.w	lr,r4[0x0]
  u_avr32_pm_cksel_t u_avr32_pm_cksel = {0};

  u_avr32_pm_cksel.CKSEL.cpusel = hsbsel;
80002ac6:	ef d7 c0 03 	bfextu	r7,r7,0x0,0x3
  u_avr32_pm_cksel.CKSEL.cpudiv = hsbdiv;
80002aca:	fd de c0 01 	bfextu	lr,lr,0x0,0x1
              unsigned int pbbdiv,
              unsigned int pbbsel,
              unsigned int hsbdiv,
              unsigned int hsbsel)
{
  u_avr32_pm_cksel_t u_avr32_pm_cksel = {0};
80002ace:	30 04       	mov	r4,0

  u_avr32_pm_cksel.CKSEL.cpusel = hsbsel;
80002ad0:	e9 d7 d0 03 	bfins	r4,r7,0x0,0x3
  u_avr32_pm_cksel.CKSEL.cpudiv = hsbdiv;
80002ad4:	e9 de d0 e1 	bfins	r4,lr,0x7,0x1
  u_avr32_pm_cksel.CKSEL.hsbsel = hsbsel;
80002ad8:	e9 d7 d1 03 	bfins	r4,r7,0x8,0x3
  u_avr32_pm_cksel.CKSEL.hsbdiv = hsbdiv;
80002adc:	e9 de d1 e1 	bfins	r4,lr,0xf,0x1
  u_avr32_pm_cksel.CKSEL.pbasel = pbasel;
80002ae0:	e9 da d2 03 	bfins	r4,r10,0x10,0x3
  u_avr32_pm_cksel.CKSEL.pbadiv = pbadiv;
80002ae4:	e9 db d2 e1 	bfins	r4,r11,0x17,0x1
  u_avr32_pm_cksel.CKSEL.pbbsel = pbbsel;
80002ae8:	e9 d8 d3 03 	bfins	r4,r8,0x18,0x3
  u_avr32_pm_cksel.CKSEL.pbbdiv = pbbdiv;
80002aec:	e9 d9 d3 e1 	bfins	r4,r9,0x1f,0x1

  pm->cksel = u_avr32_pm_cksel.cksel;
80002af0:	99 14       	st.w	r12[0x4],r4

  // Wait for ckrdy bit and then clear it
  while (!(pm->poscsr & AVR32_PM_POSCSR_CKRDY_MASK));
80002af2:	79 58       	ld.w	r8,r12[0x54]
80002af4:	ed b8 00 05 	bld	r8,0x5
80002af8:	cf d1       	brne	80002af2 <pm_cksel+0x38>
}
80002afa:	e3 cd 80 90 	ldm	sp++,r4,r7,pc

80002afe <pm_gc_setup>:
                  unsigned int gc,
                  unsigned int osc_or_pll, // Use Osc (=0) or PLL (=1)
                  unsigned int pll_osc, // Sel Osc0/PLL0 or Osc1/PLL1
                  unsigned int diven,
                  unsigned int div)
{
80002afe:	eb cd 40 80 	pushm	r7,lr
  u_avr32_pm_gcctrl_t u_avr32_pm_gcctrl = {0};
80002b02:	30 07       	mov	r7,0
                  unsigned int gc,
                  unsigned int osc_or_pll, // Use Osc (=0) or PLL (=1)
                  unsigned int pll_osc, // Sel Osc0/PLL0 or Osc1/PLL1
                  unsigned int diven,
                  unsigned int div)
{
80002b04:	40 2e       	lddsp	lr,sp[0x8]
  u_avr32_pm_gcctrl.GCCTRL.oscsel = pll_osc;
  u_avr32_pm_gcctrl.GCCTRL.pllsel = osc_or_pll;
  u_avr32_pm_gcctrl.GCCTRL.diven  = diven;
  u_avr32_pm_gcctrl.GCCTRL.div    = div;

  pm->gcctrl[gc] = u_avr32_pm_gcctrl.gcctrl;
80002b06:	2e 8b       	sub	r11,-24
                  unsigned int diven,
                  unsigned int div)
{
  u_avr32_pm_gcctrl_t u_avr32_pm_gcctrl = {0};

  u_avr32_pm_gcctrl.GCCTRL.oscsel = pll_osc;
80002b08:	ef d9 d0 01 	bfins	r7,r9,0x0,0x1
  u_avr32_pm_gcctrl.GCCTRL.pllsel = osc_or_pll;
80002b0c:	ef da d0 21 	bfins	r7,r10,0x1,0x1
  u_avr32_pm_gcctrl.GCCTRL.diven  = diven;
80002b10:	ef d8 d0 81 	bfins	r7,r8,0x4,0x1
  u_avr32_pm_gcctrl.GCCTRL.div    = div;
80002b14:	ef de d1 08 	bfins	r7,lr,0x8,0x8

  pm->gcctrl[gc] = u_avr32_pm_gcctrl.gcctrl;
80002b18:	f8 0b 09 27 	st.w	r12[r11<<0x2],r7
}
80002b1c:	e3 cd 80 80 	ldm	sp++,r7,pc

80002b20 <pm_gc_enable>:


void pm_gc_enable(volatile avr32_pm_t *pm,
                  unsigned int gc)
{
  pm->gcctrl[gc] |= AVR32_PM_GCCTRL_CEN_MASK;
80002b20:	2e 8b       	sub	r11,-24
80002b22:	f8 0b 03 28 	ld.w	r8,r12[r11<<0x2]
80002b26:	a3 a8       	sbr	r8,0x2
80002b28:	f8 0b 09 28 	st.w	r12[r11<<0x2],r8
}
80002b2c:	5e fc       	retal	r12

80002b2e <pm_pll_setup>:
                  unsigned int pll,
                  unsigned int mul,
                  unsigned int div,
                  unsigned int osc,
                  unsigned int lockcount)
{
80002b2e:	eb cd 40 80 	pushm	r7,lr
  u_avr32_pm_pll_t u_avr32_pm_pll = {0};
80002b32:	30 07       	mov	r7,0
                  unsigned int pll,
                  unsigned int mul,
                  unsigned int div,
                  unsigned int osc,
                  unsigned int lockcount)
{
80002b34:	40 2e       	lddsp	lr,sp[0x8]
  u_avr32_pm_pll.PLL.pllosc   = osc;
  u_avr32_pm_pll.PLL.plldiv   = div;
  u_avr32_pm_pll.PLL.pllmul   = mul;
  u_avr32_pm_pll.PLL.pllcount = lockcount;

  pm->pll[pll] = u_avr32_pm_pll.pll;
80002b36:	2f 8b       	sub	r11,-8
                  unsigned int osc,
                  unsigned int lockcount)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {0};

  u_avr32_pm_pll.PLL.pllosc   = osc;
80002b38:	ef d8 d0 21 	bfins	r7,r8,0x1,0x1
  u_avr32_pm_pll.PLL.plldiv   = div;
80002b3c:	ef d9 d1 04 	bfins	r7,r9,0x8,0x4
  u_avr32_pm_pll.PLL.pllmul   = mul;
80002b40:	ef da d2 04 	bfins	r7,r10,0x10,0x4
  u_avr32_pm_pll.PLL.pllcount = lockcount;
80002b44:	ef de d3 06 	bfins	r7,lr,0x18,0x6

  pm->pll[pll] = u_avr32_pm_pll.pll;
80002b48:	f8 0b 09 27 	st.w	r12[r11<<0x2],r7
}
80002b4c:	e3 cd 80 80 	ldm	sp++,r7,pc

80002b50 <pm_pll_set_option>:
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
80002b50:	f5 e9 10 19 	or	r9,r10,r9<<0x1
                       unsigned int pll,
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
80002b54:	2f 8b       	sub	r11,-8
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
80002b56:	f3 e8 10 28 	or	r8,r9,r8<<0x2
                       unsigned int pll,
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
80002b5a:	f8 0b 03 29 	ld.w	r9,r12[r11<<0x2]
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
80002b5e:	f3 d8 d0 43 	bfins	r9,r8,0x2,0x3
  pm->pll[pll] = u_avr32_pm_pll.pll;
80002b62:	f8 0b 09 29 	st.w	r12[r11<<0x2],r9
}
80002b66:	5e fc       	retal	r12

80002b68 <pm_pll_enable>:


void pm_pll_enable(volatile avr32_pm_t *pm,
                  unsigned int pll)
{
  pm->pll[pll] |= AVR32_PM_PLLEN_MASK;
80002b68:	2f 8b       	sub	r11,-8
80002b6a:	f8 0b 03 28 	ld.w	r8,r12[r11<<0x2]
80002b6e:	a1 a8       	sbr	r8,0x0
80002b70:	f8 0b 09 28 	st.w	r12[r11<<0x2],r8
}
80002b74:	5e fc       	retal	r12

80002b76 <pm_wait_for_pll0_locked>:
}


void pm_wait_for_pll0_locked(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_LOCK0_MASK));
80002b76:	79 58       	ld.w	r8,r12[0x54]
80002b78:	ed b8 00 00 	bld	r8,0x0
80002b7c:	cf d1       	brne	80002b76 <pm_wait_for_pll0_locked>
}
80002b7e:	5e fc       	retal	r12

80002b80 <pm_wait_for_pll1_locked>:


void pm_wait_for_pll1_locked(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_LOCK1_MASK));
80002b80:	79 58       	ld.w	r8,r12[0x54]
80002b82:	ed b8 00 01 	bld	r8,0x1
80002b86:	cf d1       	brne	80002b80 <pm_wait_for_pll1_locked>
}
80002b88:	5e fc       	retal	r12

80002b8a <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80002b8a:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80002b8c:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
80002b90:	99 08       	st.w	r12[0x0],r8
}
80002b92:	5e fc       	retal	r12

80002b94 <_stext>:
80002b94:	48 dd       	lddpc	sp,80002bc8 <udata_clear_loop_end+0x4>
80002b96:	fe c0 f1 96 	sub	r0,pc,-3690
80002b9a:	e3 b0 00 01 	mtsr	0x4,r0
80002b9e:	d5 53       	csrf	0x15
80002ba0:	48 b0       	lddpc	r0,80002bcc <udata_clear_loop_end+0x8>
80002ba2:	48 c1       	lddpc	r1,80002bd0 <udata_clear_loop_end+0xc>
80002ba4:	02 30       	cp.w	r0,r1
80002ba6:	c0 62       	brcc	80002bb2 <idata_load_loop_end>
80002ba8:	48 b2       	lddpc	r2,80002bd4 <udata_clear_loop_end+0x10>

80002baa <idata_load_loop>:
80002baa:	a5 05       	ld.d	r4,r2++
80002bac:	a1 24       	st.d	r0++,r4
80002bae:	02 30       	cp.w	r0,r1
80002bb0:	cf d3       	brcs	80002baa <idata_load_loop>

80002bb2 <idata_load_loop_end>:
80002bb2:	48 a0       	lddpc	r0,80002bd8 <udata_clear_loop_end+0x14>
80002bb4:	48 a1       	lddpc	r1,80002bdc <udata_clear_loop_end+0x18>
80002bb6:	02 30       	cp.w	r0,r1
80002bb8:	c0 62       	brcc	80002bc4 <udata_clear_loop_end>
80002bba:	30 02       	mov	r2,0
80002bbc:	30 03       	mov	r3,0

80002bbe <udata_clear_loop>:
80002bbe:	a1 22       	st.d	r0++,r2
80002bc0:	02 30       	cp.w	r0,r1
80002bc2:	cf e3       	brcs	80002bbe <udata_clear_loop>

80002bc4 <udata_clear_loop_end>:
80002bc4:	fe cf fa 8c 	sub	pc,pc,-1396
80002bc8:	00 01       	add	r1,r0
80002bca:	00 00       	add	r0,r0
80002bcc:	00 00       	add	r0,r0
80002bce:	00 04       	add	r4,r0
80002bd0:	00 00       	add	r0,r0
80002bd2:	05 28       	ld.uh	r8,r2++
80002bd4:	80 00       	ld.sh	r0,r0[0x0]
80002bd6:	45 70       	lddsp	r0,sp[0x15c]
80002bd8:	00 00       	add	r0,r0
80002bda:	05 28       	ld.uh	r8,r2++
80002bdc:	00 00       	add	r0,r0
80002bde:	0e 40       	or	r0,r7

80002be0 <board_init>:




void board_init(void)
{
80002be0:	eb cd 40 c0 	pushm	r6-r7,lr
	
		// first change to OSC0 (12MHz)
		pm_enable_osc0_crystal(& AVR32_PM, FOSC0);            // Enable the Osc0 in crystal mode
80002be4:	e0 6b 1b 00 	mov	r11,6912
80002be8:	ea 1b 00 b7 	orh	r11,0xb7
80002bec:	fe 7c 0c 00 	mov	r12,-62464
80002bf0:	c2 2f       	rcall	80002a34 <pm_enable_osc0_crystal>
80002bf2:	30 3b       	mov	r11,3
		pm_enable_clk0(& AVR32_PM, OSC0_STARTUP);                  // Crystal startup time
80002bf4:	fe 7c 0c 00 	mov	r12,-62464
80002bf8:	c4 3f       	rcall	80002a7e <pm_enable_clk0>
80002bfa:	30 1b       	mov	r11,1
80002bfc:	fe 7c 0c 00 	mov	r12,-62464
		pm_switch_to_clock(& AVR32_PM, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80002c00:	cc 5f       	rcall	80002b8a <pm_switch_to_clock>
80002c02:	fe 7c 0c 00 	mov	r12,-62464
80002c06:	c4 8f       	rcall	80002a96 <pm_enable_osc1_ext_clock>
		
		
		
		pm_enable_osc1_ext_clock(& AVR32_PM);  // ocs1 is external clock
80002c08:	30 3b       	mov	r11,3
80002c0a:	fe 7c 0c 00 	mov	r12,-62464
80002c0e:	c4 af       	rcall	80002aa2 <pm_enable_clk1>
		pm_enable_clk1(& AVR32_PM, OSC1_STARTUP);
80002c10:	30 09       	mov	r9,0
80002c12:	31 06       	mov	r6,16
80002c14:	12 9b       	mov	r11,r9
80002c16:	1a d6       	st.w	--sp,r6
80002c18:	30 18       	mov	r8,1
		
		pm_pll_setup(&AVR32_PM
80002c1a:	30 3a       	mov	r10,3
80002c1c:	fe 7c 0c 00 	mov	r12,-62464
80002c20:	c8 7f       	rcall	80002b2e <pm_pll_setup>
80002c22:	30 08       	mov	r8,0
80002c24:	30 19       	mov	r9,1
80002c26:	10 9b       	mov	r11,r8
80002c28:	12 9a       	mov	r10,r9
80002c2a:	fe 7c 0c 00 	mov	r12,-62464
		, 0 // div  ->  f_vfo = 16.384 MHz * 8 = 131.072 MHz
		, 1   // osc
		, 16  // lockcount
		);
		
		pm_pll_set_option(&AVR32_PM
80002c2e:	c9 1f       	rcall	80002b50 <pm_pll_set_option>
80002c30:	30 0b       	mov	r11,0
80002c32:	fe 7c 0c 00 	mov	r12,-62464
80002c36:	c9 9f       	rcall	80002b68 <pm_pll_enable>
80002c38:	fe 7c 0c 00 	mov	r12,-62464
80002c3c:	c9 df       	rcall	80002b76 <pm_wait_for_pll0_locked>
		, 1 // pll_freq  (f_vfo range 80MHz - 180 MHz)
		, 1 // pll_div2  (f_pll1 = f_vfo / 2)
		, 0 // pll_wbwdisable
		);
		
		pm_pll_enable(&AVR32_PM, 0);
80002c3e:	30 1a       	mov	r10,1
80002c40:	30 07       	mov	r7,0
80002c42:	14 9b       	mov	r11,r10
80002c44:	1a d7       	st.w	--sp,r7
80002c46:	0e 98       	mov	r8,r7
		
		pm_wait_for_pll0_locked(&AVR32_PM);
80002c48:	1a d7       	st.w	--sp,r7
80002c4a:	0e 99       	mov	r9,r7
80002c4c:	fe 7c 0c 00 	mov	r12,-62464
		
		pm_cksel(&AVR32_PM
80002c50:	c3 5f       	rcall	80002aba <pm_cksel>
80002c52:	30 1c       	mov	r12,1
80002c54:	fe b0 f9 da 	rcall	80002008 <flashc_set_wait_state>
80002c58:	30 2b       	mov	r11,2
80002c5a:	fe 7c 0c 00 	mov	r12,-62464
80002c5e:	c9 6f       	rcall	80002b8a <pm_switch_to_clock>
80002c60:	30 19       	mov	r9,1
80002c62:	1a d6       	st.w	--sp,r6
80002c64:	12 9b       	mov	r11,r9
		, 1, 1 // PBA  (CPU / 4) = 16.384 MHz
		, 0, 0 // PBB  65.536 MHz
		, 0, 0 // HSB	 = CPU 65.536 MHz
		);
		
		flashc_set_wait_state(1);  // one wait state if CPU clock > 33 MHz
80002c66:	0e 98       	mov	r8,r7
80002c68:	30 7a       	mov	r10,7
80002c6a:	fe 7c 0c 00 	mov	r12,-62464
		
		pm_switch_to_clock(&AVR32_PM, AVR32_PM_MCCTRL_MCSEL_PLL0); // switch to PLL0
80002c6e:	c6 0f       	rcall	80002b2e <pm_pll_setup>
80002c70:	30 19       	mov	r9,1
80002c72:	0e 98       	mov	r8,r7
80002c74:	12 9a       	mov	r10,r9
		// --------------------------------------
		
		// USB clock
		
		// Use 12MHz from OSC0 and generate 96 MHz
		pm_pll_setup(&AVR32_PM, 1,  // pll.
80002c76:	12 9b       	mov	r11,r9
80002c78:	fe 7c 0c 00 	mov	r12,-62464
80002c7c:	c6 af       	rcall	80002b50 <pm_pll_set_option>
80002c7e:	30 1b       	mov	r11,1
80002c80:	fe 7c 0c 00 	mov	r12,-62464
80002c84:	c7 2f       	rcall	80002b68 <pm_pll_enable>
80002c86:	fe 7c 0c 00 	mov	r12,-62464
		7,   // mul.
		1,   // div.
		0,   // osc.
		16); // lockcount.

		pm_pll_set_option(&AVR32_PM, 1, // pll.
80002c8a:	c7 bf       	rcall	80002b80 <pm_wait_for_pll1_locked>
80002c8c:	0e 98       	mov	r8,r7
80002c8e:	1a d7       	st.w	--sp,r7
80002c90:	30 19       	mov	r9,1
80002c92:	30 4b       	mov	r11,4
80002c94:	12 9a       	mov	r10,r9
80002c96:	fe 7c 0c 00 	mov	r12,-62464
		1,  // pll_freq: choose the range 80-180MHz.
		1,  // pll_div2.
		0); // pll_wbwdisable.

		// start PLL1 and wait forl lock
		pm_pll_enable(&AVR32_PM, 1);
80002c9a:	c3 2f       	rcall	80002afe <pm_gc_setup>
80002c9c:	30 4b       	mov	r11,4
80002c9e:	fe 7c 0c 00 	mov	r12,-62464

		// Wait for PLL1 locked.
		pm_wait_for_pll1_locked(&AVR32_PM);
80002ca2:	c3 ff       	rcall	80002b20 <pm_gc_enable>
80002ca4:	30 eb       	mov	r11,14
80002ca6:	4a 97       	lddpc	r7,80002d48 <board_init+0x168>
80002ca8:	0e 9c       	mov	r12,r7

		pm_gc_setup(&AVR32_PM, AVR32_PM_GCLK_USBB,  // gc.
80002caa:	ee c6 ff e3 	sub	r6,r7,-29
80002cae:	fe b0 fd d9 	rcall	80002860 <gpio_enable_gpio>
80002cb2:	2f bd       	sub	sp,-20
80002cb4:	2f f7       	sub	r7,-1
80002cb6:	0f 8b       	ld.ub	r11,r7[0x0]
80002cb8:	ef 3c ff ff 	ld.ub	r12,r7[-1]
		1,  // osc_or_pll: use Osc (if 0) or PLL (if 1).
		1,  // pll_osc: select Osc0/PLL0 or Osc1/PLL1.
		0,  // diven.
		0); // div.
		pm_gc_enable(&AVR32_PM, AVR32_PM_GCLK_USBB);
80002cbc:	fe b0 fd f2 	rcall	800028a0 <gpio_configure_pin>
80002cc0:	2f e7       	sub	r7,-2
80002cc2:	0c 37       	cp.w	r7,r6
80002cc4:	cf 91       	brne	80002cb6 <board_init+0xd6>
		
		// --------------------------------------
	
	// LCD display
	
	gpio_enable_gpio( lcd_gpio_map, sizeof( lcd_gpio_map ) / sizeof( lcd_gpio_map[0] ) );
80002cc6:	30 2b       	mov	r11,2
80002cc8:	4a 1c       	lddpc	r12,80002d4c <board_init+0x16c>
80002cca:	fe b0 fd b7 	rcall	80002838 <gpio_enable_module>
};




void board_init(void)
80002cce:	fe 78 30 00 	mov	r8,-53248
		
		// --------------------------------------
	
	// LCD display
	
	gpio_enable_gpio( lcd_gpio_map, sizeof( lcd_gpio_map ) / sizeof( lcd_gpio_map[0] ) );
80002cd2:	30 3c       	mov	r12,3
};




void board_init(void)
80002cd4:	f0 f9 02 c0 	ld.w	r9,r8[704]
	
	int i;
	
	for (i=0; i < (sizeof( lcd_gpio_map ) / sizeof( lcd_gpio_map[0] )); i++)
	{
		gpio_configure_pin( lcd_gpio_map[i].pin, lcd_gpio_map[i].function);
80002cd8:	f3 dc d0 04 	bfins	r9,r12,0x0,0x4
80002cdc:	f1 49 02 c0 	st.w	r8[704],r9
80002ce0:	e0 69 03 e8 	mov	r9,1000
	
	gpio_enable_gpio( lcd_gpio_map, sizeof( lcd_gpio_map ) / sizeof( lcd_gpio_map[0] ) );
	
	int i;
	
	for (i=0; i < (sizeof( lcd_gpio_map ) / sizeof( lcd_gpio_map[0] )); i++)
80002ce4:	f1 49 02 c8 	st.w	r8[712],r9
	{
		gpio_configure_pin( lcd_gpio_map[i].pin, lcd_gpio_map[i].function);
	}
	
	
	gpio_enable_module( lcd_pwm_gpio_map, sizeof( lcd_pwm_gpio_map ) / sizeof( lcd_pwm_gpio_map[0] ) );
80002ce8:	e0 6a 01 f4 	mov	r10,500
80002cec:	f1 4a 02 c4 	st.w	r8[708],r10
	
	
	// Backlight
	AVR32_PWM.channel[6].CMR.cpre = 3;
80002cf0:	30 1a       	mov	r10,1
80002cf2:	70 1b       	ld.w	r11,r8[0x4]
80002cf4:	f7 da d0 c1 	bfins	r11,r10,0x6,0x1
80002cf8:	91 1b       	st.w	r8[0x4],r11
80002cfa:	f0 fb 02 00 	ld.w	r11,r8[512]
80002cfe:	f7 dc d0 04 	bfins	r11,r12,0x0,0x4
	AVR32_PWM.channel[6].cprd = 1000;
80002d02:	f1 4b 02 00 	st.w	r8[512],r11
80002d06:	f1 49 02 08 	st.w	r8[520],r9
	AVR32_PWM.channel[6].cdty = 500;
80002d0a:	e0 69 02 08 	mov	r9,520
80002d0e:	f1 49 02 04 	st.w	r8[516],r9
	
	AVR32_PWM.ENA.chid6 = 1;
80002d12:	70 19       	ld.w	r9,r8[0x4]
80002d14:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80002d18:	48 e7       	lddpc	r7,80002d50 <board_init+0x170>
80002d1a:	91 19       	st.w	r8[0x4],r9
	
	// contrast
	AVR32_PWM.channel[0].CMR.cpre = 3;
80002d1c:	0e 9c       	mov	r12,r7
80002d1e:	ee c6 ff f1 	sub	r6,r7,-15
80002d22:	30 7b       	mov	r11,7
80002d24:	fe b0 fd 9e 	rcall	80002860 <gpio_enable_gpio>
	AVR32_PWM.channel[0].cprd = 1000;
80002d28:	2f f7       	sub	r7,-1
80002d2a:	0f 8b       	ld.ub	r11,r7[0x0]
	AVR32_PWM.channel[0].cdty = 520;
80002d2c:	ef 3c ff ff 	ld.ub	r12,r7[-1]
80002d30:	fe b0 fd b8 	rcall	800028a0 <gpio_configure_pin>
	
	AVR32_PWM.ENA.chid0 = 1;
80002d34:	2f e7       	sub	r7,-2
80002d36:	0c 37       	cp.w	r7,r6
80002d38:	cf 91       	brne	80002d2a <board_init+0x14a>
	
	

	// switches

	gpio_enable_gpio( switch_gpio_map, sizeof( switch_gpio_map ) / sizeof( switch_gpio_map[0] ) );
80002d3a:	30 4b       	mov	r11,4
	// contrast
	AVR32_PWM.channel[0].CMR.cpre = 3;
	AVR32_PWM.channel[0].cprd = 1000;
	AVR32_PWM.channel[0].cdty = 520;
	
	AVR32_PWM.ENA.chid0 = 1;
80002d3c:	48 6c       	lddpc	r12,80002d54 <board_init+0x174>
	
	

	// switches

	gpio_enable_gpio( switch_gpio_map, sizeof( switch_gpio_map ) / sizeof( switch_gpio_map[0] ) );
80002d3e:	fe b0 fd 7d 	rcall	80002838 <gpio_enable_module>
};




void board_init(void)
80002d42:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	
	

	// switches

	gpio_enable_gpio( switch_gpio_map, sizeof( switch_gpio_map ) / sizeof( switch_gpio_map[0] ) );
80002d46:	d7 03       	nop
80002d48:	80 00       	ld.sh	r0,r0[0x0]
80002d4a:	3c ac       	mov	r12,-54
	
	for (i=0; i < (sizeof( switch_gpio_map ) / sizeof( switch_gpio_map[0] )); i++)
	{
		gpio_configure_pin( switch_gpio_map[i].pin, switch_gpio_map[i].function);
80002d4c:	80 00       	ld.sh	r0,r0[0x0]
80002d4e:	3c a8       	mov	r8,-54
80002d50:	80 00       	ld.sh	r0,r0[0x0]
80002d52:	3c c8       	mov	r8,-52
80002d54:	80 00       	ld.sh	r0,r0[0x0]
80002d56:	3c a0       	mov	r0,-54

80002d58 <disp_init>:



void disp_init(void)
{
	pixelbuf[0] = buf_layer0;
80002d58:	48 29       	lddpc	r9,80002d60 <disp_init+0x8>
80002d5a:	48 38       	lddpc	r8,80002d64 <disp_init+0xc>
80002d5c:	91 09       	st.w	r8[0x0],r9
	
	// disp_printc_xy(0, 122, 14, DISP_FONT_6x8, 0, 30);
	// disp_printc_xy(0, 122, 42, DISP_FONT_6x8, 0, 31);
}
80002d5e:	5e fc       	retal	r12
80002d60:	00 00       	add	r0,r0
80002d62:	06 10       	sub	r0,r3
80002d64:	00 00       	add	r0,r0
80002d66:	06 0c       	add	r12,r3

80002d68 <disp_set_pixel>:
		blob[i] = pixelbuf[layer] [((y + i) << 4) + xb];
	}
}

void disp_set_pixel ( int layer, int x, int y, int disp_inverse, unsigned char data, int numbits )
{
80002d68:	d4 21       	pushm	r4-r7,lr
80002d6a:	40 56       	lddsp	r6,sp[0x14]
	int i;
	
	unsigned short b = data;
	unsigned short m = 1;
	
	for (i=1; i < numbits; i++)
80002d6c:	58 16       	cp.w	r6,1
80002d6e:	e0 8a 00 53 	brle	80002e14 <disp_set_pixel+0xac>
80002d72:	30 1e       	mov	lr,1
80002d74:	1c 97       	mov	r7,lr
	{
		m = (m << 1) | 1;
80002d76:	5c 7e       	castu.h	lr
	int i;
	
	unsigned short b = data;
	unsigned short m = 1;
	
	for (i=1; i < numbits; i++)
80002d78:	2f f7       	sub	r7,-1
	{
		m = (m << 1) | 1;
80002d7a:	a1 7e       	lsl	lr,0x1
80002d7c:	a1 ae       	sbr	lr,0x0
80002d7e:	5c 8e       	casts.h	lr
	int i;
	
	unsigned short b = data;
	unsigned short m = 1;
	
	for (i=1; i < numbits; i++)
80002d80:	0c 37       	cp.w	r7,r6
80002d82:	cf a1       	brne	80002d76 <disp_set_pixel+0xe>
	{
		m = (m << 1) | 1;
	}
	
	int xb = x >> 3;
80002d84:	f6 07 14 03 	asr	r7,r11,0x3
	int xa = x & 0x07;
	
	if (xb >= 16)
80002d88:	58 f7       	cp.w	r7,15
80002d8a:	e0 89 00 44 	brgt	80002e12 <disp_set_pixel+0xaa>
	return;
	
	if (y >= 64)
80002d8e:	e0 4a 00 3f 	cp.w	r10,63
80002d92:	e0 89 00 40 	brgt	80002e12 <disp_set_pixel+0xaa>
	return;
	
	b = b << (16 - numbits - xa);
80002d96:	ec 06 11 10 	rsub	r6,r6,16
80002d9a:	f7 db c0 03 	bfextu	r11,r11,0x0,0x3
	m = m << (16 - numbits - xa);
80002d9e:	5c 7e       	castu.h	lr
	return;
	
	if (y >= 64)
	return;
	
	b = b << (16 - numbits - xa);
80002da0:	ec 0b 01 0b 	sub	r11,r6,r11
	if (disp_inverse != 0)
	{
		b = b ^ m;
	}
	
	pixelbuf[layer] [(y << 4) + xb] &=  ~(m >> 8);
80002da4:	a5 6a       	lsl	r10,0x4
	
	if (y >= 64)
	return;
	
	b = b << (16 - numbits - xa);
	m = m << (16 - numbits - xa);
80002da6:	fc 0b 09 4e 	lsl	lr,lr,r11
	if (disp_inverse != 0)
	{
		b = b ^ m;
	}
	
	pixelbuf[layer] [(y << 4) + xb] &=  ~(m >> 8);
80002daa:	0e 0a       	add	r10,r7
	return;
	
	if (y >= 64)
	return;
	
	b = b << (16 - numbits - xa);
80002dac:	f0 0b 09 4b 	lsl	r11,r8,r11
	m = m << (16 - numbits - xa);
80002db0:	5c 8e       	casts.h	lr
	return;
	
	if (y >= 64)
	return;
	
	b = b << (16 - numbits - xa);
80002db2:	5c 8b       	casts.h	r11
	if (disp_inverse != 0)
	{
		b = b ^ m;
	}
	
	pixelbuf[layer] [(y << 4) + xb] &=  ~(m >> 8);
80002db4:	49 98       	lddpc	r8,80002e18 <disp_set_pixel+0xb0>
	b = b << (16 - numbits - xa);
	m = m << (16 - numbits - xa);
	
	if (disp_inverse != 0)
	{
		b = b ^ m;
80002db6:	58 09       	cp.w	r9,0
80002db8:	fd db e1 4b 	eorne	r11,lr,r11
	}
	
	pixelbuf[layer] [(y << 4) + xb] &=  ~(m >> 8);
80002dbc:	f0 0c 03 26 	ld.w	r6,r8[r12<<0x2]
80002dc0:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
80002dc4:	14 06       	add	r6,r10
80002dc6:	f2 04 16 08 	lsr	r4,r9,0x8
80002dca:	0d 85       	ld.ub	r5,r6[0x0]
80002dcc:	5c d4       	com	r4
80002dce:	e9 e5 00 05 	and	r5,r4,r5
80002dd2:	ac 85       	st.b	r6[0x0],r5
	pixelbuf[layer] [(y << 4) + xb] |=  (b >> 8);
80002dd4:	e9 db c1 08 	bfextu	r4,r11,0x8,0x8
80002dd8:	f0 0c 03 26 	ld.w	r6,r8[r12<<0x2]
80002ddc:	14 06       	add	r6,r10
80002dde:	0d 85       	ld.ub	r5,r6[0x0]
80002de0:	e9 e5 10 05 	or	r5,r4,r5
80002de4:	ac 85       	st.b	r6[0x0],r5
	
	if (((m & 0xff) != 0) && (xb < 15))
80002de6:	58 e7       	cp.w	r7,14
80002de8:	5f a7       	srle	r7
80002dea:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
80002dee:	5f 19       	srne	r9
80002df0:	0e 69       	and	r9,r7
80002df2:	c1 00       	breq	80002e12 <disp_set_pixel+0xaa>
	{
		pixelbuf[layer] [(y << 4) + xb + 1] &=  ~(m & 0xff);
80002df4:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
80002df8:	2f fa       	sub	r10,-1
80002dfa:	5c de       	com	lr
80002dfc:	14 09       	add	r9,r10
80002dfe:	13 87       	ld.ub	r7,r9[0x0]
80002e00:	0e 6e       	and	lr,r7
80002e02:	b2 8e       	st.b	r9[0x0],lr
		pixelbuf[layer] [(y << 4) + xb + 1] |=  (b & 0xff);
80002e04:	f0 0c 03 28 	ld.w	r8,r8[r12<<0x2]
80002e08:	f0 0a 00 0a 	add	r10,r8,r10
80002e0c:	15 88       	ld.ub	r8,r10[0x0]
80002e0e:	10 4b       	or	r11,r8
80002e10:	b4 8b       	st.b	r10[0x0],r11
80002e12:	d8 22       	popm	r4-r7,pc
	int i;
	
	unsigned short b = data;
	unsigned short m = 1;
	
	for (i=1; i < numbits; i++)
80002e14:	30 1e       	mov	lr,1
80002e16:	cb 7b       	rjmp	80002d84 <disp_set_pixel+0x1c>
80002e18:	00 00       	add	r0,r0
80002e1a:	06 0c       	add	r12,r3

80002e1c <disp_printc_xy>:
		pixelbuf[layer] [(y << 4) + xb + 1] |=  (b & 0xff);
	}
}

void disp_printc_xy ( int layer, int x, int y, struct disp_font * font, int disp_inverse, unsigned char c)
{
80002e1c:	eb cd 40 fe 	pushm	r1-r7,lr
80002e20:	10 94       	mov	r4,r8
80002e22:	12 96       	mov	r6,r9
80002e24:	18 91       	mov	r1,r12
80002e26:	16 92       	mov	r2,r11
80002e28:	14 93       	mov	r3,r10
80002e2a:	40 85       	lddsp	r5,sp[0x20]
	int i;
	
	for (i=0; i < font->height; i++)
80002e2c:	72 28       	ld.w	r8,r9[0x8]
80002e2e:	58 08       	cp.w	r8,0
80002e30:	e0 8a 00 16 	brle	80002e5c <disp_printc_xy+0x40>
80002e34:	30 07       	mov	r7,0
	{
		disp_set_pixel ( layer, x, y + i, disp_inverse, font->data[ c * font->height + i ], font->width );
80002e36:	6c 09       	ld.w	r9,r6[0x0]
80002e38:	6c 1a       	ld.w	r10,r6[0x4]
80002e3a:	0e 09       	add	r9,r7
80002e3c:	1a da       	st.w	--sp,r10
80002e3e:	ab 38       	mul	r8,r5
80002e40:	ee 03 00 0a 	add	r10,r7,r3
80002e44:	f2 08 07 08 	ld.ub	r8,r9[r8]

void disp_printc_xy ( int layer, int x, int y, struct disp_font * font, int disp_inverse, unsigned char c)
{
	int i;
	
	for (i=0; i < font->height; i++)
80002e48:	2f f7       	sub	r7,-1
	{
		disp_set_pixel ( layer, x, y + i, disp_inverse, font->data[ c * font->height + i ], font->width );
80002e4a:	08 99       	mov	r9,r4
80002e4c:	04 9b       	mov	r11,r2
80002e4e:	02 9c       	mov	r12,r1
80002e50:	c8 cf       	rcall	80002d68 <disp_set_pixel>
80002e52:	6c 28       	ld.w	r8,r6[0x8]

void disp_printc_xy ( int layer, int x, int y, struct disp_font * font, int disp_inverse, unsigned char c)
{
	int i;
	
	for (i=0; i < font->height; i++)
80002e54:	2f fd       	sub	sp,-4
80002e56:	0e 38       	cp.w	r8,r7
80002e58:	fe 99 ff ef 	brgt	80002e36 <disp_printc_xy+0x1a>
80002e5c:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc

80002e60 <disp_prints_xy>:
80002e60:	eb cd 40 fc 	pushm	r2-r7,lr
80002e64:	40 77       	lddsp	r7,sp[0x1c]
80002e66:	10 94       	mov	r4,r8
		disp_set_pixel ( layer, x, y + i, disp_inverse, font->data[ c * font->height + i ], font->width );
	}
}

void disp_prints_xy ( int layer, int x, int y, struct disp_font * font, int disp_inverse, const char * s )
{
80002e68:	18 92       	mov	r2,r12
80002e6a:	14 93       	mov	r3,r10
80002e6c:	12 96       	mov	r6,r9
	int xx = x;
	
	while ( *s != 0 )
80002e6e:	0f 88       	ld.ub	r8,r7[0x0]
80002e70:	58 08       	cp.w	r8,0
80002e72:	c1 00       	breq	80002e92 <disp_prints_xy+0x32>
80002e74:	16 95       	mov	r5,r11
	{
		disp_printc_xy( layer, xx, y, font, disp_inverse, ((int) *s) & 0xFF );
80002e76:	1a d8       	st.w	--sp,r8
		s++;
80002e78:	2f f7       	sub	r7,-1
{
	int xx = x;
	
	while ( *s != 0 )
	{
		disp_printc_xy( layer, xx, y, font, disp_inverse, ((int) *s) & 0xFF );
80002e7a:	0a 9b       	mov	r11,r5
80002e7c:	08 98       	mov	r8,r4
80002e7e:	0c 99       	mov	r9,r6
80002e80:	06 9a       	mov	r10,r3
80002e82:	04 9c       	mov	r12,r2
80002e84:	cc cf       	rcall	80002e1c <disp_printc_xy>
80002e86:	6c 18       	ld.w	r8,r6[0x4]
		s++;
		xx += font->width;
80002e88:	2f fd       	sub	sp,-4

void disp_prints_xy ( int layer, int x, int y, struct disp_font * font, int disp_inverse, const char * s )
{
	int xx = x;
	
	while ( *s != 0 )
80002e8a:	10 05       	add	r5,r8
	{
		disp_printc_xy( layer, xx, y, font, disp_inverse, ((int) *s) & 0xFF );
		s++;
		xx += font->width;
80002e8c:	0f 88       	ld.ub	r8,r7[0x0]

void disp_prints_xy ( int layer, int x, int y, struct disp_font * font, int disp_inverse, const char * s )
{
	int xx = x;
	
	while ( *s != 0 )
80002e8e:	58 08       	cp.w	r8,0
80002e90:	cf 31       	brne	80002e76 <disp_prints_xy+0x16>
80002e92:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80002e96:	d7 03       	nop

80002e98 <disp_i2s>:
80002e98:	eb cd 40 f8 	pushm	r3-r7,lr
	}
}

void disp_i2s (char * buf, int size, int base, int leading_zero, unsigned int n)
{
	buf[size] = 0;
80002e9c:	30 0e       	mov	lr,0
80002e9e:	f8 0b 0b 0e 	st.b	r12[r11],lr
	
	int i;
	
	for (i=(size-1); i >= 0; i--)
80002ea2:	f6 c7 00 01 	sub	r7,r11,1
80002ea6:	c1 46       	brmi	80002ece <disp_i2s+0x36>
80002ea8:	f8 07 00 06 	add	r6,r12,r7
	{
		char c = n % base;
		
		if (c > 9)
80002eac:	30 93       	mov	r3,9
	
	int i;
	
	for (i=(size-1); i >= 0; i--)
	{
		char c = n % base;
80002eae:	f0 0a 0d 04 	divu	r4,r8,r10
{
	buf[size] = 0;
	
	int i;
	
	for (i=(size-1); i >= 0; i--)
80002eb2:	20 17       	sub	r7,1
		{
			c += 7;
		}
		
		buf[i] = 48 + c;
		n /= base;
80002eb4:	08 98       	mov	r8,r4
	
	int i;
	
	for (i=(size-1); i >= 0; i--)
	{
		char c = n % base;
80002eb6:	fd d5 c0 08 	bfextu	lr,r5,0x0,0x8
		
		if (c > 9)
80002eba:	e6 0e 18 00 	cp.b	lr,r3
80002ebe:	e0 88 00 03 	brls	80002ec4 <disp_i2s+0x2c>
		{
			c += 7;
80002ec2:	2f 9e       	sub	lr,-7
		}
		
		buf[i] = 48 + c;
80002ec4:	2d 0e       	sub	lr,-48
80002ec6:	ac 8e       	st.b	r6[0x0],lr
{
	buf[size] = 0;
	
	int i;
	
	for (i=(size-1); i >= 0; i--)
80002ec8:	20 16       	sub	r6,1
80002eca:	5b f7       	cp.w	r7,-1
80002ecc:	cf 11       	brne	80002eae <disp_i2s+0x16>
		
		buf[i] = 48 + c;
		n /= base;
	}
	
	if (leading_zero == 0)
80002ece:	58 09       	cp.w	r9,0
80002ed0:	c1 f1       	brne	80002f0e <disp_i2s+0x76>
	{
		for (i=0; i < size; i++)
80002ed2:	58 0b       	cp.w	r11,0
80002ed4:	e0 8a 00 1d 	brle	80002f0e <disp_i2s+0x76>
		{
			if ( (buf[i] == '0') && (buf[i+1] != 0))
80002ed8:	19 87       	ld.ub	r7,r12[0x0]
80002eda:	33 08       	mov	r8,48
80002edc:	f0 07 18 00 	cp.b	r7,r8
80002ee0:	c1 71       	brne	80002f0e <disp_i2s+0x76>
80002ee2:	f8 c8 ff ff 	sub	r8,r12,-1
80002ee6:	11 8e       	ld.ub	lr,r8[0x0]
80002ee8:	f2 0e 18 00 	cp.b	lr,r9
80002eec:	c1 10       	breq	80002f0e <disp_i2s+0x76>
			{
				buf[i] = ' ';
80002eee:	32 0e       	mov	lr,32
80002ef0:	c0 a8       	rjmp	80002f04 <disp_i2s+0x6c>
	
	if (leading_zero == 0)
	{
		for (i=0; i < size; i++)
		{
			if ( (buf[i] == '0') && (buf[i+1] != 0))
80002ef2:	10 9c       	mov	r12,r8
80002ef4:	11 8a       	ld.ub	r10,r8[0x0]
80002ef6:	ee 0a 18 00 	cp.b	r10,r7
80002efa:	c0 a1       	brne	80002f0e <disp_i2s+0x76>
80002efc:	11 9a       	ld.ub	r10,r8[0x1]
80002efe:	2f f8       	sub	r8,-1
80002f00:	58 0a       	cp.w	r10,0
80002f02:	c0 60       	breq	80002f0e <disp_i2s+0x76>
			{
				buf[i] = ' ';
80002f04:	b8 8e       	st.b	r12[0x0],lr
		n /= base;
	}
	
	if (leading_zero == 0)
	{
		for (i=0; i < size; i++)
80002f06:	2f f9       	sub	r9,-1
80002f08:	12 3b       	cp.w	r11,r9
80002f0a:	fe 99 ff f4 	brgt	80002ef2 <disp_i2s+0x5a>
80002f0e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002f12:	d7 03       	nop

80002f14 <lcd_send>:
#define LCD_PIN_RW		AVR32_PIN_PB22



static void lcd_send( void (*idle_proc) (void), int linksrechts, int rs, int data )
{
80002f14:	d4 21       	pushm	r4-r7,lr
80002f16:	18 97       	mov	r7,r12
80002f18:	16 96       	mov	r6,r11
80002f1a:	12 94       	mov	r4,r9
	// uint32_t d = data << 24;
	
	uint32_t d = 0;
	int i;
	
	if (rs != 0)
80002f1c:	58 0a       	cp.w	r10,0
80002f1e:	c2 d0       	breq	80002f78 <lcd_send+0x64>
	{
		gpio_set_pin_high(LCD_PIN_DI);
80002f20:	33 5c       	mov	r12,53
80002f22:	fe b0 fd 0a 	rcall	80002936 <gpio_set_pin_high>
	else
	{
		gpio_set_pin_low(LCD_PIN_DI);
	}
	
	if (linksrechts == 1)
80002f26:	58 16       	cp.w	r6,1
80002f28:	c2 d0       	breq	80002f82 <lcd_send+0x6e>
	{
		gpio_set_pin_high(LCD_PIN_CS1);
	}
	else
	{
		gpio_set_pin_high(LCD_PIN_CS2);
80002f2a:	32 ec       	mov	r12,46
80002f2c:	fe b0 fd 05 	rcall	80002936 <gpio_set_pin_high>
		gpio_set_pin_low(LCD_PIN_DI);
	}
	
	if (linksrechts == 1)
	{
		gpio_set_pin_high(LCD_PIN_CS1);
80002f30:	30 08       	mov	r8,0
80002f32:	10 95       	mov	r5,r8
80002f34:	c0 28       	rjmp	80002f38 <lcd_send+0x24>
		{
			d |= (1 << 23);
		}
		
		d = d << 1;
		data = data >> 1;
80002f36:	a1 54       	asr	r4,0x1
	else
	{
		gpio_set_pin_high(LCD_PIN_CS2);
	}
	
	for (i=0; i < 8; i++)
80002f38:	2f f8       	sub	r8,-1
	{
		if ((data & 1) != 0)
80002f3a:	ed b4 00 00 	bld	r4,0x0
80002f3e:	c0 21       	brne	80002f42 <lcd_send+0x2e>
		{
			d |= (1 << 23);
80002f40:	b7 b5       	sbr	r5,0x17
		}
		
		d = d << 1;
80002f42:	a1 75       	lsl	r5,0x1
	else
	{
		gpio_set_pin_high(LCD_PIN_CS2);
	}
	
	for (i=0; i < 8; i++)
80002f44:	58 88       	cp.w	r8,8
80002f46:	cf 81       	brne	80002f36 <lcd_send+0x22>
		d = d << 1;
		data = data >> 1;
	}
	
	
	gpio_set_group_high(1 /* PORT B */, d);
80002f48:	0a 9b       	mov	r11,r5
80002f4a:	30 1c       	mov	r12,1
80002f4c:	fe b0 fc ff 	rcall	8000294a <gpio_set_group_high>
	gpio_set_group_low(1 /* PORT B */, d ^ 0xFF000000);
80002f50:	30 1c       	mov	r12,1
80002f52:	0a 9b       	mov	r11,r5
80002f54:	ee 1b ff 00 	eorh	r11,0xff00
80002f58:	fe b0 fd 09 	rcall	8000296a <gpio_set_group_low>
	
	
	gpio_set_pin_high(LCD_PIN_E);
80002f5c:	32 cc       	mov	r12,44
80002f5e:	fe b0 fc ec 	rcall	80002936 <gpio_set_pin_high>
	
	idle_proc();
80002f62:	5d 17       	icall	r7
	
	gpio_set_pin_low(LCD_PIN_E);
80002f64:	32 cc       	mov	r12,44
80002f66:	fe b0 fc f8 	rcall	80002956 <gpio_set_pin_low>
	
	
	if (linksrechts == 1)
80002f6a:	58 16       	cp.w	r6,1
80002f6c:	c0 f0       	breq	80002f8a <lcd_send+0x76>
	{
		gpio_set_pin_low(LCD_PIN_CS1);
	}
	else
	{
		gpio_set_pin_low(LCD_PIN_CS2);
80002f6e:	32 ec       	mov	r12,46
80002f70:	fe b0 fc f3 	rcall	80002956 <gpio_set_pin_low>
	}
	
	idle_proc();
80002f74:	5d 17       	icall	r7
}
80002f76:	d8 22       	popm	r4-r7,pc
	{
		gpio_set_pin_high(LCD_PIN_DI);
	}
	else
	{
		gpio_set_pin_low(LCD_PIN_DI);
80002f78:	33 5c       	mov	r12,53
80002f7a:	fe b0 fc ee 	rcall	80002956 <gpio_set_pin_low>
	}
	
	if (linksrechts == 1)
80002f7e:	58 16       	cp.w	r6,1
80002f80:	cd 51       	brne	80002f2a <lcd_send+0x16>
	{
		gpio_set_pin_high(LCD_PIN_CS1);
80002f82:	32 dc       	mov	r12,45
80002f84:	fe b0 fc d9 	rcall	80002936 <gpio_set_pin_high>
80002f88:	cd 4b       	rjmp	80002f30 <lcd_send+0x1c>
	gpio_set_pin_low(LCD_PIN_E);
	
	
	if (linksrechts == 1)
	{
		gpio_set_pin_low(LCD_PIN_CS1);
80002f8a:	32 dc       	mov	r12,45
80002f8c:	fe b0 fc e5 	rcall	80002956 <gpio_set_pin_low>
	else
	{
		gpio_set_pin_low(LCD_PIN_CS2);
	}
	
	idle_proc();
80002f90:	5d 17       	icall	r7
}
80002f92:	d8 22       	popm	r4-r7,pc

80002f94 <disp_main_loop>:
80002f94:	d4 31       	pushm	r0-r7,lr
80002f96:	20 5d       	sub	sp,20
80002f98:	18 94       	mov	r4,r12
80002f9a:	30 2c       	mov	r12,2
80002f9c:	fe b0 fc dd 	rcall	80002956 <gpio_set_pin_low>
80002fa0:	32 cc       	mov	r12,44
80002fa2:	fe b0 fc da 	rcall	80002956 <gpio_set_pin_low>

void disp_main_loop( void (*idle_proc) (void) )
{
	gpio_set_pin_low(LCD_PIN_RES);
	gpio_set_pin_low(LCD_PIN_E);
	gpio_set_pin_low(LCD_PIN_CS1);
80002fa6:	32 dc       	mov	r12,45
80002fa8:	fe b0 fc d7 	rcall	80002956 <gpio_set_pin_low>
	gpio_set_pin_low(LCD_PIN_CS2);
80002fac:	32 ec       	mov	r12,46
80002fae:	fe b0 fc d4 	rcall	80002956 <gpio_set_pin_low>
	gpio_set_pin_low(LCD_PIN_RW);
80002fb2:	33 6c       	mov	r12,54
80002fb4:	fe b0 fc d1 	rcall	80002956 <gpio_set_pin_low>
80002fb8:	30 07       	mov	r7,0
	// gpio_set_pin_high(AVR32_PIN_PB19); // kontrast
	// gpio_set_pin_high(AVR32_PIN_PB18); // backlight
	
	int i;
	
	for (i=0; i < 3000; i++)
80002fba:	2f f7       	sub	r7,-1
	{
		idle_proc();
80002fbc:	5d 14       	icall	r4
	// gpio_set_pin_high(AVR32_PIN_PB19); // kontrast
	// gpio_set_pin_high(AVR32_PIN_PB18); // backlight
	
	int i;
	
	for (i=0; i < 3000; i++)
80002fbe:	e0 47 0b b8 	cp.w	r7,3000
80002fc2:	cf c1       	brne	80002fba <disp_main_loop+0x26>
	{
		idle_proc();
	}
	
	gpio_set_pin_high(LCD_PIN_RES);
80002fc4:	30 2c       	mov	r12,2
80002fc6:	fe b0 fc b8 	rcall	80002936 <gpio_set_pin_high>
80002fca:	30 07       	mov	r7,0
	
	for (i=0; i < 1000; i++)
80002fcc:	2f f7       	sub	r7,-1
	{
		idle_proc();
80002fce:	5d 14       	icall	r4
		idle_proc();
	}
	
	gpio_set_pin_high(LCD_PIN_RES);
	
	for (i=0; i < 1000; i++)
80002fd0:	e0 47 03 e8 	cp.w	r7,1000
80002fd4:	cf c1       	brne	80002fcc <disp_main_loop+0x38>
	{
		idle_proc();
	}
	
	lcd_send(idle_proc, 1, 0, 0x3f);
80002fd6:	33 f9       	mov	r9,63
80002fd8:	30 0a       	mov	r10,0
80002fda:	30 1b       	mov	r11,1
80002fdc:	08 9c       	mov	r12,r4
80002fde:	c9 bf       	rcall	80002f14 <lcd_send>
80002fe0:	33 f9       	mov	r9,63
	lcd_send(idle_proc, 2, 0, 0x3f);
80002fe2:	30 0a       	mov	r10,0
80002fe4:	30 2b       	mov	r11,2
80002fe6:	08 9c       	mov	r12,r4
80002fe8:	c9 6f       	rcall	80002f14 <lcd_send>
80002fea:	30 09       	mov	r9,0
80002fec:	fa c2 ff f4 	sub	r2,sp,-12
80002ff0:	50 29       	stdsp	sp[0x8],r9
80002ff2:	4a e0       	lddpc	r0,800030a8 <disp_main_loop+0x114>
80002ff4:	fa c7 ff ec 	sub	r7,sp,-20
	idle_proc();
}



void disp_main_loop( void (*idle_proc) (void) )
80002ff8:	40 29       	lddsp	r9,sp[0x8]
80002ffa:	f1 d9 c0 03 	bfextu	r8,r9,0x0,0x3
	
	for(;;)
	{
		int x,y,i;
		
		for (x=0; x < 16; x++)
80002ffe:	a3 78       	lsl	r8,0x3
80003000:	a7 a8       	sbr	r8,0x6
80003002:	30 01       	mov	r1,0
80003004:	50 18       	stdsp	sp[0x4],r8
80003006:	58 79       	cp.w	r9,7
80003008:	f9 b3 09 02 	movgt	r3,2
		{
			for (y=0; y < 8; y++)
			{
				
				int r = ((x >= 8) ? 2 : 1);
8000300c:	f9 b3 0a 01 	movle	r3,1
80003010:	f1 d9 b0 1d 	bfexts	r8,r9,0x0,0x1d
	
	for(;;)
	{
		int x,y,i;
		
		for (x=0; x < 16; x++)
80003014:	50 08       	stdsp	sp[0x0],r8
80003016:	40 19       	lddsp	r9,sp[0x4]
80003018:	30 0a       	mov	r10,0
		{
			for (y=0; y < 8; y++)
			{
				
				int r = ((x >= 8) ? 2 : 1);
				lcd_send(idle_proc, r, 0, 0x40 | ((x & 0x07) << 3));
8000301a:	06 9b       	mov	r11,r3
8000301c:	08 9c       	mov	r12,r4
8000301e:	c7 bf       	rcall	80002f14 <lcd_send>
80003020:	30 0a       	mov	r10,0
80003022:	f3 d1 c0 03 	bfextu	r9,r1,0x0,0x3
				lcd_send(idle_proc, r, 0, 0xB8 | (y & 0x07));
80003026:	06 9b       	mov	r11,r3
80003028:	e8 19 00 b8 	orl	r9,0xb8
8000302c:	08 9c       	mov	r12,r4
8000302e:	c7 3f       	rcall	80002f14 <lcd_send>
80003030:	40 08       	lddsp	r8,sp[0x0]
80003032:	58 f8       	cp.w	r8,15
80003034:	e0 89 00 16 	brgt	80003060 <disp_main_loop+0xcc>
void disp_get_pixel ( int layer, int x, int y, unsigned char blob[8])
{
	int i;
	int xb = x >> 3;
	
	if (xb >= 16)
80003038:	e2 0b 15 03 	lsl	r11,r1,0x3
8000303c:	e0 4b 00 38 	cp.w	r11,56
				
				int r = ((x >= 8) ? 2 : 1);
				lcd_send(idle_proc, r, 0, 0x40 | ((x & 0x07) << 3));
				lcd_send(idle_proc, r, 0, 0xB8 | (y & 0x07));

				disp_get_pixel( 0, x << 3, y << 3, blob );
80003040:	e0 89 00 10 	brgt	80003060 <disp_main_loop+0xcc>
	int xb = x >> 3;
	
	if (xb >= 16)
	return;
	
	if (y > 56)
80003044:	30 08       	mov	r8,0
80003046:	40 0c       	lddsp	r12,sp[0x0]
80003048:	f0 0b 00 09 	add	r9,r8,r11
8000304c:	60 0a       	ld.w	r10,r0[0x0]
8000304e:	a5 69       	lsl	r9,0x4
	return;
	
	for (i=0; i < 8; i++)
	{
		blob[i] = pixelbuf[layer] [((y + i) << 4) + xb];
80003050:	18 0a       	add	r10,r12
80003052:	f4 09 07 09 	ld.ub	r9,r10[r9]
80003056:	e4 08 0b 09 	st.b	r2[r8],r9
8000305a:	2f f8       	sub	r8,-1
8000305c:	58 88       	cp.w	r8,8
8000305e:	cf 51       	brne	80003048 <disp_main_loop+0xb4>
80003060:	e0 66 00 80 	mov	r6,128
	return;
	
	if (y > 56)
	return;
	
	for (i=0; i < 8; i++)
80003064:	30 05       	mov	r5,0
80003066:	04 98       	mov	r8,r2
80003068:	30 09       	mov	r9,0
8000306a:	30 1a       	mov	r10,1
8000306c:	c0 28       	rjmp	80003070 <disp_main_loop+0xdc>
						m = m << 1;
					}
					
					lcd_send(idle_proc, r, 1, d);

					mask = mask >> 1;
8000306e:	a1 7a       	lsl	r10,0x1
	idle_proc();
}



void disp_main_loop( void (*idle_proc) (void) )
80003070:	11 8b       	ld.ub	r11,r8[0x0]
80003072:	2f f8       	sub	r8,-1
80003074:	ed eb 00 0b 	and	r11,r6,r11
					int d = 0;
					int j;
					
					for (j=0; j < 8; j++)
					{
						if ((blob[j] & mask) != 0)
80003078:	f3 da e1 39 	orne	r9,r9,r10
8000307c:	0e 38       	cp.w	r8,r7
8000307e:	cf 81       	brne	8000306e <disp_main_loop+0xda>
						{
							d |= m;
80003080:	2f f5       	sub	r5,-1
80003082:	30 1a       	mov	r10,1
				{
					int m = 1;
					int d = 0;
					int j;
					
					for (j=0; j < 8; j++)
80003084:	06 9b       	mov	r11,r3
80003086:	08 9c       	mov	r12,r4

				disp_get_pixel( 0, x << 3, y << 3, blob );
				
				int mask = 0x80;
				
				for (i=0; i < 8; i++)
80003088:	c4 6f       	rcall	80002f14 <lcd_send>
							d |= m;
						}
						m = m << 1;
					}
					
					lcd_send(idle_proc, r, 1, d);
8000308a:	58 85       	cp.w	r5,8
8000308c:	c0 30       	breq	80003092 <disp_main_loop+0xfe>
8000308e:	a1 56       	asr	r6,0x1
80003090:	ce bb       	rjmp	80003066 <disp_main_loop+0xd2>
80003092:	2f f1       	sub	r1,-1

				disp_get_pixel( 0, x << 3, y << 3, blob );
				
				int mask = 0x80;
				
				for (i=0; i < 8; i++)
80003094:	58 81       	cp.w	r1,8
80003096:	cc 01       	brne	80003016 <disp_main_loop+0x82>
						m = m << 1;
					}
					
					lcd_send(idle_proc, r, 1, d);

					mask = mask >> 1;
80003098:	40 29       	lddsp	r9,sp[0x8]
8000309a:	2f f9       	sub	r9,-1
	{
		int x,y,i;
		
		for (x=0; x < 16; x++)
		{
			for (y=0; y < 8; y++)
8000309c:	59 09       	cp.w	r9,16
8000309e:	f9 b9 04 00 	movge	r9,0
	
	for(;;)
	{
		int x,y,i;
		
		for (x=0; x < 16; x++)
800030a2:	50 29       	stdsp	sp[0x8],r9
800030a4:	ca ab       	rjmp	80002ff8 <disp_main_loop+0x64>
800030a6:	d7 03       	nop
800030a8:	00 00       	add	r0,r0
800030aa:	06 0c       	add	r12,r3

800030ac <version2string>:
	}
}


static void version2string (char * buf, const unsigned char * version_info)
{
800030ac:	d4 21       	pushm	r4-r7,lr
		char image = '?';
		char maturity = 0;
		
		switch(version_info[0] & 0x03)
800030ae:	17 84       	ld.ub	r4,r11[0x0]
	}
}


static void version2string (char * buf, const unsigned char * version_info)
{
800030b0:	16 96       	mov	r6,r11
800030b2:	18 97       	mov	r7,r12
		char image = '?';
		char maturity = 0;
		
		switch(version_info[0] & 0x03)
800030b4:	f1 d4 c0 02 	bfextu	r8,r4,0x0,0x2
800030b8:	58 28       	cp.w	r8,2
800030ba:	c3 b0       	breq	80003130 <version2string+0x84>
800030bc:	58 38       	cp.w	r8,3
800030be:	c3 30       	breq	80003124 <version2string+0x78>
800030c0:	58 18       	cp.w	r8,1
800030c2:	f9 b8 00 50 	moveq	r8,80
800030c6:	f9 b8 01 3f 	movne	r8,63
			case SOFTWARE_IMAGE_SYSTEM: // System image
			image = SOFTWARE_IMAGE_SYSTEM_LETTERS[ (version_info[0] & 0x3C) >> 2 ]; 
			break;
		}
		
		switch(version_info[0] & 0xC0)
800030ca:	e2 14 00 c0 	andl	r4,0xc0,COH
800030ce:	e0 44 00 40 	cp.w	r4,64
800030d2:	c2 70       	breq	80003120 <version2string+0x74>
800030d4:	e0 44 00 80 	cp.w	r4,128
800030d8:	f9 b4 00 62 	moveq	r4,98
800030dc:	f9 b4 01 00 	movne	r4,0
			maturity = 'e'; // experimental
			break;
		}
		
		buf[0] = image;
		buf[1] = '.';
800030e0:	32 e5       	mov	r5,46
		disp_i2s(buf + 2, 1, 10, 1, version_info[1]);
800030e2:	30 19       	mov	r9,1
			case SOFTWARE_MATURITY_EXPERIMENTAL:
			maturity = 'e'; // experimental
			break;
		}
		
		buf[0] = image;
800030e4:	ae 88       	st.b	r7[0x0],r8
		buf[1] = '.';
		disp_i2s(buf + 2, 1, 10, 1, version_info[1]);
800030e6:	12 9b       	mov	r11,r9
			maturity = 'e'; // experimental
			break;
		}
		
		buf[0] = image;
		buf[1] = '.';
800030e8:	ae 95       	st.b	r7[0x1],r5
		disp_i2s(buf + 2, 1, 10, 1, version_info[1]);
800030ea:	30 aa       	mov	r10,10
800030ec:	0d 98       	ld.ub	r8,r6[0x1]
800030ee:	ee cc ff fe 	sub	r12,r7,-2
800030f2:	cd 3e       	rcall	80002e98 <disp_i2s>
800030f4:	30 19       	mov	r9,1
		buf[3] = '.';
		disp_i2s(buf + 4, 2, 10, 1, version_info[2]);
800030f6:	ae b5       	st.b	r7[0x3],r5
		}
		
		buf[0] = image;
		buf[1] = '.';
		disp_i2s(buf + 2, 1, 10, 1, version_info[1]);
		buf[3] = '.';
800030f8:	30 aa       	mov	r10,10
		disp_i2s(buf + 4, 2, 10, 1, version_info[2]);
800030fa:	0d a8       	ld.ub	r8,r6[0x2]
800030fc:	30 2b       	mov	r11,2
800030fe:	ee cc ff fc 	sub	r12,r7,-4
80003102:	cc be       	rcall	80002e98 <disp_i2s>
80003104:	30 19       	mov	r9,1
80003106:	ae e5       	st.b	r7[0x6],r5
		buf[6] = '.';
		disp_i2s(buf + 7, 2, 10, 1, version_info[3]);
80003108:	30 aa       	mov	r10,10
		buf[0] = image;
		buf[1] = '.';
		disp_i2s(buf + 2, 1, 10, 1, version_info[1]);
		buf[3] = '.';
		disp_i2s(buf + 4, 2, 10, 1, version_info[2]);
		buf[6] = '.';
8000310a:	0d b8       	ld.ub	r8,r6[0x3]
		disp_i2s(buf + 7, 2, 10, 1, version_info[3]);
8000310c:	30 2b       	mov	r11,2
8000310e:	ee cc ff f9 	sub	r12,r7,-7
80003112:	cc 3e       	rcall	80002e98 <disp_i2s>
80003114:	30 08       	mov	r8,0
80003116:	ef 64 00 09 	st.b	r7[9],r4
		buf[9] = maturity;
		buf[10] = 0;
8000311a:	ef 68 00 0a 	st.b	r7[10],r8
		disp_i2s(buf + 2, 1, 10, 1, version_info[1]);
		buf[3] = '.';
		disp_i2s(buf + 4, 2, 10, 1, version_info[2]);
		buf[6] = '.';
		disp_i2s(buf + 7, 2, 10, 1, version_info[3]);
		buf[9] = maturity;
8000311e:	d8 22       	popm	r4-r7,pc
		buf[10] = 0;
80003120:	36 54       	mov	r4,101
80003122:	cd fb       	rjmp	800030e0 <version2string+0x34>
}
80003124:	f1 d4 c0 44 	bfextu	r8,r4,0x2,0x4
			case SOFTWARE_IMAGE_SYSTEM: // System image
			image = SOFTWARE_IMAGE_SYSTEM_LETTERS[ (version_info[0] & 0x3C) >> 2 ]; 
			break;
		}
		
		switch(version_info[0] & 0xC0)
80003128:	48 39       	lddpc	r9,80003134 <version2string+0x88>
			break;
			case SOFTWARE_IMAGE_UPDATER:
			image = 'U'; // Updater image
			break;
			case SOFTWARE_IMAGE_SYSTEM: // System image
			image = SOFTWARE_IMAGE_SYSTEM_LETTERS[ (version_info[0] & 0x3C) >> 2 ]; 
8000312a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000312e:	cc eb       	rjmp	800030ca <version2string+0x1e>
80003130:	35 58       	mov	r8,85
80003132:	cc cb       	rjmp	800030ca <version2string+0x1e>
80003134:	80 00       	ld.sh	r0,r0[0x0]
static void version2string (char * buf, const unsigned char * version_info)
{
		char image = '?';
		char maturity = 0;
		
		switch(version_info[0] & 0x03)
80003136:	44 d8       	lddsp	r8,sp[0x134]

80003138 <main>:
			case SOFTWARE_IMAGE_PHY:
			image = 'P'; // PHY image
			break;
			case SOFTWARE_IMAGE_UPDATER:
			image = 'U'; // Updater image
			break;
80003138:	d4 21       	pushm	r4-r7,lr
8000313a:	20 bd       	sub	sp,44
8000313c:	e0 69 10 00 	mov	r9,4096
80003140:	ea 19 55 00 	orh	r9,0x5500
	return 1;
}

int main (void)
{
	AVR32_WDT.ctrl = 0x55001000; // turn off watchdog
80003144:	fe 78 0d 30 	mov	r8,-62160
80003148:	91 09       	st.w	r8[0x0],r9
	AVR32_WDT.ctrl = 0xAA001000;
8000314a:	e0 69 10 00 	mov	r9,4096
8000314e:	ea 19 aa 00 	orh	r9,0xaa00
	gpio_enable_gpio_pin(BOOTLOADER2_PIN);
80003152:	31 2c       	mov	r12,18
}

int main (void)
{
	AVR32_WDT.ctrl = 0x55001000; // turn off watchdog
	AVR32_WDT.ctrl = 0xAA001000;
80003154:	91 09       	st.w	r8[0x0],r9
	gpio_enable_gpio_pin(BOOTLOADER2_PIN);
80003156:	fe b0 fb 9a 	rcall	8000288a <gpio_enable_gpio_pin>
	gpio_configure_pin(BOOTLOADER2_PIN, GPIO_DIR_INPUT | GPIO_PULL_UP);
8000315a:	30 4b       	mov	r11,4
8000315c:	31 2c       	mov	r12,18
8000315e:	fe b0 fb a1 	rcall	800028a0 <gpio_configure_pin>


	idle_counter = 0;
80003162:	fe f8 02 26 	ld.w	r8,pc[550]

static int check_pending_system_update(void)
{
	struct staging_area_info * info = STAGING_AREA_INFO_ADDRESS;
	
	num_update_blocks = (info->num_blocks_hi << 8) | info->num_blocks_lo;
80003166:	e0 6b f6 00 	mov	r11,62976
8000316a:	ea 1b 80 07 	orh	r11,0x8007
	AVR32_WDT.ctrl = 0xAA001000;
	gpio_enable_gpio_pin(BOOTLOADER2_PIN);
	gpio_configure_pin(BOOTLOADER2_PIN, GPIO_DIR_INPUT | GPIO_PULL_UP);


	idle_counter = 0;
8000316e:	30 07       	mov	r7,0

static int check_pending_system_update(void)
{
	struct staging_area_info * info = STAGING_AREA_INFO_ADDRESS;
	
	num_update_blocks = (info->num_blocks_hi << 8) | info->num_blocks_lo;
80003170:	fe f5 02 1c 	ld.w	r5,pc[540]
	AVR32_WDT.ctrl = 0xAA001000;
	gpio_enable_gpio_pin(BOOTLOADER2_PIN);
	gpio_configure_pin(BOOTLOADER2_PIN, GPIO_DIR_INPUT | GPIO_PULL_UP);


	idle_counter = 0;
80003174:	91 07       	st.w	r8[0x0],r7

static int check_pending_system_update(void)
{
	struct staging_area_info * info = STAGING_AREA_INFO_ADDRESS;
	
	num_update_blocks = (info->num_blocks_hi << 8) | info->num_blocks_lo;
80003176:	17 c9       	ld.ub	r9,r11[0x4]
80003178:	17 d8       	ld.ub	r8,r11[0x5]
8000317a:	f1 e9 10 88 	or	r8,r8,r9<<0x8
8000317e:	8b 08       	st.w	r5[0x0],r8
	
	if ((num_update_blocks < 1) || (num_update_blocks > STAGING_AREA_MAX_BLOCKS)) // too small or too big
80003180:	20 18       	sub	r8,1
80003182:	e0 48 01 e6 	cp.w	r8,486
80003186:	e0 88 00 cd 	brls	80003320 <main+0x1e8>
	
	char buf[20];
	
	version2string(buf, info->version_info);
	
	if ((buf[0] == 'U') || (buf[0] == 'P') || (buf[0] == '?')) // not a system image in the staging area
8000318a:	30 08       	mov	r8,0


	idle_counter = 0;
	
	
	do_system_update = check_pending_system_update();
8000318c:	fe f7 02 04 	ld.w	r7,pc[516]
	
	
	if ((gpio_get_pin_value( BOOTLOADER2_PIN ) != 0)  // key not pressed
80003190:	31 2c       	mov	r12,18


	idle_counter = 0;
	
	
	do_system_update = check_pending_system_update();
80003192:	8f 08       	st.w	r7[0x0],r8
	
	
	if ((gpio_get_pin_value( BOOTLOADER2_PIN ) != 0)  // key not pressed
80003194:	fe b0 fb c6 	rcall	80002920 <gpio_get_pin_value>
80003198:	c0 50       	breq	800031a2 <main+0x6a>
8000319a:	6e 08       	ld.w	r8,r7[0x0]
8000319c:	58 08       	cp.w	r8,0
8000319e:	e0 80 00 e4 	breq	80003366 <main+0x22e>
	{
		start_system_software();
	}
	
	
	board_init();
800031a2:	fe b0 fd 1f 	rcall	80002be0 <board_init>
	
	disp_init();
800031a6:	fe b0 fd d9 	rcall	80002d58 <disp_init>
	
	serial_init(0, 115200);
800031aa:	e0 7b c2 00 	mov	r11,115200
800031ae:	30 0c       	mov	r12,0
800031b0:	fe b0 f9 00 	rcall	800023b0 <serial_init>
	
	
	char buf[20];
	
	version2string(buf, UPDATE_PROGRAM_START_ADDRESS + SOFTWARE_VERSION_IMAGE_OFFSET);
800031b4:	fa c6 ff ec 	sub	r6,sp,-20
800031b8:	e0 6b 20 04 	mov	r11,8196
800031bc:	ea 1b 80 00 	orh	r11,0x8000
800031c0:	0c 9c       	mov	r12,r6
800031c2:	c7 5f       	rcall	800030ac <version2string>
800031c4:	30 08       	mov	r8,0
	
	disp_prints_xy(0, 0, 0, DISP_FONT_6x8, 0, buf);
800031c6:	1a d6       	st.w	--sp,r6
800031c8:	10 9a       	mov	r10,r8
800031ca:	10 9b       	mov	r11,r8
800031cc:	10 9c       	mov	r12,r8
800031ce:	4f 29       	lddpc	r9,80003394 <main+0x25c>
800031d0:	c4 8e       	rcall	80002e60 <disp_prints_xy>
800031d2:	4f 24       	lddpc	r4,80003398 <main+0x260>
800031d4:	34 5a       	mov	r10,69
	
	memset(version_info, 0x20, sizeof version_info); // fill with spaces
800031d6:	32 0b       	mov	r11,32
800031d8:	08 9c       	mov	r12,r4
800031da:	e0 a0 04 02 	rcall	800039de <memset>
800031de:	30 fa       	mov	r10,15
800031e0:	e0 6b 02 04 	mov	r11,516
	memcpy(version_info + ((sizeof version_info) - 15), (unsigned char *) 0x80800204, 15);
800031e4:	ea 1b 80 80 	orh	r11,0x8080
800031e8:	e8 cc ff ca 	sub	r12,r4,-54
800031ec:	e0 a0 03 55 	rcall	80003896 <memcpy>
800031f0:	35 59       	mov	r9,85
800031f2:	2f fd       	sub	sp,-4
800031f4:	4e a8       	lddpc	r8,8000339c <main+0x264>
800031f6:	08 c9       	st.b	r4++,r9
800031f8:	2f f8       	sub	r8,-1
	const char * p = "UP4DAR Updater ";
	char * p2 = (char *) version_info;
	
	while(*p) // copy string
	{
		*p2 = *p;
800031fa:	11 89       	ld.ub	r9,r8[0x0]
		p++;
800031fc:	58 09       	cp.w	r9,0
				// CPU serial number
	
	const char * p = "UP4DAR Updater ";
	char * p2 = (char *) version_info;
	
	while(*p) // copy string
800031fe:	cf c1       	brne	800031f6 <main+0xbe>
80003200:	fb 38 00 14 	ld.ub	r8,sp[20]
		p2++;
	}
	
	p = buf;
	
	while(*p) // copy version number
80003204:	58 08       	cp.w	r8,0
80003206:	c0 70       	breq	80003214 <main+0xdc>
80003208:	0c 99       	mov	r9,r6
8000320a:	08 c8       	st.b	r4++,r8
8000320c:	2f f9       	sub	r9,-1
	{
		*p2 = *p;
8000320e:	13 88       	ld.ub	r8,r9[0x0]
		p++;
80003210:	58 08       	cp.w	r8,0
		p2++;
	}
	
	p = buf;
	
	while(*p) // copy version number
80003212:	cf c1       	brne	8000320a <main+0xd2>
80003214:	e0 6b 50 04 	mov	r11,20484
		*p2 = *p;
		p++;
		p2++;
	}
	
	version2string(buf, SYSTEM_PROGRAM_START_ADDRESS + SOFTWARE_VERSION_IMAGE_OFFSET);
80003218:	ea 1b 80 00 	orh	r11,0x8000
8000321c:	0c 9c       	mov	r12,r6
8000321e:	c4 7f       	rcall	800030ac <version2string>
80003220:	fb 38 00 14 	ld.ub	r8,sp[20]
80003224:	35 09       	mov	r9,80
	
	if ((buf[0] != 'U') && (buf[0] != 'P'))
80003226:	35 5a       	mov	r10,85
80003228:	f2 08 18 00 	cp.b	r8,r9
8000322c:	5f 19       	srne	r9
8000322e:	f4 08 18 00 	cp.b	r8,r10
80003232:	5f 18       	srne	r8
80003234:	f3 e8 00 08 	and	r8,r9,r8
80003238:	e0 81 00 9d 	brne	80003372 <main+0x23a>
8000323c:	6e 07       	ld.w	r7,r7[0x0]
8000323e:	58 07       	cp.w	r7,0
80003240:	c4 f0       	breq	800032de <main+0x1a6>
	{
		disp_prints_xy(0, 0, 8, DISP_FONT_6x8, 0, buf);
	}		
	
	if (do_system_update != 0)
80003242:	4d 8c       	lddpc	r12,800033a0 <main+0x268>
80003244:	fe b0 f8 fc 	rcall	8000243c <SHA1Reset>
	{	
		// disp_prints_xy(0, 0, 48, DISP_FONT_6x8, 0, "New System Image:");
	
		SHA1Reset(&ctx1);
80003248:	e0 6b 28 00 	mov	r11,10240
8000324c:	ea 1b 80 04 	orh	r11,0x8004
		SHA1Input(&ctx1, STAGING_AREA_ADDRESS, num_update_blocks * FLASH_BLOCK_SIZE);
80003250:	6a 0a       	ld.w	r10,r5[0x0]
80003252:	4d 4c       	lddpc	r12,800033a0 <main+0x268>
80003254:	a9 7a       	lsl	r10,0x9
80003256:	fe b0 f9 ff 	rcall	80002654 <SHA1Input>
8000325a:	4d 2c       	lddpc	r12,800033a0 <main+0x268>
8000325c:	fe b0 fa b2 	rcall	800027c0 <SHA1Result>
		SHA1Result(&ctx1);
80003260:	31 4a       	mov	r10,20
80003262:	e0 6b f6 06 	mov	r11,62982
	
		if (memcmp(ctx1.Message_Digest, STAGING_AREA_INFO_ADDRESS->sha1sum, SHA1SUM_SIZE) != 0) // checksum not correct
80003266:	ea 1b 80 07 	orh	r11,0x8007
8000326a:	4c ec       	lddpc	r12,800033a0 <main+0x268>
8000326c:	e0 a0 03 02 	rcall	80003870 <memcmp>
80003270:	18 97       	mov	r7,r12
80003272:	c6 f1       	brne	80003350 <main+0x218>
80003274:	18 98       	mov	r8,r12
80003276:	18 9b       	mov	r11,r12
80003278:	4c 79       	lddpc	r9,80003394 <main+0x25c>
		{
			disp_prints_xy(0, 0, 48, DISP_FONT_6x8, 0, "Checksum not correct!");
		}
		else
		{
			disp_prints_xy(0, 0, 48, DISP_FONT_6x8, 0, "New System Image:");
8000327a:	33 0a       	mov	r10,48
8000327c:	4c a5       	lddpc	r5,800033a4 <main+0x26c>
8000327e:	1a d5       	st.w	--sp,r5
80003280:	fe b0 fd f0 	rcall	80002e60 <disp_prints_xy>
80003284:	4c 28       	lddpc	r8,8000338c <main+0x254>
80003286:	30 19       	mov	r9,1
80003288:	70 0a       	ld.w	r10,r8[0x0]
			
			flashc_memcpy(SYSTEM_PROGRAM_START_ADDRESS, STAGING_AREA_ADDRESS,
8000328a:	e0 6b 28 00 	mov	r11,10240
8000328e:	ea 1b 80 04 	orh	r11,0x8004
80003292:	a9 7a       	lsl	r10,0x9
80003294:	e0 6c 50 00 	mov	r12,20480
80003298:	ea 1c 80 00 	orh	r12,0x8000
8000329c:	fe b0 f7 36 	rcall	80002108 <flashc_memcpy>
800032a0:	e0 6b 50 04 	mov	r11,20484
800032a4:	ea 1b 80 00 	orh	r11,0x8000
				num_update_blocks * FLASH_BLOCK_SIZE, true);
			
			version2string(buf, SYSTEM_PROGRAM_START_ADDRESS + SOFTWARE_VERSION_IMAGE_OFFSET);
800032a8:	0c 9c       	mov	r12,r6
800032aa:	c0 1f       	rcall	800030ac <version2string>
800032ac:	0e 98       	mov	r8,r7
800032ae:	1a d6       	st.w	--sp,r6
800032b0:	4b 99       	lddpc	r9,80003394 <main+0x25c>
800032b2:	33 8a       	mov	r10,56
			disp_prints_xy(0, 0, 56, DISP_FONT_6x8, 0, buf);
800032b4:	0e 9b       	mov	r11,r7
800032b6:	0e 9c       	mov	r12,r7
800032b8:	fe b0 fd d4 	rcall	80002e60 <disp_prints_xy>
800032bc:	2f ed       	sub	sp,-8
800032be:	30 08       	mov	r8,0
800032c0:	30 19       	mov	r9,1
800032c2:	fa cb ff d4 	sub	r11,sp,-44
		}
			
		unsigned char d = 0;
800032c6:	12 9a       	mov	r10,r9
		flashc_memcpy(STAGING_AREA_INFO_ADDRESS, & d, 1, true); // erase info
800032c8:	16 f8       	st.b	--r11,r8
			
			version2string(buf, SYSTEM_PROGRAM_START_ADDRESS + SOFTWARE_VERSION_IMAGE_OFFSET);
			disp_prints_xy(0, 0, 56, DISP_FONT_6x8, 0, buf);
		}
			
		unsigned char d = 0;
800032ca:	e0 6c f6 00 	mov	r12,62976
		flashc_memcpy(STAGING_AREA_INFO_ADDRESS, & d, 1, true); // erase info
800032ce:	ea 1c 80 07 	orh	r12,0x8007
800032d2:	fe b0 f7 1b 	rcall	80002108 <flashc_memcpy>
800032d6:	30 59       	mov	r9,5
800032d8:	4b 48       	lddpc	r8,800033a8 <main+0x270>
800032da:	91 09       	st.w	r8[0x0],r9
800032dc:	c1 d8       	rjmp	80003316 <main+0x1de>
		
		timeout_counter = 5;
800032de:	0e 98       	mov	r8,r7
800032e0:	4a d9       	lddpc	r9,80003394 <main+0x25c>
800032e2:	32 0a       	mov	r10,32
800032e4:	0e 9b       	mov	r11,r7
	}
	else
	{
		disp_prints_xy(0, 0, 32, DISP_FONT_6x8, 0, "(115200 Baud 8N1)");
800032e6:	0e 9c       	mov	r12,r7
800032e8:	4b 16       	lddpc	r6,800033ac <main+0x274>
800032ea:	1a d6       	st.w	--sp,r6
800032ec:	fe b0 fd ba 	rcall	80002e60 <disp_prints_xy>
800032f0:	0e 98       	mov	r8,r7
800032f2:	4a 99       	lddpc	r9,80003394 <main+0x25c>
800032f4:	33 0a       	mov	r10,48
800032f6:	0e 9b       	mov	r11,r7
		disp_prints_xy(0, 0, 48, DISP_FONT_6x8, 0, "RxOK:");
800032f8:	0e 9c       	mov	r12,r7
800032fa:	4a e6       	lddpc	r6,800033b0 <main+0x278>
800032fc:	1a d6       	st.w	--sp,r6
800032fe:	fe b0 fd b1 	rcall	80002e60 <disp_prints_xy>
80003302:	4a d9       	lddpc	r9,800033b4 <main+0x27c>
80003304:	0e 98       	mov	r8,r7
80003306:	1a d9       	st.w	--sp,r9
80003308:	33 8a       	mov	r10,56
		disp_prints_xy(0, 0, 56, DISP_FONT_6x8, 0, "RxError:");
8000330a:	4a 39       	lddpc	r9,80003394 <main+0x25c>
8000330c:	0e 9b       	mov	r11,r7
8000330e:	0e 9c       	mov	r12,r7
80003310:	fe b0 fd a8 	rcall	80002e60 <disp_prints_xy>
80003314:	2f dd       	sub	sp,-12
80003316:	fe cc fe ee 	sub	r12,pc,-274
8000331a:	c3 de       	rcall	80002f94 <disp_main_loop>
8000331c:	2f 5d       	sub	sp,-44
	}
	
	disp_main_loop( idle_proc );
8000331e:	d8 2a       	popm	r4-r7,pc,r12=0
80003320:	1a 9c       	mov	r12,sp
80003322:	cc 5e       	rcall	800030ac <version2string>
}
80003324:	35 09       	mov	r9,80
80003326:	1b 88       	ld.ub	r8,sp[0x0]
		return 0;
	}
	
	char buf[20];
	
	version2string(buf, info->version_info);
80003328:	f2 08 18 00 	cp.b	r8,r9
8000332c:	5f 0a       	sreq	r10
	
	if ((buf[0] == 'U') || (buf[0] == 'P') || (buf[0] == '?')) // not a system image in the staging area
8000332e:	35 59       	mov	r9,85
80003330:	f2 08 18 00 	cp.b	r8,r9
80003334:	5f 09       	sreq	r9
80003336:	f5 e9 10 09 	or	r9,r10,r9
8000333a:	ee 09 18 00 	cp.b	r9,r7
8000333e:	fe 91 ff 26 	brne	8000318a <main+0x52>
80003342:	33 f9       	mov	r9,63
80003344:	f2 08 18 00 	cp.b	r8,r9
80003348:	fe 90 ff 21 	breq	8000318a <main+0x52>
8000334c:	30 18       	mov	r8,1
8000334e:	c1 fb       	rjmp	8000318c <main+0x54>
80003350:	49 a9       	lddpc	r9,800033b8 <main+0x280>
80003352:	30 08       	mov	r8,0
80003354:	1a d9       	st.w	--sp,r9
80003356:	33 0a       	mov	r10,48
80003358:	48 f9       	lddpc	r9,80003394 <main+0x25c>
		SHA1Input(&ctx1, STAGING_AREA_ADDRESS, num_update_blocks * FLASH_BLOCK_SIZE);
		SHA1Result(&ctx1);
	
		if (memcmp(ctx1.Message_Digest, STAGING_AREA_INFO_ADDRESS->sha1sum, SHA1SUM_SIZE) != 0) // checksum not correct
		{
			disp_prints_xy(0, 0, 48, DISP_FONT_6x8, 0, "Checksum not correct!");
8000335a:	10 9b       	mov	r11,r8
8000335c:	10 9c       	mov	r12,r8
8000335e:	fe b0 fd 81 	rcall	80002e60 <disp_prints_xy>
80003362:	2f fd       	sub	sp,-4
80003364:	ca db       	rjmp	800032be <main+0x186>
80003366:	fc 10 80 00 	movh	r0,0x8000
8000336a:	e8 10 50 00 	orl	r0,0x5000
8000336e:	00 9f       	mov	pc,r0


static void start_system_software(void)
{
		
		asm volatile (
80003370:	c1 9b       	rjmp	800031a2 <main+0x6a>
80003372:	30 08       	mov	r8,0
80003374:	1a d6       	st.w	--sp,r6
80003376:	48 89       	lddpc	r9,80003394 <main+0x25c>
80003378:	30 8a       	mov	r10,8
8000337a:	10 9b       	mov	r11,r8
	
	version2string(buf, SYSTEM_PROGRAM_START_ADDRESS + SOFTWARE_VERSION_IMAGE_OFFSET);
	
	if ((buf[0] != 'U') && (buf[0] != 'P'))
	{
		disp_prints_xy(0, 0, 8, DISP_FONT_6x8, 0, buf);
8000337c:	10 9c       	mov	r12,r8
8000337e:	fe b0 fd 71 	rcall	80002e60 <disp_prints_xy>
80003382:	2f fd       	sub	sp,-4
80003384:	c5 cb       	rjmp	8000323c <main+0x104>
80003386:	d7 03       	nop
80003388:	00 00       	add	r0,r0
8000338a:	0c 08       	add	r8,r6
8000338c:	00 00       	add	r0,r0
8000338e:	0c 0c       	add	r12,r6
80003390:	00 00       	add	r0,r0
80003392:	0c 10       	sub	r0,r6
80003394:	00 00       	add	r0,r0
80003396:	05 0c       	ld.w	r12,r2++
80003398:	00 00       	add	r0,r0
8000339a:	0b b8       	ld.ub	r8,r5[0x3]
8000339c:	80 00       	ld.sh	r0,r0[0x0]
8000339e:	44 ec       	lddsp	r12,sp[0x138]
800033a0:	00 00       	add	r0,r0
800033a2:	0a 10       	sub	r0,r5
800033a4:	80 00       	ld.sh	r0,r0[0x0]
800033a6:	45 14       	lddsp	r4,sp[0x144]
800033a8:	00 00       	add	r0,r0
800033aa:	05 20       	ld.uh	r0,r2++
800033ac:	80 00       	ld.sh	r0,r0[0x0]
800033ae:	45 28       	lddsp	r8,sp[0x148]
800033b0:	80 00       	ld.sh	r0,r0[0x0]
800033b2:	45 3c       	lddsp	r12,sp[0x14c]
800033b4:	80 00       	ld.sh	r0,r0[0x0]
800033b6:	45 44       	lddsp	r4,sp[0x150]
800033b8:	80 00       	ld.sh	r0,r0[0x0]
800033ba:	44 fc       	lddsp	r12,sp[0x13c]

800033bc <send_byte>:
800033bc:	eb cd 40 80 	pushm	r7,lr
800033c0:	18 97       	mov	r7,r12
800033c2:	59 0c       	cp.w	r12,16
800033c4:	c0 80       	breq	800033d4 <send_byte+0x18>
800033c6:	0e 9b       	mov	r11,r7
800033c8:	30 0c       	mov	r12,0
800033ca:	5c 5b       	castu.b	r11
800033cc:	fe b0 f7 90 	rcall	800022ec <serial_putc>
800033d0:	e3 cd 80 80 	ldm	sp++,r7,pc
800033d4:	18 9b       	mov	r11,r12
800033d6:	30 0c       	mov	r12,0
800033d8:	fe b0 f7 8a 	rcall	800022ec <serial_putc>
800033dc:	cf 5b       	rjmp	800033c6 <send_byte+0xa>
800033de:	d7 03       	nop

800033e0 <send_cmd>:
800033e0:	eb cd 40 e0 	pushm	r5-r7,lr
800033e4:	16 97       	mov	r7,r11
800033e6:	18 96       	mov	r6,r12
800033e8:	14 95       	mov	r5,r10
800033ea:	31 0b       	mov	r11,16
800033ec:	30 0c       	mov	r12,0
800033ee:	fe b0 f7 7f 	rcall	800022ec <serial_putc>
800033f2:	30 2b       	mov	r11,2
800033f4:	30 0c       	mov	r12,0
800033f6:	fe b0 f7 7b 	rcall	800022ec <serial_putc>
800033fa:	0c 9c       	mov	r12,r6
800033fc:	ce 0f       	rcall	800033bc <send_byte>
800033fe:	58 07       	cp.w	r7,0
80003400:	e0 8a 00 0a 	brle	80003414 <send_cmd+0x34>
80003404:	30 06       	mov	r6,0
80003406:	ea 06 07 0c 	ld.ub	r12,r5[r6]

	int i;
	
	for (i=0; i < len; i++)
	{
		send_byte(d[i]);
8000340a:	2f f6       	sub	r6,-1

	send_byte(cmd);

	int i;
	
	for (i=0; i < len; i++)
8000340c:	cd 8f       	rcall	800033bc <send_byte>
	{
		send_byte(d[i]);
8000340e:	0c 37       	cp.w	r7,r6
80003410:	fe 99 ff fb 	brgt	80003406 <send_cmd+0x26>

	send_byte(cmd);

	int i;
	
	for (i=0; i < len; i++)
80003414:	31 0b       	mov	r11,16
80003416:	30 0c       	mov	r12,0
	{
		send_byte(d[i]);
	}

	serial_putc(0, 0x10);
80003418:	fe b0 f7 6a 	rcall	800022ec <serial_putc>
8000341c:	30 3b       	mov	r11,3
8000341e:	30 0c       	mov	r12,0
	serial_putc(0, 0x03);
80003420:	fe b0 f7 66 	rcall	800022ec <serial_putc>
80003424:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80003428 <idle_proc>:
}
80003428:	eb cd 40 fc 	pushm	r2-r7,lr
8000342c:	20 ed       	sub	sp,56
8000342e:	fe f5 04 06 	ld.w	r5,pc[1030]
80003432:	6a 07       	ld.w	r7,r5[0x0]
	
	
	char buf[7];
	
	
	if (link_to_phy_mode == 1)
80003434:	58 17       	cp.w	r7,1
80003436:	c6 b0       	breq	8000350c <idle_proc+0xe4>
			}
		}			
	}
	
	
	if (serial_rx_char_available(0) != 0)
80003438:	30 0c       	mov	r12,0
8000343a:	fe b0 f7 4b 	rcall	800022d0 <serial_rx_char_available>
8000343e:	c3 81       	brne	800034ae <idle_proc+0x86>
			}
		}
	}		
	
	
	if (idle_counter == 0)
80003440:	fe f4 03 f8 	ld.w	r4,pc[1016]
80003444:	68 06       	ld.w	r6,r4[0x0]
80003446:	58 06       	cp.w	r6,0
80003448:	c0 c0       	breq	80003460 <idle_proc+0x38>
			{
			}				
			
		}
		
		timeout_counter --;
8000344a:	30 08       	mov	r8,0
{
	int i;
	
	for (i=0; i < 1000; i++)
	{
		asm volatile ("nop");
8000344c:	d7 03       	nop

static void delay_nop(void)
{
	int i;
	
	for (i=0; i < 1000; i++)
8000344e:	2f f8       	sub	r8,-1
80003450:	e0 48 03 e8 	cp.w	r8,1000
80003454:	cf c1       	brne	8000344c <idle_proc+0x24>
	}
	
	
	delay_nop();
	
	idle_counter --;
80003456:	20 16       	sub	r6,1
80003458:	89 06       	st.w	r4[0x0],r6
	
}
8000345a:	2f 2d       	sub	sp,-56
8000345c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
	}		
	
	
	if (idle_counter == 0)
	{
		idle_counter = 7000;
80003460:	e0 68 1b 58 	mov	r8,7000
		
		disp_i2s(buf, 2, 10, 0, timeout_counter);
80003464:	fa c3 ff d0 	sub	r3,sp,-48
80003468:	0c 99       	mov	r9,r6
8000346a:	fe f7 03 d2 	ld.w	r7,pc[978]
8000346e:	30 aa       	mov	r10,10
80003470:	30 2b       	mov	r11,2
80003472:	06 9c       	mov	r12,r3
	}		
	
	
	if (idle_counter == 0)
	{
		idle_counter = 7000;
80003474:	89 08       	st.w	r4[0x0],r8
		
		disp_i2s(buf, 2, 10, 0, timeout_counter);
80003476:	6e 08       	ld.w	r8,r7[0x0]
80003478:	fe b0 fd 10 	rcall	80002e98 <disp_i2s>
		disp_prints_xy(0, 116, 0, DISP_FONT_6x8, 0, buf);
8000347c:	0c 98       	mov	r8,r6
8000347e:	1a d3       	st.w	--sp,r3
80003480:	0c 9a       	mov	r10,r6
80003482:	0c 9c       	mov	r12,r6
80003484:	fe f9 03 bc 	ld.w	r9,pc[956]
80003488:	37 4b       	mov	r11,116
8000348a:	fe b0 fc eb 	rcall	80002e60 <disp_prints_xy>
		
		
		if (do_system_update == 0)
8000348e:	fe f8 03 b6 	ld.w	r8,pc[950]
80003492:	2f fd       	sub	sp,-4
80003494:	70 06       	ld.w	r6,r8[0x0]
80003496:	58 06       	cp.w	r6,0
80003498:	c4 f0       	breq	80003536 <idle_proc+0x10e>
			disp_prints_xy(0, 48, 56, DISP_FONT_6x8, 0, buf);
			
			disp_prints_xy(0, 0, 24, DISP_FONT_6x8, 0, (link_to_phy_mode == 1) ? "RS232 -> PHY   " : "RS232 -> SYSTEM");
		}
		
		if (timeout_counter < 0)
8000349a:	6e 08       	ld.w	r8,r7[0x0]
8000349c:	58 08       	cp.w	r8,0
8000349e:	e0 85 00 84 	brlt	800035a6 <idle_proc+0x17e>
			{
			}				
			
		}
		
		timeout_counter --;
800034a2:	20 18       	sub	r8,1
800034a4:	fe f9 03 98 	ld.w	r9,pc[920]
800034a8:	68 06       	ld.w	r6,r4[0x0]
800034aa:	93 08       	st.w	r9[0x0],r8
800034ac:	cc fb       	rjmp	8000344a <idle_proc+0x22>
	}
	
	
	if (serial_rx_char_available(0) != 0)
	{
		if (serial_getc(0, buf) == 1)
800034ae:	fa cb ff d0 	sub	r11,sp,-48
800034b2:	30 0c       	mov	r12,0
800034b4:	fe b0 f7 4a 	rcall	80002348 <serial_getc>
800034b8:	18 98       	mov	r8,r12
800034ba:	58 1c       	cp.w	r12,1
800034bc:	cc 21       	brne	80003440 <idle_proc+0x18>
		{
			if (link_to_phy_mode == 1)
800034be:	6a 09       	ld.w	r9,r5[0x0]
800034c0:	58 19       	cp.w	r9,1
800034c2:	e0 80 00 85 	breq	800035cc <idle_proc+0x1a4>
				serial_putc(1, buf[0]);
				timeout_counter = COMMAND_TIMEOUT_PHY;
			}
			else
			{
				if (do_system_update == 0)
800034c6:	fe f9 03 7e 	ld.w	r9,pc[894]
800034ca:	72 0b       	ld.w	r11,r9[0x0]
800034cc:	58 0b       	cp.w	r11,0
800034ce:	cb 91       	brne	80003440 <idle_proc+0x18>
}


static void input_rx_byte(unsigned char d)
{
	if (rx_escape)
800034d0:	fe fa 03 78 	ld.w	r10,pc[888]
			}
			else
			{
				if (do_system_update == 0)
				{
					input_rx_byte(buf[0]);
800034d4:	fb 39 00 30 	ld.ub	r9,sp[48]
}


static void input_rx_byte(unsigned char d)
{
	if (rx_escape)
800034d8:	74 0c       	ld.w	r12,r10[0x0]
800034da:	58 0c       	cp.w	r12,0
800034dc:	e0 80 00 81 	breq	800035de <idle_proc+0x1b6>
	{
		rx_escape = 0;
800034e0:	95 0b       	st.w	r10[0x0],r11
		
		switch (d)
800034e2:	30 3a       	mov	r10,3
800034e4:	f4 09 18 00 	cp.b	r9,r10
800034e8:	e0 80 00 9b 	breq	8000361e <idle_proc+0x1f6>
800034ec:	31 08       	mov	r8,16
800034ee:	f0 09 18 00 	cp.b	r9,r8
800034f2:	c7 a0       	breq	800035e6 <idle_proc+0x1be>
800034f4:	30 28       	mov	r8,2
800034f6:	f0 09 18 00 	cp.b	r9,r8
800034fa:	e0 80 00 ac 	breq	80003652 <idle_proc+0x22a>
			}				
			input_ptr = -1;
			break;
			
		default: // illegal character
			input_ptr = -1;
800034fe:	3f f9       	mov	r9,-1
80003500:	fe f8 03 4c 	ld.w	r8,pc[844]
80003504:	fe f7 03 38 	ld.w	r7,pc[824]
80003508:	91 09       	st.w	r8[0x0],r9
8000350a:	c8 28       	rjmp	8000360e <idle_proc+0x1e6>
	char buf[7];
	
	
	if (link_to_phy_mode == 1)
	{
		if (serial_rx_char_available(1) != 0)
8000350c:	0e 9c       	mov	r12,r7
8000350e:	fe b0 f6 e1 	rcall	800022d0 <serial_rx_char_available>
80003512:	c9 30       	breq	80003438 <idle_proc+0x10>
		{		
			if (serial_getc(1, buf) == 1)
80003514:	0e 9c       	mov	r12,r7
80003516:	fa cb ff d0 	sub	r11,sp,-48
8000351a:	fe b0 f7 17 	rcall	80002348 <serial_getc>
8000351e:	58 1c       	cp.w	r12,1
80003520:	c8 c1       	brne	80003438 <idle_proc+0x10>
			{
				serial_putc(0, buf[0]);
80003522:	fb 3b 00 30 	ld.ub	r11,sp[48]
80003526:	30 0c       	mov	r12,0
80003528:	fe b0 f6 e2 	rcall	800022ec <serial_putc>
				timeout_counter = COMMAND_TIMEOUT_PHY;
8000352c:	30 98       	mov	r8,9
8000352e:	fe f7 03 0e 	ld.w	r7,pc[782]
80003532:	8f 08       	st.w	r7[0x0],r8
80003534:	c8 2b       	rjmp	80003438 <idle_proc+0x10>
		disp_prints_xy(0, 116, 0, DISP_FONT_6x8, 0, buf);
		
		
		if (do_system_update == 0)
		{
			disp_i2s(buf, 6, 10, 0, serialRXOK);
80003536:	0c 99       	mov	r9,r6
80003538:	30 aa       	mov	r10,10
8000353a:	30 6b       	mov	r11,6
8000353c:	06 9c       	mov	r12,r3
8000353e:	fe f8 03 12 	ld.w	r8,pc[786]
80003542:	70 08       	ld.w	r8,r8[0x0]
80003544:	fe b0 fc aa 	rcall	80002e98 <disp_i2s>
			disp_prints_xy(0, 48, 48, DISP_FONT_6x8, 0, buf);
80003548:	33 0a       	mov	r10,48
8000354a:	1a d3       	st.w	--sp,r3
8000354c:	14 9b       	mov	r11,r10
8000354e:	0c 98       	mov	r8,r6
80003550:	fe f9 02 f0 	ld.w	r9,pc[752]
80003554:	0c 9c       	mov	r12,r6
80003556:	fe b0 fc 85 	rcall	80002e60 <disp_prints_xy>
			
			disp_i2s(buf, 6, 10, 0, serialRXError);
8000355a:	0c 99       	mov	r9,r6
8000355c:	30 aa       	mov	r10,10
8000355e:	30 6b       	mov	r11,6
80003560:	06 9c       	mov	r12,r3
80003562:	fe f8 02 f2 	ld.w	r8,pc[754]
80003566:	70 08       	ld.w	r8,r8[0x0]
80003568:	fe b0 fc 98 	rcall	80002e98 <disp_i2s>
			disp_prints_xy(0, 48, 56, DISP_FONT_6x8, 0, buf);
8000356c:	0c 98       	mov	r8,r6
8000356e:	1a d3       	st.w	--sp,r3
80003570:	fe f9 02 d0 	ld.w	r9,pc[720]
80003574:	33 8a       	mov	r10,56
80003576:	33 0b       	mov	r11,48
80003578:	0c 9c       	mov	r12,r6
8000357a:	fe b0 fc 73 	rcall	80002e60 <disp_prints_xy>
			
			disp_prints_xy(0, 0, 24, DISP_FONT_6x8, 0, (link_to_phy_mode == 1) ? "RS232 -> PHY   " : "RS232 -> SYSTEM");
8000357e:	6a 0b       	ld.w	r11,r5[0x0]
80003580:	fe fa 02 d8 	ld.w	r10,pc[728]
80003584:	fe f9 02 d8 	ld.w	r9,pc[728]
80003588:	58 1b       	cp.w	r11,1
8000358a:	f4 09 17 10 	movne	r9,r10
8000358e:	2f ed       	sub	sp,-8
80003590:	0c 98       	mov	r8,r6
80003592:	1a d9       	st.w	--sp,r9
80003594:	31 8a       	mov	r10,24
80003596:	fe f9 02 aa 	ld.w	r9,pc[682]
8000359a:	0c 9b       	mov	r11,r6
8000359c:	0c 9c       	mov	r12,r6
8000359e:	fe b0 fc 61 	rcall	80002e60 <disp_prints_xy>
800035a2:	2f fd       	sub	sp,-4
800035a4:	c7 bb       	rjmp	8000349a <idle_proc+0x72>
		}
		
		if (timeout_counter < 0)
		{
			
			serial_stop(0);
800035a6:	30 0c       	mov	r12,0
800035a8:	fe b0 f6 f0 	rcall	80002388 <serial_stop>
			serial_stop(1);
800035ac:	30 1c       	mov	r12,1
800035ae:	fe b0 f6 ed 	rcall	80002388 <serial_stop>
			
			AVR32_WDT.ctrl = 0x55001001; // turn on watchdog
800035b2:	fe 78 0d 30 	mov	r8,-62160
800035b6:	e0 69 10 01 	mov	r9,4097
800035ba:	ea 19 55 00 	orh	r9,0x5500
800035be:	91 09       	st.w	r8[0x0],r9
			AVR32_WDT.ctrl = 0xAA001001;
800035c0:	e0 69 10 01 	mov	r9,4097
800035c4:	ea 19 aa 00 	orh	r9,0xaa00
800035c8:	91 09       	st.w	r8[0x0],r9
800035ca:	c0 08       	rjmp	800035ca <idle_proc+0x1a2>
	{
		if (serial_getc(0, buf) == 1)
		{
			if (link_to_phy_mode == 1)
			{
				serial_putc(1, buf[0]);
800035cc:	fb 3b 00 30 	ld.ub	r11,sp[48]
800035d0:	fe b0 f6 8e 	rcall	800022ec <serial_putc>
				timeout_counter = COMMAND_TIMEOUT_PHY;
800035d4:	30 99       	mov	r9,9
800035d6:	fe f8 02 66 	ld.w	r8,pc[614]
800035da:	91 09       	st.w	r8[0x0],r9
800035dc:	c3 2b       	rjmp	80003440 <idle_proc+0x18>
			input_ptr = -1;
		}
	}
	else
	{
		if (d == 0x10)
800035de:	31 0b       	mov	r11,16
800035e0:	f6 09 18 00 	cp.b	r9,r11
800035e4:	c1 80       	breq	80003614 <idle_proc+0x1ec>
		{
			rx_escape = 1;
		}
		else
		{
			if (input_ptr >= 0)
800035e6:	fe f6 02 66 	ld.w	r6,pc[614]
800035ea:	6c 0a       	ld.w	r10,r6[0x0]
800035ec:	58 0a       	cp.w	r10,0
800035ee:	c0 e5       	brlt	8000360a <idle_proc+0x1e2>
			{
				input_data[input_ptr] = d;
				input_ptr++;
800035f0:	f4 c8 ff ff 	sub	r8,r10,-1
		}
		else
		{
			if (input_ptr >= 0)
			{
				input_data[input_ptr] = d;
800035f4:	fe fb 02 6c 	ld.w	r11,pc[620]
				input_ptr++;
800035f8:	8d 08       	st.w	r6[0x0],r8
		}
		else
		{
			if (input_ptr >= 0)
			{
				input_data[input_ptr] = d;
800035fa:	f6 0a 0b 09 	st.b	r11[r10],r9
		}	
	}
	
	if (input_ptr >= INPUT_DATA_BUFLEN)
	{
		input_ptr = -1;
800035fe:	e0 48 02 25 	cp.w	r8,549
80003602:	f9 b8 09 ff 	movgt	r8,-1
80003606:	ed f8 9a 00 	st.wgt	r6[0x0],r8
8000360a:	fe f7 02 32 	ld.w	r7,pc[562]
			else
			{
				if (do_system_update == 0)
				{
					input_rx_byte(buf[0]);
					timeout_counter = COMMAND_TIMEOUT;
8000360e:	33 b8       	mov	r8,59
80003610:	8f 08       	st.w	r7[0x0],r8
80003612:	c1 7b       	rjmp	80003440 <idle_proc+0x18>
	}
	else
	{
		if (d == 0x10)
		{
			rx_escape = 1;
80003614:	95 08       	st.w	r10[0x0],r8
80003616:	fe f6 02 36 	ld.w	r6,pc[566]
8000361a:	6c 08       	ld.w	r8,r6[0x0]
8000361c:	cf 1b       	rjmp	800035fe <idle_proc+0x1d6>
		case 0x02: // STX
			input_ptr = 0;
			break;
			
		case 0x03:  //ETX
			if (input_ptr > 0)
8000361e:	fe f6 02 2e 	ld.w	r6,pc[558]
80003622:	6c 0a       	ld.w	r10,r6[0x0]
80003624:	58 0a       	cp.w	r10,0
80003626:	e0 8a 00 12 	brle	8000364a <idle_proc+0x222>
static unsigned char version_info[69];

static void process_packet (int len)
{
	
	switch (input_data[0])
8000362a:	fe fb 02 36 	ld.w	r11,pc[566]
8000362e:	3e 2c       	mov	r12,-30
80003630:	17 89       	ld.ub	r9,r11[0x0]
80003632:	f8 09 18 00 	cp.b	r9,r12
80003636:	c3 40       	breq	8000369e <idle_proc+0x276>
80003638:	e0 8b 00 23 	brhi	8000367e <idle_proc+0x256>
8000363c:	f0 09 18 00 	cp.b	r9,r8
80003640:	c1 90       	breq	80003672 <idle_proc+0x24a>
80003642:	3e 18       	mov	r8,-31
80003644:	f0 09 18 00 	cp.b	r9,r8
80003648:	c0 a0       	breq	8000365c <idle_proc+0x234>
8000364a:	4f d7       	lddpc	r7,8000383c <idle_proc+0x414>
8000364c:	3f f8       	mov	r8,-1
		case 0x03:  //ETX
			if (input_ptr > 0)
			{
				process_packet(input_ptr);
			}				
			input_ptr = -1;
8000364e:	8d 08       	st.w	r6[0x0],r8
80003650:	cd fb       	rjmp	8000360e <idle_proc+0x1e6>
80003652:	fe f8 01 fa 	ld.w	r8,pc[506]
				input_ptr++;
			}
			break;
			
		case 0x02: // STX
			input_ptr = 0;
80003656:	4f a7       	lddpc	r7,8000383c <idle_proc+0x414>
80003658:	91 0b       	st.w	r8[0x0],r11
8000365a:	cd ab       	rjmp	8000360e <idle_proc+0x1e6>
8000365c:	30 0a       	mov	r10,0
			link_to_phy_mode = 1;
			serial_init(1, 115200);
			break;
			
		case 0xE1: // start upload
			send_cmd(0xE4, 0, 0);
8000365e:	e0 6c 00 e4 	mov	r12,228
80003662:	14 9b       	mov	r11,r10
80003664:	cb ee       	rcall	800033e0 <send_cmd>
80003666:	30 09       	mov	r9,0
80003668:	fe f8 01 fc 	ld.w	r8,pc[508]
			system_update_counter = 0;
8000366c:	4f 47       	lddpc	r7,8000383c <idle_proc+0x414>
8000366e:	91 09       	st.w	r8[0x0],r9
80003670:	ce eb       	rjmp	8000364c <idle_proc+0x224>
80003672:	4f ea       	lddpc	r10,80003868 <idle_proc+0x440>
80003674:	34 5b       	mov	r11,69
{
	
	switch (input_data[0])
	{
		case 0x01: // info request
			send_cmd(0x01, sizeof version_info, version_info);
80003676:	30 1c       	mov	r12,1
80003678:	cb 4e       	rcall	800033e0 <send_cmd>
8000367a:	4f 17       	lddpc	r7,8000383c <idle_proc+0x414>
8000367c:	ce 8b       	rjmp	8000364c <idle_proc+0x224>
8000367e:	3e 38       	mov	r8,-29
80003680:	f0 09 18 00 	cp.b	r9,r8
80003684:	c2 b0       	breq	800036da <idle_proc+0x2b2>
static unsigned char version_info[69];

static void process_packet (int len)
{
	
	switch (input_data[0])
80003686:	3e f8       	mov	r8,-17
80003688:	f0 09 18 00 	cp.b	r9,r8
8000368c:	cd f1       	brne	8000364a <idle_proc+0x222>
8000368e:	30 1c       	mov	r12,1
80003690:	e0 7b c2 00 	mov	r11,115200
80003694:	8b 0c       	st.w	r5[0x0],r12
		case 0x01: // info request
			send_cmd(0x01, sizeof version_info, version_info);
			break;
			
		case 0xEF: // switch to PHY
			link_to_phy_mode = 1;
80003696:	fe b0 f6 8d 	rcall	800023b0 <serial_init>
			serial_init(1, 115200);
8000369a:	4e 97       	lddpc	r7,8000383c <idle_proc+0x414>
		case 0x01: // info request
			send_cmd(0x01, sizeof version_info, version_info);
			break;
			
		case 0xEF: // switch to PHY
			link_to_phy_mode = 1;
8000369c:	cd 8b       	rjmp	8000364c <idle_proc+0x224>
			serial_init(1, 115200);
8000369e:	e0 4a 02 01 	cp.w	r10,513
800036a2:	cd 41       	brne	8000364a <idle_proc+0x222>
800036a4:	4f 04       	lddpc	r4,80003864 <idle_proc+0x43c>
			send_cmd(0xE4, 0, 0);
			system_update_counter = 0;
			break;
			
		case 0xE2: // fw data
			if ((len == (FLASH_BLOCK_SIZE + 1)) && (system_update_counter >= 0))
800036a6:	68 0c       	ld.w	r12,r4[0x0]
800036a8:	58 0c       	cp.w	r12,0
800036aa:	cd 05       	brlt	8000364a <idle_proc+0x222>
800036ac:	e0 68 28 00 	mov	r8,10240
800036b0:	ea 18 80 04 	orh	r8,0x8004
			{
				flashc_memcpy(STAGING_AREA_ADDRESS + (system_update_counter * FLASH_BLOCK_SIZE),
800036b4:	a9 7c       	lsl	r12,0x9
800036b6:	2f fb       	sub	r11,-1
800036b8:	10 0c       	add	r12,r8
800036ba:	30 19       	mov	r9,1
800036bc:	e0 6a 02 00 	mov	r10,512
800036c0:	fe b0 f5 24 	rcall	80002108 <flashc_memcpy>
800036c4:	68 08       	ld.w	r8,r4[0x0]
800036c6:	2f f8       	sub	r8,-1
800036c8:	89 08       	st.w	r4[0x0],r8
800036ca:	e0 48 01 e6 	cp.w	r8,486
					input_data + 1, FLASH_BLOCK_SIZE, true);
				
				system_update_counter++;
800036ce:	e0 8a 00 0f 	brle	800036ec <idle_proc+0x2c4>
				
				if (system_update_counter < STAGING_AREA_MAX_BLOCKS)
800036d2:	3f f9       	mov	r9,-1
800036d4:	4e 48       	lddpc	r8,80003864 <idle_proc+0x43c>
800036d6:	91 09       	st.w	r8[0x0],r9
800036d8:	cb 9b       	rjmp	8000364a <idle_proc+0x222>
					unsigned char d = 0x01;
					send_cmd(0xD4, 1, &d); // cmd exec OK
				}
				else
				{
					system_update_counter = -1; // too much data sent
800036da:	4e 34       	lddpc	r4,80003864 <idle_proc+0x43c>
800036dc:	68 07       	ld.w	r7,r4[0x0]
800036de:	58 a7       	cp.w	r7,10
800036e0:	e0 89 00 10 	brgt	80003700 <idle_proc+0x2d8>
				}
			}
			break;
			
		case 0xE3: // end of upload
			if (system_update_counter > 10) // some minimum size
800036e4:	4d 67       	lddpc	r7,8000383c <idle_proc+0x414>
800036e6:	3f f8       	mov	r8,-1
800036e8:	89 08       	st.w	r4[0x0],r8
800036ea:	cb 1b       	rjmp	8000364c <idle_proc+0x224>
800036ec:	30 18       	mov	r8,1
				{
					unsigned char d = 0x03;
					send_cmd(0xD4, 1, &d); // cmd exec: syntax error
				}					
			}
			system_update_counter = -1;
800036ee:	fa ca ff c8 	sub	r10,sp,-56
800036f2:	30 1b       	mov	r11,1
				
				system_update_counter++;
				
				if (system_update_counter < STAGING_AREA_MAX_BLOCKS)
				{
					unsigned char d = 0x01;
800036f4:	14 f8       	st.b	--r10,r8
800036f6:	e0 6c 00 d4 	mov	r12,212
					send_cmd(0xD4, 1, &d); // cmd exec OK
800036fa:	c7 3e       	rcall	800033e0 <send_cmd>
				
				system_update_counter++;
				
				if (system_update_counter < STAGING_AREA_MAX_BLOCKS)
				{
					unsigned char d = 0x01;
800036fc:	4d 07       	lddpc	r7,8000383c <idle_proc+0x414>
					send_cmd(0xD4, 1, &d); // cmd exec OK
800036fe:	ca 7b       	rjmp	8000364c <idle_proc+0x224>
80003700:	4d b3       	lddpc	r3,8000386c <idle_proc+0x444>
80003702:	06 9c       	mov	r12,r3
80003704:	fe b0 f6 9c 	rcall	8000243c <SHA1Reset>
80003708:	20 17       	sub	r7,1
static int checksum_is_correct(int image_len )
{



	SHA1Reset(&ctx1);
8000370a:	06 9c       	mov	r12,r3
8000370c:	ee 02 15 09 	lsl	r2,r7,0x9
80003710:	e0 6b 28 00 	mov	r11,10240
	SHA1Input(&ctx1, STAGING_AREA_ADDRESS, image_len);
80003714:	ea 1b 80 04 	orh	r11,0x8004
80003718:	06 97       	mov	r7,r3
8000371a:	04 9a       	mov	r10,r2
8000371c:	fe b0 f7 9c 	rcall	80002654 <SHA1Input>
80003720:	06 9c       	mov	r12,r3
	SHA1Result(&ctx1);
80003722:	fe b0 f8 4f 	rcall	800027c0 <SHA1Result>
{



	SHA1Reset(&ctx1);
	SHA1Input(&ctx1, STAGING_AREA_ADDRESS, image_len);
80003726:	fa cc ff e4 	sub	r12,sp,-28
	SHA1Result(&ctx1);
8000372a:	2e c3       	sub	r3,-20
8000372c:	0e 9a       	mov	r10,r7
8000372e:	18 98       	mov	r8,r12
80003730:	15 09       	ld.w	r9,r10++
80003732:	f2 0b 16 18 	lsr	r11,r9,0x18
	}
}



static void idle_proc(void)
80003736:	b0 b9       	st.b	r8[0x3],r9



	SHA1Reset(&ctx1);
	SHA1Input(&ctx1, STAGING_AREA_ADDRESS, image_len);
	SHA1Result(&ctx1);
80003738:	b0 8b       	st.b	r8[0x0],r11
	unsigned char sha1_buf_1[20];
	

	for (i=0; i < 5; i++)
	{
		unsigned int d = ctx1.Message_Digest[i];
8000373a:	f2 0b 16 10 	lsr	r11,r9,0x10


		sha1_buf_1[i*4 + 0] = ((d >> 24) & 0xFF);
8000373e:	a9 89       	lsr	r9,0x8
		sha1_buf_1[i*4 + 1] = ((d >> 16) & 0xFF);
		sha1_buf_1[i*4 + 2] = ((d >>  8) & 0xFF);
		sha1_buf_1[i*4 + 3] = ((d      ) & 0xFF);
80003740:	b0 9b       	st.b	r8[0x1],r11
	for (i=0; i < 5; i++)
	{
		unsigned int d = ctx1.Message_Digest[i];


		sha1_buf_1[i*4 + 0] = ((d >> 24) & 0xFF);
80003742:	b0 a9       	st.b	r8[0x2],r9
		sha1_buf_1[i*4 + 1] = ((d >> 16) & 0xFF);
80003744:	2f c8       	sub	r8,-4
80003746:	06 3a       	cp.w	r10,r3
		sha1_buf_1[i*4 + 2] = ((d >>  8) & 0xFF);
80003748:	cf 41       	brne	80003730 <idle_proc+0x308>
	{
		unsigned int d = ctx1.Message_Digest[i];


		sha1_buf_1[i*4 + 0] = ((d >> 24) & 0xFF);
		sha1_buf_1[i*4 + 1] = ((d >> 16) & 0xFF);
8000374a:	30 0a       	mov	r10,0
		sha1_buf_1[i*4 + 2] = ((d >>  8) & 0xFF);
8000374c:	e0 68 28 00 	mov	r8,10240

	int i;
	unsigned char sha1_buf_1[20];
	

	for (i=0; i < 5; i++)
80003750:	ea 18 80 04 	orh	r8,0x8004
80003754:	14 9b       	mov	r11,r10
80003756:	10 02       	add	r2,r8
80003758:	14 99       	mov	r9,r10
8000375a:	05 88       	ld.ub	r8,r2[0x0]
8000375c:	f0 ce 00 30 	sub	lr,r8,48
80003760:	58 9e       	cp.w	lr,9
80003762:	e0 8b 00 1c 	brhi	8000379a <idle_proc+0x372>
static SHA1Context ctx1;


static int hex_value(int ch)
{
	if ((ch >= '0') && (ch <= '9'))
80003766:	1c 98       	mov	r8,lr
80003768:	58 0b       	cp.w	r11,0
8000376a:	c1 f1       	brne	800037a8 <idle_proc+0x380>
8000376c:	fa cb ff c8 	sub	r11,sp,-56
	{
		return ch - 48;
80003770:	14 0b       	add	r11,r10
	{
		int v = hex_value( STAGING_AREA_ADDRESS[image_len + i]);

		if (v >= 0)
		{
			if (nibble == 0)
80003772:	a5 68       	lsl	r8,0x4
80003774:	f7 68 ff c8 	st.b	r11[-56],r8
			{
				sha1_buf_2[count] = v << 4;
80003778:	30 1b       	mov	r11,1
8000377a:	2f f9       	sub	r9,-1
8000377c:	2f f2       	sub	r2,-1
8000377e:	e0 49 00 50 	cp.w	r9,80
80003782:	ce c1       	brne	8000375a <idle_proc+0x332>

	unsigned char sha1_buf_2[20];
	int count = 0;
	int nibble = 0;

	for (i=0; i < 80; i++)
80003784:	59 4a       	cp.w	r10,20
80003786:	c2 60       	breq	800037d2 <idle_proc+0x3aa>
80003788:	30 38       	mov	r8,3
8000378a:	fa ca ff c8 	sub	r10,sp,-56
		}
	}



	if (count == 20)
8000378e:	30 1b       	mov	r11,1
80003790:	14 f8       	st.b	--r10,r8
					send_cmd(0x01, sizeof version_info, version_info);
					timeout_counter = 3;
				}
				else
				{
					unsigned char d = 0x03;
80003792:	e0 6c 00 d4 	mov	r12,212
80003796:	c2 5e       	rcall	800033e0 <send_cmd>
					send_cmd(0xD4, 1, &d); // cmd exec: syntax error
80003798:	ca 6b       	rjmp	800036e4 <idle_proc+0x2bc>
					send_cmd(0x01, sizeof version_info, version_info);
					timeout_counter = 3;
				}
				else
				{
					unsigned char d = 0x03;
8000379a:	f0 ce 00 41 	sub	lr,r8,65
					send_cmd(0xD4, 1, &d); // cmd exec: syntax error
8000379e:	58 5e       	cp.w	lr,5
800037a0:	e0 8b 00 12 	brhi	800037c4 <idle_proc+0x39c>
800037a4:	23 78       	sub	r8,55
{
	if ((ch >= '0') && (ch <= '9'))
	{
		return ch - 48;
	}
	else if ((ch >= 'A') && (ch <= 'F'))
800037a6:	ce 1b       	rjmp	80003768 <idle_proc+0x340>
800037a8:	fa cb ff c8 	sub	r11,sp,-56
800037ac:	14 0b       	add	r11,r10
800037ae:	f7 3e ff c8 	ld.ub	lr,r11[-56]
	{
		return (ch - 65) + 10;
800037b2:	1c 48       	or	r8,lr
				sha1_buf_2[count] = v << 4;
				nibble = 1;
			}
			else
			{
				sha1_buf_2[count] |= v;
800037b4:	f7 68 ff c8 	st.b	r11[-56],r8
800037b8:	2f fa       	sub	r10,-1
800037ba:	59 3a       	cp.w	r10,19
800037bc:	fe 99 ff e4 	brgt	80003784 <idle_proc+0x35c>
800037c0:	30 0b       	mov	r11,0
800037c2:	cd cb       	rjmp	8000377a <idle_proc+0x352>
				nibble = 0;
				count ++;
800037c4:	f0 ce 00 61 	sub	lr,r8,97

				if (count >= 20)
800037c8:	58 5e       	cp.w	lr,5
800037ca:	fe 9b ff d8 	brhi	8000377a <idle_proc+0x352>
800037ce:	25 78       	sub	r8,87
	}
	else if ((ch >= 'A') && (ch <= 'F'))
	{
		return (ch - 65) + 10;
	}
	else if ((ch >= 'a') && (ch <= 'f'))
800037d0:	cc cb       	rjmp	80003768 <idle_proc+0x340>
800037d2:	1a 92       	mov	r2,sp
800037d4:	1a 9b       	mov	r11,sp
800037d6:	c4 dc       	rcall	80003870 <memcmp>
800037d8:	cd 81       	brne	80003788 <idle_proc+0x360>
	{
		return (ch - 97) + 10;
800037da:	30 4a       	mov	r10,4
800037dc:	e0 6b 28 04 	mov	r11,10244



	if (count == 20)
	{
		return ( memcmp(sha1_buf_1, sha1_buf_2, 20) == 0);
800037e0:	ea 1b 80 04 	orh	r11,0x8004
800037e4:	1a 9c       	mov	r12,sp
			break;
			
		case 0xE3: // end of upload
			if (system_update_counter > 10) // some minimum size
			{
				if (checksum_is_correct((system_update_counter - 1) * FLASH_BLOCK_SIZE))
800037e6:	c5 8c       	rcall	80003896 <memcpy>
				{
					struct staging_area_info tmp_info;
					
					memcpy (tmp_info.version_info, STAGING_AREA_ADDRESS + 
800037e8:	68 08       	ld.w	r8,r4[0x0]
800037ea:	20 18       	sub	r8,1
800037ec:	ba d8       	st.b	sp[0x5],r8
800037ee:	a9 48       	asr	r8,0x8
800037f0:	ba c8       	st.b	sp[0x4],r8
800037f2:	fa c8 ff fa 	sub	r8,sp,-6
800037f6:	0f 09       	ld.w	r9,r7++
						SOFTWARE_VERSION_IMAGE_OFFSET, sizeof tmp_info.version_info); // copy version info
					int num_blocks = system_update_counter - 1;
800037f8:	f2 0a 16 18 	lsr	r10,r9,0x18
					tmp_info.num_blocks_hi = num_blocks >> 8;
					tmp_info.num_blocks_lo = num_blocks & 0xFF;
800037fc:	b0 b9       	st.b	r8[0x3],r9
					struct staging_area_info tmp_info;
					
					memcpy (tmp_info.version_info, STAGING_AREA_ADDRESS + 
						SOFTWARE_VERSION_IMAGE_OFFSET, sizeof tmp_info.version_info); // copy version info
					int num_blocks = system_update_counter - 1;
					tmp_info.num_blocks_hi = num_blocks >> 8;
800037fe:	b0 8a       	st.b	r8[0x0],r10
80003800:	f2 0a 16 10 	lsr	r10,r9,0x10
					tmp_info.num_blocks_lo = num_blocks & 0xFF;
80003804:	a9 89       	lsr	r9,0x8
										
					int i;
					for (i=0; i < 5; i++)
					{
						unsigned int d = ctx1.Message_Digest[i]; // the checksum was 
80003806:	b0 9a       	st.b	r8[0x1],r10
													// calculated by function "checksum_is_correct" above

						tmp_info.sha1sum[i*4 + 0] = ((d >> 24) & 0xFF);
80003808:	b0 a9       	st.b	r8[0x2],r9
8000380a:	2f c8       	sub	r8,-4
						tmp_info.sha1sum[i*4 + 1] = ((d >> 16) & 0xFF);
						tmp_info.sha1sum[i*4 + 2] = ((d >>  8) & 0xFF);
						tmp_info.sha1sum[i*4 + 3] = ((d      ) & 0xFF);
8000380c:	06 37       	cp.w	r7,r3
					for (i=0; i < 5; i++)
					{
						unsigned int d = ctx1.Message_Digest[i]; // the checksum was 
													// calculated by function "checksum_is_correct" above

						tmp_info.sha1sum[i*4 + 0] = ((d >> 24) & 0xFF);
8000380e:	cf 41       	brne	800037f6 <idle_proc+0x3ce>
						tmp_info.sha1sum[i*4 + 1] = ((d >> 16) & 0xFF);
80003810:	1a 9b       	mov	r11,sp
80003812:	30 19       	mov	r9,1
						tmp_info.sha1sum[i*4 + 2] = ((d >>  8) & 0xFF);
80003814:	31 aa       	mov	r10,26
					{
						unsigned int d = ctx1.Message_Digest[i]; // the checksum was 
													// calculated by function "checksum_is_correct" above

						tmp_info.sha1sum[i*4 + 0] = ((d >> 24) & 0xFF);
						tmp_info.sha1sum[i*4 + 1] = ((d >> 16) & 0xFF);
80003816:	e0 6c f6 00 	mov	r12,62976
						tmp_info.sha1sum[i*4 + 2] = ((d >>  8) & 0xFF);
						tmp_info.sha1sum[i*4 + 3] = ((d      ) & 0xFF);
8000381a:	ea 1c 80 07 	orh	r12,0x8007
					int num_blocks = system_update_counter - 1;
					tmp_info.num_blocks_hi = num_blocks >> 8;
					tmp_info.num_blocks_lo = num_blocks & 0xFF;
										
					int i;
					for (i=0; i < 5; i++)
8000381e:	fe b0 f4 75 	rcall	80002108 <flashc_memcpy>
						tmp_info.sha1sum[i*4 + 1] = ((d >> 16) & 0xFF);
						tmp_info.sha1sum[i*4 + 2] = ((d >>  8) & 0xFF);
						tmp_info.sha1sum[i*4 + 3] = ((d      ) & 0xFF);
					}
					
					flashc_memcpy(STAGING_AREA_INFO_ADDRESS, & tmp_info, sizeof tmp_info, true);
80003822:	49 2a       	lddpc	r10,80003868 <idle_proc+0x440>
80003824:	34 5b       	mov	r11,69
80003826:	30 1c       	mov	r12,1
80003828:	fe b0 fd dc 	rcall	800033e0 <send_cmd>
8000382c:	30 38       	mov	r8,3
8000382e:	48 47       	lddpc	r7,8000383c <idle_proc+0x414>
80003830:	8f 08       	st.w	r7[0x0],r8
					
					send_cmd(0x01, sizeof version_info, version_info);
80003832:	c5 ab       	rjmp	800036e6 <idle_proc+0x2be>
80003834:	00 00       	add	r0,r0
80003836:	0c 00       	add	r0,r6
80003838:	00 00       	add	r0,r0
8000383a:	0c 08       	add	r8,r6
					timeout_counter = 3;
8000383c:	00 00       	add	r0,r0
8000383e:	05 20       	ld.uh	r0,r2++
80003840:	00 00       	add	r0,r0
80003842:	05 0c       	ld.w	r12,r2++
80003844:	00 00       	add	r0,r0
80003846:	0c 10       	sub	r0,r6
80003848:	00 00       	add	r0,r0
8000384a:	0c 04       	add	r4,r6
8000384c:	00 00       	add	r0,r0
8000384e:	05 1c       	ld.sh	r12,r2++
80003850:	00 00       	add	r0,r0
80003852:	05 30       	ld.ub	r0,r2++
80003854:	00 00       	add	r0,r0
80003856:	05 2c       	ld.uh	r12,r2++
80003858:	80 00       	ld.sh	r0,r0[0x0]
8000385a:	45 50       	lddsp	r0,sp[0x154]
8000385c:	80 00       	ld.sh	r0,r0[0x0]
8000385e:	45 60       	lddsp	r0,sp[0x158]
80003860:	00 00       	add	r0,r0
80003862:	0c 14       	sub	r4,r6
80003864:	00 00       	add	r0,r0
80003866:	05 18       	ld.sh	r8,r2++
80003868:	00 00       	add	r0,r0
8000386a:	0b b8       	ld.ub	r8,r5[0x3]
8000386c:	00 00       	add	r0,r0
8000386e:	0a 10       	sub	r0,r5

80003870 <memcmp>:
80003870:	d4 01       	pushm	lr
80003872:	30 08       	mov	r8,0
80003874:	c0 d8       	rjmp	8000388e <memcmp+0x1e>
80003876:	f8 08 07 0e 	ld.ub	lr,r12[r8]
8000387a:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000387e:	20 1a       	sub	r10,1
80003880:	2f f8       	sub	r8,-1
80003882:	f2 0e 18 00 	cp.b	lr,r9
80003886:	c0 40       	breq	8000388e <memcmp+0x1e>
80003888:	fc 09 01 0c 	sub	r12,lr,r9
8000388c:	d8 02       	popm	pc
8000388e:	58 0a       	cp.w	r10,0
80003890:	cf 31       	brne	80003876 <memcmp+0x6>
80003892:	14 9c       	mov	r12,r10
80003894:	d8 02       	popm	pc

80003896 <memcpy>:
80003896:	58 8a       	cp.w	r10,8
80003898:	c2 f5       	brlt	800038f6 <memcpy+0x60>
8000389a:	f9 eb 10 09 	or	r9,r12,r11
8000389e:	e2 19 00 03 	andl	r9,0x3,COH
800038a2:	e0 81 00 97 	brne	800039d0 <memcpy+0x13a>
800038a6:	e0 4a 00 20 	cp.w	r10,32
800038aa:	c3 b4       	brge	80003920 <memcpy+0x8a>
800038ac:	f4 08 14 02 	asr	r8,r10,0x2
800038b0:	f0 09 11 08 	rsub	r9,r8,8
800038b4:	fe 09 00 2f 	add	pc,pc,r9<<0x2
800038b8:	76 69       	ld.w	r9,r11[0x18]
800038ba:	99 69       	st.w	r12[0x18],r9
800038bc:	76 59       	ld.w	r9,r11[0x14]
800038be:	99 59       	st.w	r12[0x14],r9
800038c0:	76 49       	ld.w	r9,r11[0x10]
800038c2:	99 49       	st.w	r12[0x10],r9
800038c4:	76 39       	ld.w	r9,r11[0xc]
800038c6:	99 39       	st.w	r12[0xc],r9
800038c8:	76 29       	ld.w	r9,r11[0x8]
800038ca:	99 29       	st.w	r12[0x8],r9
800038cc:	76 19       	ld.w	r9,r11[0x4]
800038ce:	99 19       	st.w	r12[0x4],r9
800038d0:	76 09       	ld.w	r9,r11[0x0]
800038d2:	99 09       	st.w	r12[0x0],r9
800038d4:	f6 08 00 2b 	add	r11,r11,r8<<0x2
800038d8:	f8 08 00 28 	add	r8,r12,r8<<0x2
800038dc:	e0 1a 00 03 	andl	r10,0x3
800038e0:	f4 0a 11 04 	rsub	r10,r10,4
800038e4:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800038e8:	17 a9       	ld.ub	r9,r11[0x2]
800038ea:	b0 a9       	st.b	r8[0x2],r9
800038ec:	17 99       	ld.ub	r9,r11[0x1]
800038ee:	b0 99       	st.b	r8[0x1],r9
800038f0:	17 89       	ld.ub	r9,r11[0x0]
800038f2:	b0 89       	st.b	r8[0x0],r9
800038f4:	5e fc       	retal	r12
800038f6:	f4 0a 11 09 	rsub	r10,r10,9
800038fa:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800038fe:	17 f9       	ld.ub	r9,r11[0x7]
80003900:	b8 f9       	st.b	r12[0x7],r9
80003902:	17 e9       	ld.ub	r9,r11[0x6]
80003904:	b8 e9       	st.b	r12[0x6],r9
80003906:	17 d9       	ld.ub	r9,r11[0x5]
80003908:	b8 d9       	st.b	r12[0x5],r9
8000390a:	17 c9       	ld.ub	r9,r11[0x4]
8000390c:	b8 c9       	st.b	r12[0x4],r9
8000390e:	17 b9       	ld.ub	r9,r11[0x3]
80003910:	b8 b9       	st.b	r12[0x3],r9
80003912:	17 a9       	ld.ub	r9,r11[0x2]
80003914:	b8 a9       	st.b	r12[0x2],r9
80003916:	17 99       	ld.ub	r9,r11[0x1]
80003918:	b8 99       	st.b	r12[0x1],r9
8000391a:	17 89       	ld.ub	r9,r11[0x0]
8000391c:	b8 89       	st.b	r12[0x0],r9
8000391e:	5e fc       	retal	r12
80003920:	eb cd 40 c0 	pushm	r6-r7,lr
80003924:	18 99       	mov	r9,r12
80003926:	22 0a       	sub	r10,32
80003928:	b7 07       	ld.d	r6,r11++
8000392a:	b3 26       	st.d	r9++,r6
8000392c:	b7 07       	ld.d	r6,r11++
8000392e:	b3 26       	st.d	r9++,r6
80003930:	b7 07       	ld.d	r6,r11++
80003932:	b3 26       	st.d	r9++,r6
80003934:	b7 07       	ld.d	r6,r11++
80003936:	b3 26       	st.d	r9++,r6
80003938:	22 0a       	sub	r10,32
8000393a:	cf 74       	brge	80003928 <memcpy+0x92>
8000393c:	2f 0a       	sub	r10,-16
8000393e:	c0 65       	brlt	8000394a <memcpy+0xb4>
80003940:	b7 07       	ld.d	r6,r11++
80003942:	b3 26       	st.d	r9++,r6
80003944:	b7 07       	ld.d	r6,r11++
80003946:	b3 26       	st.d	r9++,r6
80003948:	21 0a       	sub	r10,16
8000394a:	5c 3a       	neg	r10
8000394c:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80003950:	d7 03       	nop
80003952:	d7 03       	nop
80003954:	f7 36 00 0e 	ld.ub	r6,r11[14]
80003958:	f3 66 00 0e 	st.b	r9[14],r6
8000395c:	f7 36 00 0d 	ld.ub	r6,r11[13]
80003960:	f3 66 00 0d 	st.b	r9[13],r6
80003964:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003968:	f3 66 00 0c 	st.b	r9[12],r6
8000396c:	f7 36 00 0b 	ld.ub	r6,r11[11]
80003970:	f3 66 00 0b 	st.b	r9[11],r6
80003974:	f7 36 00 0a 	ld.ub	r6,r11[10]
80003978:	f3 66 00 0a 	st.b	r9[10],r6
8000397c:	f7 36 00 09 	ld.ub	r6,r11[9]
80003980:	f3 66 00 09 	st.b	r9[9],r6
80003984:	f7 36 00 08 	ld.ub	r6,r11[8]
80003988:	f3 66 00 08 	st.b	r9[8],r6
8000398c:	f7 36 00 07 	ld.ub	r6,r11[7]
80003990:	f3 66 00 07 	st.b	r9[7],r6
80003994:	f7 36 00 06 	ld.ub	r6,r11[6]
80003998:	f3 66 00 06 	st.b	r9[6],r6
8000399c:	f7 36 00 05 	ld.ub	r6,r11[5]
800039a0:	f3 66 00 05 	st.b	r9[5],r6
800039a4:	f7 36 00 04 	ld.ub	r6,r11[4]
800039a8:	f3 66 00 04 	st.b	r9[4],r6
800039ac:	f7 36 00 03 	ld.ub	r6,r11[3]
800039b0:	f3 66 00 03 	st.b	r9[3],r6
800039b4:	f7 36 00 02 	ld.ub	r6,r11[2]
800039b8:	f3 66 00 02 	st.b	r9[2],r6
800039bc:	f7 36 00 01 	ld.ub	r6,r11[1]
800039c0:	f3 66 00 01 	st.b	r9[1],r6
800039c4:	f7 36 00 00 	ld.ub	r6,r11[0]
800039c8:	f3 66 00 00 	st.b	r9[0],r6
800039cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800039d0:	20 1a       	sub	r10,1
800039d2:	f6 0a 07 09 	ld.ub	r9,r11[r10]
800039d6:	f8 0a 0b 09 	st.b	r12[r10],r9
800039da:	cf b1       	brne	800039d0 <memcpy+0x13a>
800039dc:	5e fc       	retal	r12

800039de <memset>:
800039de:	18 98       	mov	r8,r12
800039e0:	c0 38       	rjmp	800039e6 <memset+0x8>
800039e2:	10 cb       	st.b	r8++,r11
800039e4:	20 1a       	sub	r10,1
800039e6:	58 0a       	cp.w	r10,0
800039e8:	cf d1       	brne	800039e2 <memset+0x4>
800039ea:	5e fc       	retal	r12

Disassembly of section .exception:

80003a00 <_evba>:
80003a00:	c0 08       	rjmp	80003a00 <_evba>
	...

80003a04 <_handle_TLB_Multiple_Hit>:
80003a04:	c0 08       	rjmp	80003a04 <_handle_TLB_Multiple_Hit>
	...

80003a08 <_handle_Bus_Error_Data_Fetch>:
80003a08:	c0 08       	rjmp	80003a08 <_handle_Bus_Error_Data_Fetch>
	...

80003a0c <_handle_Bus_Error_Instruction_Fetch>:
80003a0c:	c0 08       	rjmp	80003a0c <_handle_Bus_Error_Instruction_Fetch>
	...

80003a10 <_handle_NMI>:
80003a10:	c0 08       	rjmp	80003a10 <_handle_NMI>
	...

80003a14 <_handle_Instruction_Address>:
80003a14:	c0 08       	rjmp	80003a14 <_handle_Instruction_Address>
	...

80003a18 <_handle_ITLB_Protection>:
80003a18:	c0 08       	rjmp	80003a18 <_handle_ITLB_Protection>
	...

80003a1c <_handle_Breakpoint>:
80003a1c:	c0 08       	rjmp	80003a1c <_handle_Breakpoint>
	...

80003a20 <_handle_Illegal_Opcode>:
80003a20:	c0 08       	rjmp	80003a20 <_handle_Illegal_Opcode>
	...

80003a24 <_handle_Unimplemented_Instruction>:
80003a24:	c0 08       	rjmp	80003a24 <_handle_Unimplemented_Instruction>
	...

80003a28 <_handle_Privilege_Violation>:
80003a28:	c0 08       	rjmp	80003a28 <_handle_Privilege_Violation>
	...

80003a2c <_handle_Floating_Point>:
80003a2c:	c0 08       	rjmp	80003a2c <_handle_Floating_Point>
	...

80003a30 <_handle_Coprocessor_Absent>:
80003a30:	c0 08       	rjmp	80003a30 <_handle_Coprocessor_Absent>
	...

80003a34 <_handle_Data_Address_Read>:
80003a34:	c0 08       	rjmp	80003a34 <_handle_Data_Address_Read>
	...

80003a38 <_handle_Data_Address_Write>:
80003a38:	c0 08       	rjmp	80003a38 <_handle_Data_Address_Write>
	...

80003a3c <_handle_DTLB_Protection_Read>:
80003a3c:	c0 08       	rjmp	80003a3c <_handle_DTLB_Protection_Read>
	...

80003a40 <_handle_DTLB_Protection_Write>:
80003a40:	c0 08       	rjmp	80003a40 <_handle_DTLB_Protection_Write>
	...

80003a44 <_handle_DTLB_Modified>:
80003a44:	c0 08       	rjmp	80003a44 <_handle_DTLB_Modified>
	...

80003a50 <_handle_ITLB_Miss>:
80003a50:	c0 08       	rjmp	80003a50 <_handle_ITLB_Miss>
	...

80003a60 <_handle_DTLB_Miss_Read>:
80003a60:	c0 08       	rjmp	80003a60 <_handle_DTLB_Miss_Read>
	...

80003a70 <_handle_DTLB_Miss_Write>:
80003a70:	c0 08       	rjmp	80003a70 <_handle_DTLB_Miss_Write>
	...

80003b00 <_handle_Supervisor_Call>:
80003b00:	c0 08       	rjmp	80003b00 <_handle_Supervisor_Call>
80003b02:	d7 03       	nop

80003b04 <_int0>:
80003b04:	30 0c       	mov	r12,0
80003b06:	fe b0 f7 7b 	rcall	800029fc <_get_interrupt_handler>
80003b0a:	58 0c       	cp.w	r12,0
80003b0c:	f8 0f 17 10 	movne	pc,r12
80003b10:	d6 03       	rete

80003b12 <_int1>:
80003b12:	30 1c       	mov	r12,1
80003b14:	fe b0 f7 74 	rcall	800029fc <_get_interrupt_handler>
80003b18:	58 0c       	cp.w	r12,0
80003b1a:	f8 0f 17 10 	movne	pc,r12
80003b1e:	d6 03       	rete

80003b20 <_int2>:
80003b20:	30 2c       	mov	r12,2
80003b22:	fe b0 f7 6d 	rcall	800029fc <_get_interrupt_handler>
80003b26:	58 0c       	cp.w	r12,0
80003b28:	f8 0f 17 10 	movne	pc,r12
80003b2c:	d6 03       	rete

80003b2e <_int3>:
80003b2e:	30 3c       	mov	r12,3
80003b30:	fe b0 f7 66 	rcall	800029fc <_get_interrupt_handler>
80003b34:	58 0c       	cp.w	r12,0
80003b36:	f8 0f 17 10 	movne	pc,r12
80003b3a:	d6 03       	rete
80003b3c:	d7 03       	nop
80003b3e:	d7 03       	nop
80003b40:	d7 03       	nop
80003b42:	d7 03       	nop
80003b44:	d7 03       	nop
80003b46:	d7 03       	nop
80003b48:	d7 03       	nop
80003b4a:	d7 03       	nop
80003b4c:	d7 03       	nop
80003b4e:	d7 03       	nop
80003b50:	d7 03       	nop
80003b52:	d7 03       	nop
80003b54:	d7 03       	nop
80003b56:	d7 03       	nop
80003b58:	d7 03       	nop
80003b5a:	d7 03       	nop
80003b5c:	d7 03       	nop
80003b5e:	d7 03       	nop
80003b60:	d7 03       	nop
80003b62:	d7 03       	nop
80003b64:	d7 03       	nop
80003b66:	d7 03       	nop
80003b68:	d7 03       	nop
80003b6a:	d7 03       	nop
80003b6c:	d7 03       	nop
80003b6e:	d7 03       	nop
80003b70:	d7 03       	nop
80003b72:	d7 03       	nop
80003b74:	d7 03       	nop
80003b76:	d7 03       	nop
80003b78:	d7 03       	nop
80003b7a:	d7 03       	nop
80003b7c:	d7 03       	nop
80003b7e:	d7 03       	nop
80003b80:	d7 03       	nop
80003b82:	d7 03       	nop
80003b84:	d7 03       	nop
80003b86:	d7 03       	nop
80003b88:	d7 03       	nop
80003b8a:	d7 03       	nop
80003b8c:	d7 03       	nop
80003b8e:	d7 03       	nop
80003b90:	d7 03       	nop
80003b92:	d7 03       	nop
80003b94:	d7 03       	nop
80003b96:	d7 03       	nop
80003b98:	d7 03       	nop
80003b9a:	d7 03       	nop
80003b9c:	d7 03       	nop
80003b9e:	d7 03       	nop
80003ba0:	d7 03       	nop
80003ba2:	d7 03       	nop
80003ba4:	d7 03       	nop
80003ba6:	d7 03       	nop
80003ba8:	d7 03       	nop
80003baa:	d7 03       	nop
80003bac:	d7 03       	nop
80003bae:	d7 03       	nop
80003bb0:	d7 03       	nop
80003bb2:	d7 03       	nop
80003bb4:	d7 03       	nop
80003bb6:	d7 03       	nop
80003bb8:	d7 03       	nop
80003bba:	d7 03       	nop
80003bbc:	d7 03       	nop
80003bbe:	d7 03       	nop
80003bc0:	d7 03       	nop
80003bc2:	d7 03       	nop
80003bc4:	d7 03       	nop
80003bc6:	d7 03       	nop
80003bc8:	d7 03       	nop
80003bca:	d7 03       	nop
80003bcc:	d7 03       	nop
80003bce:	d7 03       	nop
80003bd0:	d7 03       	nop
80003bd2:	d7 03       	nop
80003bd4:	d7 03       	nop
80003bd6:	d7 03       	nop
80003bd8:	d7 03       	nop
80003bda:	d7 03       	nop
80003bdc:	d7 03       	nop
80003bde:	d7 03       	nop
80003be0:	d7 03       	nop
80003be2:	d7 03       	nop
80003be4:	d7 03       	nop
80003be6:	d7 03       	nop
80003be8:	d7 03       	nop
80003bea:	d7 03       	nop
80003bec:	d7 03       	nop
80003bee:	d7 03       	nop
80003bf0:	d7 03       	nop
80003bf2:	d7 03       	nop
80003bf4:	d7 03       	nop
80003bf6:	d7 03       	nop
80003bf8:	d7 03       	nop
80003bfa:	d7 03       	nop
80003bfc:	d7 03       	nop
80003bfe:	d7 03       	nop
